var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.294,1,2.356]],["body/classes/AnimationsManager.html",[0,0.161,1,2.058,2,0.135,3,0.115,4,0.135,5,0.096,6,4.587,7,0.731,8,0.419,9,1.659,10,1.657,11,5.401,12,1.415,13,1.504,14,2.49,15,1.53,16,2.815,17,0.096,18,0.249,19,1.049,20,2.815,21,3.509,22,3.509,23,2.815,24,3.509,25,3.509,26,3.509,27,3.509,28,1.112,29,2.815,30,1.035,31,1.766,32,2.13,33,3.354,34,2.426,35,3.305,36,0.474,37,1.766,38,0.539,39,0.031,40,0.474,41,0.291,42,0.474,43,0.619,44,1.671,45,0.612,46,1.098,47,1.377,48,1.833,49,1.654,50,2.569,51,0.995,52,2.358,53,1.317,54,5.32,55,0.883,56,1.766,57,4.803,58,4.492,59,4.492,60,3.368,61,4.073,62,4.002,63,3.904,64,5.32,65,5.096,66,5.346,67,1.339,68,1.895,69,3.368,70,4.492,71,4.492,72,0.419,73,1.766,74,5.572,75,1.291,76,1.895,77,2.093,78,4.373,79,1.766,80,4.373,81,1.766,82,0.652,83,0.956,84,2.815,85,3.509,86,3.354,87,4.003,88,2.358,89,1.766,90,1.48,91,3.664,92,1.766,93,1.377,94,1.876,95,3.406,96,2.633,97,2.927,98,1.654,99,2.062,100,2.927,101,1.766,102,1.766,103,1.766,104,1.766,105,3.509,106,5.231,107,1.766,108,4.003,109,4.373,110,4.373,111,2.35,112,1.766,113,2.358,114,4.668,115,1.654,116,1.504,117,3.509,118,2.94,119,3.904,120,2.815,121,0.748,122,2.815,123,1.766,124,4.888,125,1.48,126,2.815,127,1.716,128,2.058,129,2.285,130,0.956,131,2.815,132,1.766,133,3.71,134,2.391,135,4.003,136,2.28,137,2.927,138,4.003,139,0.562,140,1.48,141,2.94,142,2.058,143,1.799,144,2.058,145,1.15,146,1.48,147,4.252,148,1.076,149,2.358,150,1.766,151,2.358,152,0.92,153,0.389,154,1.48,155,0.135,156,0.482,157,1.766,158,1.766,159,1.766,160,1.766,161,0.823,162,3.509,163,1.766,164,2.94,165,1.766,166,2.94,167,1.766,168,1.766,169,1.766,170,0.2,171,1.654,172,1.766,173,1.766,174,1.15,175,1.766,176,1.766,177,1.441,178,1.766,179,1.766,180,1.766,181,3.509,182,1.766,183,2.815,184,1.766,185,2.058,186,1.833,187,1.766,188,0.944,189,1.766,190,0.787,191,1.766,192,1.766,193,1.766,194,1.766,195,1.766,196,1.766,197,2.815,198,1.766,199,1.766,200,0.731,201,3.509,202,1.766,203,2.815,204,1.766,205,3.509,206,4.003,207,1.766,208,1.291,209,1.766,210,4.373,211,1.766,212,1.377,213,2.815,214,2.358,215,2.058,216,3.509,217,2.569,218,1.15,219,1.716,220,2.815,221,4.003,222,1.48,223,4.003,224,1.766,225,1.766,226,1.48,227,2.815,228,2.94,229,1.038,230,2.815,231,2.815,232,1.766,233,1.766,234,1.766,235,1.766,236,1.766,237,1.766,238,0.864,239,1.48,240,1.766,241,2.94,242,2.815,243,1.766,244,1.766,245,1.766,246,1.766,247,1.766,248,1.15,249,1.766,250,1.766,251,1.766,252,1.766,253,1.48,254,1.48,255,1.48,256,0.731,257,1.766,258,1.766,259,1.766,260,2.815,261,1.766,262,1.291,263,1.766,264,1.766,265,1.766,266,2.058,267,1.766,268,1.766,269,1.766,270,1.766,271,1.766,272,1.038,273,1.48,274,1.48,275,1.766,276,1.766,277,1.061,278,1.766,279,1.766,280,2.815,281,1.48,282,1.766,283,2.815,284,1.766,285,1.766,286,1.766,287,1.766,288,3.509,289,1.766,290,1.766,291,1.766,292,1.766,293,1.766,294,1.766,295,1.48,296,1.766,297,1.48,298,1.766,299,1.766,300,0.907,301,1.766,302,1.766,303,1.766,304,1.48,305,1.766,306,1.766,307,1.766,308,2.815,309,3.509,310,1.766,311,1.766,312,1.766,313,1.766,314,1.766,315,1.48,316,1.766,317,4.003,318,1.766,319,0.577,320,1.766,321,1.833,322,3.509,323,1.766,324,1.766,325,1.766,326,1.766,327,1.766,328,1.15,329,1.766,330,1.15,331,4.003,332,2.815,333,1.766,334,1.48,335,1.15,336,2.815,337,2.815,338,2.815,339,0.794,340,1.766,341,1.766,342,1.766,343,1.766,344,1.766,345,1.766,346,1.766,347,1.766,348,1.291,349,0.944,350,1.038,351,0.864,352,1.766,353,1.766,354,2.358,355,2.815,356,1.291,357,2.058,358,2.815,359,1.766,360,2.815,361,1.766,362,1.766,363,1.766,364,1.766,365,1.766,366,1.766,367,1.766,368,1.766,369,1.766,370,1.766,371,1.766,372,1.766,373,1.766,374,0.731,375,1.766,376,1.766,377,4.003,378,1.766,379,1.766,380,1.766,381,1.766,382,1.48,383,2.815,384,1.766,385,1.291,386,1.766,387,1.766,388,1.766,389,0.008,390,0.013,391,0.008]],["title/classes/CMSObjects.html",[0,0.294,392,2.356]],["body/classes/CMSObjects.html",[0,0.369,2,0.309,3,0.263,4,0.309,5,0.219,8,0.391,17,0.219,18,0.451,19,0.686,36,0.357,38,0.609,39,0.031,40,0.357,41,0.219,42,0.357,44,1.951,45,0.513,72,0.391,111,2.293,118,3.384,121,0.818,130,1.218,139,0.716,142,2.953,143,1.815,144,3.731,145,2.63,148,2.139,152,1.668,153,0.889,155,0.309,156,0.391,161,0.783,170,0.457,177,1.447,186,3.644,190,1.565,219,2.875,229,3.287,272,2.998,300,1.32,356,3.731,357,3.731,389,0.018,390,0.023,391,0.018,392,3.731,393,4.276,394,2.953,395,2.113,396,2.728,397,4.276,398,5.103,399,2.998,400,2.139,401,5.103,402,5.103,403,4.039,404,2.293,405,3.637,406,6.191,407,1.428,408,5.595,409,4.039,410,4.039,411,2.953,412,3.731,413,4.276,414,3.384,415,2.373,416,2.953,417,3.384,418,4.039,419,4.039,420,4.039,421,4.039,422,4.039,423,5.103,424,4.039,425,4.039,426,5.103,427,4.039,428,4.039,429,4.039,430,6.54,431,5.103,432,2.316,433,5.103,434,4.039,435,5.103,436,4.688,437,5.103,438,5.595,439,5.595,440,4.039,441,5.103,442,4.039,443,5.103,444,4.039,445,3.384,446,4.039,447,4.039,448,4.039,449,4.039,450,4.039,451,4.039,452,4.039,453,3.384,454,3.384,455,4.039,456,2.63,457,4.039,458,5.595,459,4.039,460,4.039,461,4.039,462,4.039,463,4.039,464,4.039,465,4.039,466,4.039,467,4.039,468,4.039,469,4.039,470,4.039]],["title/classes/Configuration.html",[0,0.294,471,1.448]],["body/classes/Configuration.html",[0,0.305,2,0.255,3,0.218,4,0.255,5,0.181,8,0.418,9,1.09,17,0.181,18,0.398,19,1.098,30,1.412,34,1.864,36,0.565,38,0.513,39,0.031,40,0.45,41,0.343,42,0.45,45,0.665,46,1.218,53,0.911,55,0.632,72,0.46,82,1.014,121,0.569,139,0.8,155,0.255,156,0.418,170,0.618,177,0.862,277,1.009,319,1.92,389,0.015,390,0.021,391,0.015,407,1.26,471,2.64,472,2.794,473,4.524,474,4.464,475,2.459,476,0.765,477,5.098,478,4.271,479,5.031,480,6.107,481,3.78,482,4.271,483,5.098,484,5.459,485,5.459,486,5.459,487,4.503,488,3.773,489,2.794,490,1.115,491,1.963,492,4.503,493,3.207,494,4.574,495,3.555,496,3.555,497,3.555,498,3.991,499,3.456,500,1.959,501,2.023,502,3.292,503,2.202,504,3.335,505,2.646,506,4.503,507,3.335,508,3.335,509,3.335,510,4.922,511,2.873,512,2.64,513,2.613,514,3.335,515,3.675,516,4.167,517,2.045,518,3.32,519,3.335,520,4.503,521,1.164,522,3.335,523,3.335,524,3.335,525,4.503,526,3.335,527,2.202,528,4.503,529,3.335,530,3.335,531,2.202,532,3.335,533,2.438,534,1.959,535,1.959,536,2.794,537,3.335,538,3.335,539,1.959,540,3.335,541,3.335,542,5.098,543,3.335,544,3.335,545,3.773,546,3.335]],["title/classes/Cut.html",[0,0.294,547,1.448]],["body/classes/Cut.html",[0,0.364,2,0.305,3,0.26,4,0.305,5,0.216,8,0.387,17,0.216,18,0.447,19,1.108,28,1.473,30,1.307,36,0.56,38,0.4,39,0.031,40,0.516,41,0.34,42,0.352,45,0.666,46,1.23,53,1.341,55,0.558,72,0.305,82,1.164,83,1.581,98,3.265,155,0.305,156,0.448,188,3.422,190,1.415,248,3.619,339,2.272,389,0.018,390,0.023,391,0.018,476,0.859,490,1.086,547,2.816,548,3.335,549,3.98,550,2.338,551,4.841,552,5.557,553,5.557,554,3.93,555,6.266,556,6.266,557,6.168,558,3.98,559,5.056,560,4.236,561,5.557,562,6.266,563,6.452,564,6.266,565,3.98,566,3.98,567,3.98,568,3.98,569,3.98,570,3.98,571,5.056,572,5.056,573,3.98,574,3.98]],["title/classes/EffectsManager.html",[0,0.294,575,2.099]],["body/classes/EffectsManager.html",[0,0.317,2,0.266,3,0.226,4,0.266,5,0.188,7,1.437,8,0.425,9,1.814,10,1.915,15,2.121,17,0.188,18,0.409,19,1.087,28,1.49,30,1.345,32,2.577,34,2.755,36,0.544,38,0.523,39,0.031,40,0.46,41,0.329,42,0.46,45,0.65,50,3.492,55,0.649,72,0.425,82,1.144,121,0.702,139,0.811,153,0.764,155,0.266,156,0.455,161,0.585,170,0.393,190,0.971,208,4.056,349,2.473,389,0.016,390,0.021,391,0.016,476,0.786,521,1.673,527,3.014,575,3.013,576,5.228,577,5.163,578,4.056,579,5.466,580,3.876,581,3.876,582,6.354,583,5.203,584,5.548,585,4.626,586,4.345,587,4.626,588,4.056,589,3.382,590,4.626,591,5.548,592,2.461,593,3.876,594,2.538,595,5.203,596,2.538,597,6.302,598,5.203,599,3.876,600,2.909,601,3.472,602,2.718,603,4.649,604,4.649,605,4.056,606,5.163,607,4.626,608,3.472,609,3.382,610,4.626,611,2.909,612,3.472,613,2.909,614,4.626,615,3.472,616,3.472,617,3.472,618,4.626,619,3.472,620,4.359,621,3.876,622,3.472,623,3.472,624,3.472,625,3.472,626,3.472,627,3.472,628,3.472,629,2.909,630,3.472,631,3.472,632,3.472,633,3.472,634,3.472,635,3.472,636,3.472]],["title/interfaces/EventDataLoader.html",[481,1.894,637,1.894]],["body/interfaces/EventDataLoader.html",[3,0.373,4,0.287,5,0.203,8,0.437,9,1.868,17,0.203,18,0.429,36,0.523,38,0.543,39,0.031,40,0.477,41,0.293,42,0.477,43,1.335,44,2.394,45,0.668,46,1.202,55,0.682,72,0.492,98,2.856,130,1.525,139,0.757,155,0.287,156,0.465,200,2.012,256,2.012,389,0.017,390,0.022,391,0.017,395,2.012,475,1.858,481,2.856,490,1.147,521,1.257,592,2.012,637,2.199,638,2.736,639,4.436,640,1.682,641,4.861,642,2.644,643,4.861,644,2.856,645,2.856,646,3.054,647,3.054,648,2.856,649,2.856,650,3.054,651,2.794,652,2.727,653,2.794,654,2.394,655,3.136,656,3.244,657,2.598,658,2.184,659,2.856,660,2.377,661,2.856,662,2.598,663,2.794,664,3.054,665,2.184,666,2.856,667,1.858,668,2.598,669,2.856,670,2.856,671,2.184,672,3.171,673,2.377,674,2.598,675,3.743,676,3.063,677,2.598,678,2.856,679,4.073,680,4.073,681,2.736,682,2.184,683,3.553,684,2.567,685,4.073,686,5.085,687,3.136,688,3.054,689,2.377,690,2.377,691,2.598,692,2.598,693,2.856,694,3.743,695,4.861,696,4.578,697,4.177,698,2.598,699,2.377,700,3.136,701,3.136]],["title/classes/ExportManager.html",[0,0.294,702,2.356]],["body/classes/ExportManager.html",[0,0.281,2,0.235,3,0.2,4,0.235,5,0.338,7,1.272,8,0.459,9,1.724,10,1.763,12,1.504,17,0.167,18,0.376,19,0.973,28,1.527,30,1.432,32,2.512,36,0.529,38,0.591,39,0.031,40,0.549,41,0.325,42,0.519,43,0.937,45,0.631,46,1.181,47,3.142,49,2.502,55,0.74,72,0.45,121,0.538,125,2.575,139,0.685,148,2.456,152,1.004,153,0.676,155,0.45,156,0.48,161,0.804,170,0.553,200,2.575,328,4.01,339,1.913,351,2.082,389,0.024,390,0.019,391,0.014,417,4.093,432,1.272,471,2.691,490,1.155,501,1.913,502,2.246,517,1.724,665,1.913,671,2.953,676,1.503,683,3.113,702,3.113,703,5.095,704,4.258,705,4.258,706,4.258,707,4.258,708,4.258,709,4.258,710,2.575,711,4.258,712,4.419,713,2.37,714,3.567,715,3.567,716,3.567,717,3.567,718,5.731,719,3.806,720,4.258,721,2.246,722,2.276,723,4.258,724,5.095,725,4.501,726,3.073,727,4.258,728,4.258,729,4.258,730,3.073,731,4.258,732,3.073,733,4.258,734,3.073,735,4.258,736,4.258,737,4.258,738,2.575,739,4.258,740,4.419,741,4.258,742,3.073,743,4.258,744,3.073,745,2.575,746,4.886,747,3.073,748,3.073,749,3.073,750,5.275,751,3.073,752,2.246,753,2.246,754,3.073,755,2.246,756,4.258,757,3.073,758,3.073,759,2.575,760,3.073,761,3.073,762,3.073,763,5.275,764,3.073,765,5.275,766,3.073,767,2.246,768,3.073,769,3.073,770,3.073,771,3.073,772,3.073,773,3.073,774,3.073,775,2.575,776,3.073,777,3.073,778,3.073,779,3.073,780,2.575,781,3.073,782,3.073,783,3.073,784,2.575,785,3.073,786,3.073]],["title/classes/Field.html",[0,0.294,554,2.099]],["body/classes/Field.html",[0,0.47,2,0.26,3,0.222,4,0.26,5,0.184,8,0.26,13,1.816,14,1.816,17,0.184,18,0.403,36,0.3,38,0.342,39,0.031,40,0.3,41,0.184,42,0.3,43,0.748,53,1.291,67,0.748,72,0.452,77,1.527,82,0.631,93,1.662,94,2.751,96,2.654,99,1.997,116,2.751,121,0.43,127,2.517,129,2.213,136,1.527,139,0.477,143,2.967,153,0.748,155,0.26,156,0.47,161,0.763,170,0.516,188,3.157,190,0.951,229,3.232,238,1.662,256,1.407,277,1.028,300,1.179,321,2.97,389,0.021,390,0.021,391,0.016,400,2.103,407,1.276,432,2.445,476,0.577,491,1.111,554,3.582,667,1.743,787,2.97,788,2.213,789,3.399,790,3.399,791,3.399,792,3.399,793,3.334,794,3.688,795,3.688,796,1.662,797,1.662,798,2.711,799,2.484,800,2.484,801,2.484,802,2.97,803,3.232,804,3.024,805,3.232,806,2.484,807,2.484,808,2.484,809,3.736,810,2.484,811,2.484,812,2.484,813,2.484,814,4.021,815,3.763,816,3.334,817,3.334,818,4.411,819,4.483,820,4.021,821,4.021,822,2.484,823,2.484,824,2.484,825,4.411,826,2.484,827,2.484,828,4.483,829,2.484,830,2.484,831,3.763,832,4.411,833,2.484,834,2.484,835,2.484,836,3.334,837,2.484,838,2.484,839,2.484,840,2.484,841,2.484,842,2.484,843,2.484,844,2.484,845,2.484,846,2.484,847,2.484,848,2.484,849,2.484,850,2.484,851,2.484,852,2.213,853,2.484,854,3.763,855,3.334,856,2.484,857,3.763,858,2.213,859,3.763,860,3.334,861,2.484,862,2.213,863,2.484,864,2.484,865,2.484,866,3.334,867,3.334,868,3.334,869,3.334,870,3.352,871,2.97,872,3.763,873,1.997,874,3.334,875,1.997,876,2.213,877,2.679,878,2.213,879,2.213,880,2.213,881,2.484,882,3.334,883,2.484,884,2.484,885,2.484,886,2.484,887,2.484,888,2.484,889,2.484]],["title/classes/ImportManager.html",[0,0.294,890,2.356]],["body/classes/ImportManager.html",[0,0.194,2,0.163,3,0.212,4,0.163,5,0.284,7,0.881,8,0.433,9,1.449,10,1.349,12,1.151,17,0.116,18,0.288,19,1.023,28,1.47,30,1.023,36,0.515,38,0.557,39,0.031,40,0.587,41,0.317,42,0.489,43,1.19,45,0.506,46,1.029,49,1.914,53,1.122,55,0.777,60,3.079,61,3.491,67,0.975,68,1.78,72,0.433,76,2.23,82,0.395,111,2.882,121,0.684,130,1.566,139,0.735,145,2.576,148,2.464,151,4.22,152,1.907,153,0.469,155,0.163,156,0.497,161,0.762,170,0.448,174,2.886,177,1.023,200,1.349,214,1.784,215,4.647,219,3.26,228,4.22,272,1.914,277,1.523,300,0.842,319,0.696,330,2.576,335,4.01,351,1.593,374,0.881,389,0.01,390,0.015,391,0.01,396,2.553,404,2.263,407,1.512,412,2.381,413,3.315,414,2.729,432,0.881,454,3.713,475,1.512,476,0.553,490,1.22,491,1.969,493,3.176,497,1.387,503,2.463,602,1.914,665,1.464,667,1.694,671,2.729,689,1.593,713,2.541,719,3.379,722,3.291,725,3.682,738,1.784,755,4.502,775,1.784,875,1.914,890,2.381,891,4.948,892,5.037,893,5.406,894,5.406,895,2.729,896,2.729,897,3.315,898,3.257,899,3.257,900,3.257,901,3.956,902,3.257,903,3.257,904,2.729,905,1.784,906,1.784,907,3.257,908,2.129,909,4.738,910,4.22,911,2.729,912,3.682,913,2.729,914,5.343,915,2.129,916,3.322,917,3.379,918,4.738,919,4.134,920,4.738,921,2.129,922,2.129,923,3.257,924,2.129,925,2.129,926,2.369,927,3.257,928,2.129,929,3.257,930,2.129,931,2.121,932,2.129,933,2.129,934,2.381,935,3.257,936,3.257,937,3.257,938,3.315,939,3.257,940,3.257,941,4.776,942,2.129,943,3.956,944,2.129,945,3.956,946,2.129,947,2.129,948,3.257,949,2.129,950,2.129,951,2.129,952,2.129,953,2.129,954,2.129,955,2.129,956,2.129,957,3.257,958,3.956,959,2.129,960,2.129,961,2.129,962,2.129,963,2.129,964,3.315,965,4.432,966,2.129,967,2.129,968,2.129,969,4.776,970,3.257,971,2.129,972,2.129,973,2.129,974,2.129,975,2.129,976,2.129,977,2.129,978,2.129,979,2.129,980,2.129,981,2.129,982,1.784,983,2.129,984,2.129,985,3.956,986,3.956,987,2.121,988,2.129,989,2.129,990,2.129,991,2.129,992,2.129,993,2.129,994,2.129,995,3.257,996,3.257,997,2.129,998,2.129,999,2.129,1000,2.129,1001,2.129,1002,2.129]],["title/classes/InfoLogger.html",[0,0.294,654,1.232]],["body/classes/InfoLogger.html",[0,0.393,2,0.329,3,0.434,4,0.329,5,0.233,8,0.406,17,0.233,18,0.469,28,1.501,36,0.531,38,0.432,39,0.031,40,0.38,41,0.312,42,0.38,43,1.168,45,0.432,46,1.205,53,1.074,55,0.603,68,1.52,72,0.441,82,0.986,83,1.267,115,3.118,155,0.329,156,0.406,170,0.487,389,0.02,390,0.024,391,0.02,476,0.901,490,1.168,521,1.112,527,2.596,592,2.197,654,2.029,672,3.812,673,2.103,684,2.826,699,2.596,873,3.118,934,3.88,1003,5.173,1004,3.603,1005,5.757,1006,5.757,1007,1.818,1008,6.011,1009,4.3,1010,4.447,1011,4.3,1012,5.307,1013,5.307,1014,2.596,1015,2.837,1016,5.307,1017,3.406,1018,4.3,1019,5.307,1020,4.597,1021,4.3,1022,2.596,1023,4.3,1024,4.3,1025,4.3,1026,4.3,1027,4.3]],["title/classes/JSRootEventLoader.html",[0,0.294,1028,2.356]],["body/classes/JSRootEventLoader.html",[0,0.234,2,0.339,3,0.244,4,0.196,5,0.329,8,0.476,12,1.323,15,0.98,17,0.139,18,0.331,19,1.019,28,1.56,30,1.143,36,0.568,38,0.63,39,0.031,40,0.553,41,0.355,42,0.546,43,1.37,44,2.362,45,0.669,46,1.176,47,1.831,51,1.908,55,0.831,67,1.07,68,1.323,72,0.476,76,1.562,130,1.556,134,1.831,136,1.682,139,0.36,148,0.98,152,1.69,155,0.196,156,0.396,161,0.324,170,0.29,177,1.143,200,2.235,212,2.64,217,3.357,266,3.779,315,3.137,350,1.507,374,1.55,389,0.012,390,0.017,391,0.012,395,1.062,404,2.426,405,2.598,407,1.63,475,1.858,476,0.636,490,1.156,503,2.377,511,1.831,512,1.682,513,1.062,515,3.479,517,1.868,521,0.968,531,3.096,547,1.682,550,1.507,592,2.308,640,1.152,642,1.55,644,2.2,645,2.2,646,2.363,647,2.363,648,2.2,649,1.507,650,2.598,651,2.162,652,2.505,653,2.162,654,1.858,656,2.001,657,1.371,658,1.682,659,1.507,660,1.254,661,1.507,662,1.371,663,1.831,664,2.001,665,1.152,666,1.507,667,0.98,668,1.371,669,1.507,670,1.507,671,1.152,673,1.254,674,1.371,676,2.935,677,2.363,682,2.426,684,2.505,688,2.001,689,1.254,690,1.254,691,1.371,692,1.371,693,1.507,698,1.371,699,2.162,713,2.505,719,2.2,722,2.001,767,1.875,797,1.831,917,3.037,926,1.371,1007,0.776,1014,2.377,1015,1.371,1017,2.001,1022,2.162,1028,2.737,1029,4.961,1030,2.737,1031,4.421,1032,3.752,1033,5.714,1034,2.737,1035,3.744,1036,3.744,1037,3.744,1038,3.744,1039,2.438,1040,3.516,1041,2.438,1042,2.438,1043,2.438,1044,2.438,1045,3.744,1046,3.137,1047,2.565,1048,2.565,1049,4.479,1050,1.875,1051,1.875,1052,1.67,1053,1.875,1054,1.67,1055,3.744,1056,4.861,1057,2.565,1058,3.744,1059,3.744,1060,3.744,1061,3.744,1062,3.744,1063,3.137,1064,2.565,1065,2.565,1066,2.565,1067,2.565,1068,2.565,1069,2.565,1070,2.565,1071,2.565,1072,3.744,1073,2.565,1074,3.744,1075,3.744,1076,3.744,1077,1.67,1078,3.166,1079,2.438,1080,1.875,1081,2.2,1082,1.67,1083,1.507,1084,1.67,1085,1.507,1086,2.438,1087,2.438,1088,1.67,1089,1.67,1090,2.438,1091,2.438,1092,2.438,1093,1.507,1094,1.67,1095,1.875,1096,3.037,1097,3.037,1098,1.67,1099,1.67,1100,1.371,1101,1.507,1102,1.875,1103,1.875,1104,1.875,1105,3.367,1106,1.875,1107,1.875,1108,1.67,1109,1.875,1110,1.67,1111,1.67,1112,1.67,1113,1.875,1114,2.438,1115,1.67,1116,1.875,1117,1.507,1118,1.67,1119,1.67,1120,1.875,1121,2.565,1122,2.565,1123,2.565,1124,2.565,1125,2.149,1126,2.149,1127,2.565,1128,2.565,1129,2.565,1130,2.565,1131,2.149,1132,2.565,1133,3.744,1134,2.565,1135,2.565,1136,2.565,1137,3.744]],["title/classes/LHCbLoader.html",[0,0.294,1138,2.356]],["body/classes/LHCbLoader.html",[0,0.277,2,0.232,3,0.316,4,0.232,5,0.165,8,0.47,12,1.491,15,1.159,17,0.165,18,0.373,19,1.078,28,1.506,30,1.426,36,0.571,38,0.624,39,0.031,40,0.548,41,0.355,42,0.536,43,1.256,44,2.238,45,0.671,46,1.224,51,1.491,55,0.821,67,1.068,68,1.491,72,0.486,76,1.072,130,1.515,134,1.483,139,0.425,148,1.159,152,1.802,155,0.232,156,0.232,161,0.534,177,0.784,200,2.282,212,2.696,319,1.379,350,1.782,389,0.014,390,0.019,391,0.014,395,1.256,404,2.477,405,2.851,407,1.638,475,2.182,476,0.717,490,1.126,511,2.063,512,1.896,513,1.256,517,1.379,521,1.091,531,3.163,547,1.896,550,1.782,592,1.256,640,1.363,642,1.747,644,2.479,645,2.479,646,2.593,647,3.051,648,2.479,649,1.782,650,2.803,651,2.373,652,2.631,653,2.373,654,2.005,656,2.255,657,1.621,658,1.896,659,1.782,660,1.483,661,1.782,662,1.621,663,2.063,664,2.255,665,1.363,666,1.782,667,1.159,668,1.621,669,1.782,670,1.782,671,1.363,673,1.483,674,1.621,676,3.035,677,2.593,681,2.217,682,2.564,684,2.477,688,2.803,689,2.063,690,2.063,691,2.255,692,2.255,693,1.782,698,1.621,699,2.373,713,1.363,797,2.063,916,2.479,917,3.239,926,1.621,1007,0.917,1014,1.483,1015,1.621,1017,2.255,1022,2.373,1030,3.084,1034,3.834,1039,2.748,1040,3.717,1041,2.748,1042,2.748,1043,2.748,1044,2.748,1049,4.61,1050,2.217,1051,2.217,1052,1.975,1053,2.217,1054,1.975,1077,1.975,1078,3.416,1079,2.748,1080,2.217,1081,2.479,1082,1.975,1083,1.782,1084,1.975,1085,1.782,1086,2.748,1087,2.748,1088,1.975,1089,1.975,1090,2.748,1091,2.748,1092,2.748,1093,1.782,1094,1.975,1095,2.217,1096,2.851,1097,2.851,1098,1.975,1099,1.975,1100,1.621,1101,1.782,1102,2.217,1103,2.217,1104,2.217,1105,3.59,1106,2.217,1107,2.217,1108,1.975,1109,2.217,1110,1.975,1111,1.975,1112,1.975,1113,2.217,1114,2.748,1115,1.975,1116,2.217,1117,1.782,1118,1.975,1119,1.975,1120,2.217,1138,3.084,1139,4.782,1140,5.513,1141,3.535,1142,3.033,1143,2.541,1144,4.219,1145,3.033,1146,4.219,1147,3.033,1148,2.541,1149,3.033,1150,2.541,1151,3.033,1152,3.033,1153,4.219,1154,3.033,1155,4.219]],["title/classes/PhoenixLoader.html",[0,0.294,531,1.576]],["body/classes/PhoenixLoader.html",[0,0.19,2,0.159,3,0.308,4,0.159,5,0.113,8,0.421,12,1.547,15,1.224,17,0.113,18,0.283,19,0.935,28,1.432,32,0.796,36,0.519,38,0.583,39,0.031,40,0.496,41,0.348,42,0.486,43,1.211,44,2.271,45,0.652,46,1.114,47,1.018,51,1.547,53,0.886,55,0.753,67,0.964,68,1.131,72,0.45,76,1.131,77,0.935,82,0.387,83,0.764,93,1.018,98,1.223,111,1.753,116,1.711,121,0.723,130,1.527,134,1.018,136,1.438,139,0.772,148,1.674,152,1.992,153,0.704,155,0.159,156,0.459,161,0.815,170,0.442,177,1.222,190,0.896,200,2.153,212,2.797,217,1.223,226,1.744,241,2.682,272,1.223,300,0.538,304,2.682,350,1.881,351,1.018,374,0.862,389,0.01,390,0.015,391,0.01,395,1.325,399,1.223,404,1.438,405,3.055,407,1.644,415,1.223,416,1.522,436,1.744,475,1.807,476,0.662,481,2.292,490,1.103,499,1.711,511,1.566,512,1.438,513,1.615,516,1.355,517,1.046,521,1.132,531,1.566,533,1.522,534,1.223,547,2.124,550,1.881,592,1.615,640,0.935,642,1.615,644,1.881,645,1.881,646,2.085,647,2.341,648,1.881,649,1.881,650,2.869,651,2.441,652,2.695,653,2.441,654,2.051,655,1.744,656,2.341,657,1.711,658,1.968,659,1.881,660,1.908,661,1.881,662,1.711,663,2.142,664,2.085,665,1.438,666,1.881,667,1.224,668,1.711,669,1.881,670,1.881,671,1.438,672,1.223,673,1.566,674,1.112,676,3.001,677,3.102,678,1.223,681,1.522,682,2.57,684,2.243,688,2.779,689,1.566,690,1.566,691,2.085,692,2.527,693,1.223,697,3.649,698,1.112,699,2.441,713,0.935,794,1.223,795,1.223,797,2.142,873,1.223,912,2.34,917,1.881,926,1.112,1007,1.18,1014,1.566,1015,2.085,1017,3.102,1022,2.441,1039,2.54,1040,3.495,1041,2.085,1042,2.085,1043,2.085,1044,2.085,1052,2.085,1054,2.085,1077,1.355,1078,3.585,1079,3.251,1081,2.573,1082,3.079,1083,1.881,1084,2.085,1085,1.881,1086,2.852,1087,2.852,1088,2.085,1089,2.085,1090,2.852,1091,3.906,1092,3.251,1093,2.573,1094,1.355,1096,3.153,1097,3.055,1098,2.085,1099,2.085,1100,1.711,1101,1.881,1105,3.386,1108,2.085,1110,2.852,1111,2.085,1112,2.085,1114,2.852,1115,1.355,1117,1.223,1118,1.355,1119,1.355,1148,1.744,1150,1.744,1156,4.978,1157,3.201,1158,2.081,1159,2.081,1160,2.081,1161,2.081,1162,2.081,1163,2.081,1164,2.081,1165,2.081,1166,2.081,1167,2.081,1168,2.081,1169,2.081,1170,2.081,1171,1.744,1172,1.744,1173,2.081,1174,2.081,1175,2.081,1176,1.744,1177,2.081,1178,2.081,1179,2.081,1180,2.081,1181,3.201,1182,3.961,1183,3.201,1184,2.081,1185,2.081,1186,3.201,1187,3.901,1188,2.081,1189,2.081,1190,2.081,1191,2.081,1192,2.081,1193,2.081,1194,2.081,1195,2.081,1196,2.081,1197,2.081,1198,2.081,1199,2.081,1200,1.522,1201,3.201,1202,4.379,1203,3.201,1204,3.201,1205,2.081,1206,2.081,1207,2.081,1208,2.081,1209,1.744,1210,2.081,1211,2.081,1212,4.379,1213,2.081,1214,3.201,1215,2.081,1216,2.081,1217,2.081,1218,2.081,1219,2.081,1220,2.081,1221,2.081,1222,1.744,1223,2.081,1224,2.081,1225,2.081,1226,4.379,1227,2.081,1228,3.201,1229,2.081,1230,2.081,1231,2.081,1232,2.081,1233,4.727,1234,2.081,1235,2.081,1236,2.081,1237,2.081,1238,2.081,1239,2.081,1240,1.744,1241,2.081,1242,2.081,1243,3.201,1244,2.081,1245,2.081,1246,2.081,1247,2.081,1248,2.081,1249,1.744,1250,2.081,1251,1.744,1252,2.081,1253,2.081,1254,2.081,1255,3.201,1256,2.081,1257,2.081,1258,2.081,1259,3.201,1260,2.081,1261,3.201,1262,2.081,1263,2.081,1264,2.081,1265,2.682,1266,2.081,1267,1.744,1268,2.081,1269,2.081,1270,2.081,1271,2.081,1272,2.081,1273,3.201,1274,2.081,1275,3.201,1276,2.081,1277,2.081,1278,2.081,1279,2.682,1280,2.081,1281,2.081,1282,2.081,1283,1.355,1284,1.522,1285,2.081,1286,2.081,1287,2.081,1288,2.081,1289,2.081,1290,2.081,1291,2.081,1292,3.901,1293,3.201,1294,3.201,1295,2.081,1296,2.081,1297,2.081,1298,3.901,1299,3.201,1300,2.081,1301,1.744,1302,2.081,1303,2.081,1304,1.744,1305,2.081,1306,2.081,1307,2.081,1308,3.201,1309,2.081,1310,2.081,1311,2.081,1312,2.081,1313,2.081,1314,2.081,1315,2.081,1316,2.081,1317,2.081,1318,2.081]],["title/classes/PhoenixMenuNode.html",[0,0.294,513,1.334]],["body/classes/PhoenixMenuNode.html",[0,0.227,2,0.191,3,0.162,4,0.191,5,0.135,8,0.423,17,0.135,18,0.324,28,1.038,30,0.947,36,0.56,38,0.537,39,0.031,40,0.564,41,0.344,42,0.472,43,0.806,48,3.122,53,0.742,55,0.811,67,1.312,68,1.952,72,0.462,82,0.992,83,1.479,111,1.119,121,0.315,130,1.404,137,1.821,155,0.191,156,0.467,161,0.744,170,0.543,177,1.24,190,1.025,256,2.435,277,1.714,300,1.382,319,0.814,334,2.087,339,1.646,349,3.143,389,0.011,390,0.017,391,0.011,471,2.4,476,0.622,490,1.194,491,2.009,499,3.508,501,1.646,513,2.644,515,1.463,516,4.378,517,1.972,534,3.738,609,2.679,642,1.031,798,2.643,916,3.329,964,5.371,987,1.622,1007,1.45,1100,3.257,1251,5.255,1304,2.087,1319,5.331,1320,2.087,1321,5.109,1322,4.347,1323,4.347,1324,5.881,1325,5.308,1326,4.347,1327,6.094,1328,5.106,1329,4.347,1330,3.664,1331,3.664,1332,4.794,1333,3.07,1334,3.664,1335,3.664,1336,4.794,1337,2.087,1338,3.664,1339,5.667,1340,2.49,1341,2.49,1342,2.49,1343,2.49,1344,2.49,1345,2.49,1346,3.664,1347,2.49,1348,2.49,1349,2.49,1350,3.664,1351,3.664,1352,2.49,1353,3.664,1354,2.49,1355,3.327,1356,2.49,1357,3.07,1358,2.49,1359,2.49,1360,3.664,1361,2.49,1362,3.664,1363,2.49,1364,3.664,1365,3.664,1366,3.664,1367,3.664,1368,2.49,1369,3.07,1370,2.087,1371,2.49,1372,4.794,1373,3.664,1374,3.664,1375,2.49,1376,2.49,1377,2.49,1378,3.664,1379,2.49,1380,2.49,1381,2.49,1382,2.49,1383,2.49,1384,2.49,1385,2.087,1386,2.49,1387,2.49,1388,2.49,1389,2.49,1390,2.49,1391,2.49,1392,4.347,1393,2.49,1394,3.664,1395,2.49,1396,2.49,1397,2.49,1398,2.49,1399,3.664,1400,2.49,1401,2.49,1402,2.49,1403,4.347,1404,2.087,1405,2.49,1406,2.49,1407,2.49,1408,3.664,1409,2.49,1410,3.664,1411,2.49,1412,5.109,1413,2.49,1414,2.49,1415,2.49,1416,2.49,1417,2.49,1418,2.087,1419,2.49,1420,2.49,1421,2.49,1422,2.49,1423,2.49,1424,2.49,1425,2.49,1426,4.347,1427,2.49,1428,2.49,1429,2.49,1430,2.49,1431,2.49,1432,2.49,1433,2.49,1434,3.664,1435,2.49,1436,2.49,1437,2.49,1438,2.49,1439,2.49,1440,2.49]],["title/classes/PhoenixObjects.html",[0,0.294,399,1.894]],["body/classes/PhoenixObjects.html",[0,0.255,2,0.214,3,0.349,4,0.214,5,0.152,8,0.426,17,0.152,18,0.352,19,0.859,36,0.472,38,0.656,39,0.031,40,0.472,41,0.29,42,0.472,44,1.522,45,0.4,72,0.456,97,2.043,111,2.273,115,1.642,116,1.493,119,3.337,121,0.813,127,2.269,130,1.496,133,4.413,134,2.798,139,0.651,141,2.341,142,2.911,143,1.255,144,2.911,145,3.022,146,2.341,147,3.337,148,2.307,149,2.341,152,0.913,153,0.615,155,0.214,156,0.387,161,0.836,164,2.341,166,3.337,170,0.662,177,1.308,186,3.022,190,1.298,217,3.436,218,1.82,219,3.102,238,1.367,239,4.238,255,2.341,262,2.911,266,2.911,272,2.34,277,1.403,281,3.888,295,2.341,297,2.341,300,1.03,330,3.294,335,3.978,356,2.043,357,2.043,385,2.043,389,0.013,390,0.018,391,0.013,394,2.043,395,1.649,396,2.129,399,2.34,400,2.395,404,2.674,407,1.665,411,2.043,412,2.043,415,1.642,416,2.043,432,1.649,453,2.341,456,3.294,517,1.302,682,2.273,796,1.367,858,3.022,876,3.808,877,1.642,931,1.82,938,3.888,987,1.82,1176,2.341,1209,3.337,1265,3.888,1267,4.793,1279,3.337,1283,3.294,1284,3.698,1441,4.657,1442,3.983,1443,3.983,1444,3.983,1445,3.983,1446,3.983,1447,3.983,1448,2.794,1449,3.983,1450,2.794,1451,5.559,1452,2.794,1453,2.794,1454,3.983,1455,3.983,1456,2.794,1457,3.983,1458,2.794,1459,5.72,1460,4.64,1461,2.794,1462,2.794,1463,4.64,1464,2.794,1465,3.983,1466,4.64,1467,2.794,1468,1.82,1469,2.794,1470,2.043,1471,2.794,1472,2.794,1473,2.794,1474,2.794,1475,2.341,1476,3.983,1477,2.794,1478,5.058,1479,5.347,1480,2.794,1481,2.794,1482,2.794,1483,2.794,1484,2.794,1485,2.794,1486,4.64,1487,2.341,1488,4.64,1489,2.341,1490,5.347,1491,3.888,1492,4.64,1493,3.337,1494,2.794,1495,2.794,1496,3.983,1497,2.794,1498,2.794,1499,2.794,1500,2.794,1501,2.794,1502,2.794,1503,2.794,1504,4.64,1505,2.794,1506,2.794,1507,2.794,1508,2.794,1509,2.794,1510,2.794,1511,5.058,1512,2.341,1513,2.794,1514,2.794,1515,2.794,1516,2.794,1517,4.64,1518,2.794,1519,2.794,1520,2.794,1521,2.794,1522,2.794,1523,3.983,1524,2.794,1525,2.794,1526,2.794,1527,2.794,1528,2.794,1529,5.347,1530,2.794,1531,2.794,1532,5.058,1533,2.794,1534,2.794,1535,2.794,1536,2.794,1537,2.794,1538,3.983,1539,2.043,1540,2.794,1541,2.794,1542,2.794,1543,3.983,1544,3.983,1545,3.983,1546,3.983,1547,3.983,1548,2.794,1549,2.794,1550,2.794,1551,2.794,1552,2.794,1553,2.794,1554,2.794,1555,2.794,1556,2.794,1557,2.794,1558,2.794,1559,2.794,1560,2.794,1561,2.794,1562,3.983,1563,2.794,1564,2.794,1565,2.794,1566,2.794,1567,2.794]],["title/classes/PresetView.html",[0,0.294,518,2.099]],["body/classes/PresetView.html",[0,0.381,2,0.32,3,0.272,4,0.32,5,0.226,8,0.399,17,0.226,18,0.46,19,1.096,30,1.079,34,2.534,36,0.551,38,0.42,39,0.031,40,0.577,41,0.332,42,0.369,53,1.239,55,0.585,67,0.918,72,0.399,96,2.805,155,0.32,156,0.435,170,0.473,185,4.348,319,2.041,339,2.341,389,0.019,390,0.024,391,0.019,473,4.852,474,3.051,476,0.885,490,1.22,503,2.909,505,3.935,518,3.392,1325,5.576,1337,4.364,1369,3.496,1370,4.758,1568,5.305,1569,3.496,1570,4.173,1571,4.173,1572,3.496,1573,6.401,1574,5.679,1575,5.948,1576,5.209,1577,5.948,1578,4.173,1579,4.173,1580,4.173,1581,4.173,1582,4.173,1583,4.173,1584,4.173]],["title/classes/PrettySymbols.html",[0,0.294,1585,2.099]],["body/classes/PrettySymbols.html",[0,0.354,2,0.297,3,0.253,4,0.297,5,0.21,8,0.42,17,0.21,18,0.439,19,0.932,36,0.485,38,0.626,39,0.031,40,0.439,41,0.325,42,0.439,51,1.369,72,0.42,82,0.719,83,0.925,93,1.895,121,0.629,127,1.895,130,1.566,155,0.297,156,0.458,161,0.757,170,0.621,253,3.246,339,1.741,389,0.018,390,0.023,391,0.018,395,2.058,400,2.435,456,2.523,476,0.844,490,1.075,500,2.92,678,2.276,802,3.236,803,2.92,804,2.92,805,2.92,1007,1.172,1083,3.598,1385,4.85,1470,2.832,1539,3.633,1585,3.236,1586,4.85,1587,3.246,1588,6.56,1589,5.131,1590,4.597,1591,4.97,1592,4.97,1593,4.164,1594,4.85,1595,4.97,1596,4.97,1597,4.97,1598,5.788,1599,5.788,1600,5.788,1601,5.788,1602,4.164,1603,3.874,1604,4.97,1605,3.874,1606,6.308,1607,4.97,1608,4.97,1609,3.874,1610,6.228,1611,5.986,1612,5.487,1613,3.874,1614,3.874,1615,3.874,1616,3.874,1617,3.874,1618,3.874,1619,5.487,1620,3.874,1621,4.97,1622,3.874,1623,3.874,1624,3.874,1625,4.97,1626,3.874,1627,3.874,1628,3.246,1629,3.874,1630,3.874,1631,3.246,1632,3.874,1633,5.788,1634,3.874,1635,3.874,1636,3.874,1637,3.246,1638,4.97,1639,3.874,1640,3.874,1641,3.874,1642,3.874,1643,3.874,1644,3.874,1645,3.874]],["title/classes/RKHelper.html",[0,0.294,1468,2.099]],["body/classes/RKHelper.html",[0,0.348,2,0.292,3,0.249,4,0.292,5,0.207,8,0.417,14,3.075,17,0.207,18,0.508,19,0.835,36,0.434,38,0.494,39,0.031,40,0.434,41,0.312,42,0.434,43,1.082,45,0.494,51,1.738,53,0.995,55,0.535,67,1.198,72,0.486,82,1.011,83,0.91,94,2.037,96,2.209,121,0.622,127,2.405,133,4.205,136,2.209,139,0.69,143,2.676,153,0.839,155,0.292,156,0.417,161,0.785,170,0.557,171,2.239,177,1.272,212,3.074,217,3.693,238,2.405,277,1.487,300,1.577,374,2.036,389,0.017,390,0.022,391,0.017,400,2.331,445,3.193,456,2.482,491,1.246,500,2.889,642,1.578,682,2.209,794,2.239,795,2.239,796,3.034,803,2.239,804,2.239,805,3.645,809,3.746,870,2.482,877,3.38,878,3.202,879,3.202,880,3.202,919,2.786,1249,3.193,1468,3.202,1470,3.595,1475,4.82,1487,4.12,1489,4.12,1491,4.12,1493,3.193,1539,3.595,1593,4.12,1631,4.12,1637,3.193,1646,4.561,1647,3.193,1648,5.444,1649,4.917,1650,3.811,1651,3.811,1652,4.917,1653,4.917,1654,4.12,1655,4.917,1656,3.811,1657,5.444,1658,3.811,1659,3.811,1660,3.811,1661,3.811,1662,3.811,1663,3.811,1664,3.811,1665,4.561,1666,3.193,1667,3.811,1668,3.811,1669,5.444,1670,3.811,1671,4.917,1672,3.811,1673,3.811,1674,3.811,1675,3.811,1676,3.811,1677,3.811,1678,3.811,1679,3.811,1680,3.811,1681,3.811,1682,3.811,1683,3.811,1684,3.811,1685,3.811,1686,3.193,1687,3.811,1688,3.811,1689,3.811,1690,3.811,1691,3.811,1692,3.811,1693,3.811,1694,3.811,1695,3.811]],["title/classes/RendererManager.html",[0,0.294,35,2.099]],["body/classes/RendererManager.html",[0,0.22,2,0.184,3,0.157,4,0.184,5,0.13,7,0.995,8,0.463,9,1.54,10,1.478,12,1.261,15,2.144,17,0.231,18,0.315,19,1.08,28,1.498,30,0.622,32,2.144,34,2.45,35,2.325,36,0.562,38,0.609,39,0.031,40,0.529,41,0.337,42,0.529,45,0.564,49,2.097,50,3.939,51,1.505,53,0.487,55,0.83,60,3.296,72,0.489,75,1.758,77,1.604,82,0.791,83,1.368,113,2.991,121,0.451,130,0.852,139,0.337,153,0.786,155,0.184,156,0.471,161,0.709,170,0.618,177,0.622,190,0.999,218,3.069,256,0.995,277,1.288,300,0.923,319,1.958,330,2.325,348,4.101,349,1.908,351,2.58,389,0.011,390,0.016,391,0.011,396,1.908,476,0.606,479,3.948,489,2.991,490,0.98,491,1.958,493,2.769,494,3.948,495,3.279,505,2.097,521,1.364,527,2.305,586,4.101,588,4.871,593,4.958,594,2.61,596,1.758,599,2.991,609,2.61,629,2.014,652,1.08,684,2.857,699,2.305,710,2.014,722,2.276,745,2.991,1007,1.08,1063,5.118,1200,2.61,1696,5.348,1697,4.258,1698,4.258,1699,5.034,1700,6.426,1701,3.57,1702,3.57,1703,4.712,1704,4.712,1705,4.712,1706,4.712,1707,4.712,1708,3.57,1709,3.57,1710,3.57,1711,3.57,1712,3.57,1713,3.57,1714,3.57,1715,3.57,1716,4.697,1717,4.886,1718,2.014,1719,3.57,1720,4.802,1721,3.57,1722,3.57,1723,2.404,1724,3.57,1725,2.404,1726,3.57,1727,3.57,1728,2.014,1729,4.101,1730,4.7,1731,2.404,1732,2.404,1733,4.712,1734,2.404,1735,3.57,1736,2.014,1737,3.57,1738,3.57,1739,2.404,1740,3.57,1741,2.404,1742,3.57,1743,2.404,1744,3.57,1745,2.404,1746,3.57,1747,3.568,1748,2.404,1749,3.568,1750,3.57,1751,3.57,1752,2.014,1753,3.57,1754,3.57,1755,2.404,1756,3.57,1757,5.275,1758,2.404,1759,3.57,1760,4.712,1761,4.712,1762,4.712,1763,3.57,1764,2.404,1765,2.404,1766,2.404,1767,2.404,1768,3.57,1769,4.258,1770,2.404,1771,2.404,1772,2.404,1773,2.404,1774,2.404,1775,2.404,1776,2.404,1777,2.404,1778,2.404,1779,2.404,1780,2.404,1781,2.404,1782,2.404,1783,3.57,1784,2.404,1785,2.404,1786,2.404,1787,2.404,1788,3.57,1789,4.712,1790,2.404,1791,2.404,1792,2.404,1793,2.404,1794,3.57,1795,2.404,1796,2.404,1797,2.404,1798,3.57]],["title/classes/RungeKutta.html",[0,0.294,796,1.576]],["body/classes/RungeKutta.html",[0,0.452,2,0.241,3,0.205,4,0.241,5,0.171,8,0.379,13,2.313,14,2.313,17,0.171,18,0.382,36,0.382,38,0.435,39,0.031,40,0.382,41,0.268,42,0.382,43,0.952,53,1.327,55,0.441,67,1.088,72,0.461,77,1.413,82,0.584,83,0.751,93,2.116,94,2.847,96,2.779,99,1.848,116,2.986,121,0.398,127,2.605,129,2.818,136,1.944,139,0.441,143,2.952,153,0.692,155,0.241,156,0.461,161,0.748,170,0.49,188,3.366,190,1.211,229,3.13,238,2.116,256,1.302,277,1.309,300,1.378,321,2.818,389,0.02,390,0.02,391,0.014,400,2.206,407,1.49,432,2.39,476,0.735,491,1.028,500,1.848,667,2.036,787,3.221,788,2.049,793,3.895,794,3.749,795,3.749,796,2.116,797,2.116,798,2.83,799,3.163,800,3.163,801,3.163,802,3.221,803,3.391,804,3.13,805,3.391,806,2.3,807,2.3,808,2.3,809,3.638,810,2.3,811,2.3,812,2.3,813,2.3,814,3.895,815,3.616,816,3.163,817,3.163,818,4.323,819,4.404,820,3.895,821,3.895,822,2.3,823,2.3,824,2.3,825,4.323,826,2.3,827,2.3,828,4.404,829,2.3,830,2.3,831,3.616,832,4.323,833,2.3,834,2.3,835,2.3,836,3.163,837,2.3,838,2.3,839,2.3,840,2.3,841,2.3,842,2.3,843,2.3,844,2.3,845,2.3,846,2.3,847,2.3,848,2.3,849,2.3,850,2.3,851,2.3,852,2.049,853,2.3,854,3.616,855,3.163,856,2.3,857,3.616,858,2.049,859,3.616,860,3.163,861,2.3,862,2.049,863,2.3,864,2.3,865,2.3,866,4.083,867,3.895,868,3.895,869,3.895,870,3.638,871,3.469,872,4.083,873,2.542,874,3.895,875,2.542,876,2.818,877,3.13,878,2.818,879,2.818,880,2.818,881,3.163,882,3.163,883,2.3,884,2.3,885,2.3,886,2.3,887,2.3,888,2.3,889,2.3,1799,3.146,1800,3.146,1801,3.146]],["title/classes/ScriptLoader.html",[0,0.294,1802,2.356]],["body/classes/ScriptLoader.html",[0,0.356,2,0.299,3,0.254,4,0.299,5,0.212,8,0.421,17,0.212,18,0.441,19,0.848,36,0.441,38,0.502,39,0.031,40,0.441,41,0.271,42,0.513,45,0.502,46,1.078,55,0.772,67,0.858,68,1.378,69,2.932,72,0.421,76,1.764,82,0.724,83,0.931,121,0.493,155,0.299,156,0.444,161,0.759,170,0.442,177,1.009,222,3.268,274,4.182,300,1.291,389,0.018,390,0.023,391,0.018,400,2.345,475,1.908,490,1.139,495,3.25,501,2.803,503,2.838,512,2.473,551,3.649,640,1.752,658,1.752,719,3.605,1007,1.18,1032,3.711,1046,3.268,1085,2.932,1328,4.182,1802,3.649,1803,4.024,1804,6.627,1805,5.803,1806,4.991,1807,5.14,1808,4.991,1809,4.991,1810,4.991,1811,4.991,1812,4.991,1813,4.991,1814,6.379,1815,5.803,1816,5.504,1817,3.9,1818,5.803,1819,4.991,1820,4.991,1821,4.991,1822,4.991,1823,5.803,1824,3.268,1825,3.9,1826,4.991,1827,3.9,1828,3.9,1829,3.9,1830,3.9,1831,3.9,1832,3.9,1833,3.9,1834,3.9,1835,3.9,1836,3.9,1837,3.9,1838,3.9,1839,3.9,1840,4.991,1841,3.9,1842,3.9,1843,3.9,1844,3.9,1845,3.9,1846,3.9,1847,3.9,1848,3.9,1849,3.9,1850,4.991,1851,3.9,1852,5.803,1853,3.9,1854,3.9,1855,3.9,1856,3.9,1857,3.9,1858,3.9,1859,3.9]],["title/classes/SelectionManager.html",[0,0.294,1860,2.356]],["body/classes/SelectionManager.html",[0,0.204,2,0.171,3,0.22,4,0.171,5,0.121,7,0.924,8,0.408,9,1.901,10,2.124,12,1.193,15,1.736,17,0.121,18,0.298,19,1.032,28,1.58,30,1.261,32,2.435,34,2.553,36,0.556,38,0.516,39,0.031,40,0.485,41,0.335,42,0.431,43,0.999,44,1.864,45,0.645,46,1.019,47,2.8,49,1.984,51,1.193,53,0.452,55,0.77,67,1.26,69,3.014,72,0.438,76,1.605,82,0.843,83,1.084,121,0.617,130,1.555,139,0.684,148,1.961,152,1.104,153,0.491,155,0.171,156,0.438,161,0.746,170,0.514,171,3.364,177,0.873,186,1.454,190,0.945,208,3.75,218,2.199,277,0.675,300,1.327,319,1.677,349,1.805,389,0.01,390,0.015,391,0.01,404,1.003,407,1.27,432,1.398,476,0.771,490,1.108,491,1.594,497,3.176,500,2.393,511,1.092,521,1.584,527,2.509,575,3.923,577,4.086,578,4.011,579,4.298,580,3.804,581,3.804,589,1.632,592,1.88,602,1.984,603,2.829,604,3.804,605,3.75,606,4.298,611,1.87,613,2.829,620,2.829,621,1.87,654,2.303,658,1.003,667,1.291,672,1.984,673,2.221,678,2.393,696,3.319,721,1.632,740,1.87,862,2.199,931,2.199,1007,0.675,1014,2.509,1015,2.427,1020,2.977,1022,2.221,1283,4.102,1284,4.31,1301,1.87,1512,1.87,1585,1.454,1589,1.87,1728,1.87,1729,4.185,1730,3.804,1736,1.87,1752,2.829,1860,2.468,1861,5.299,1862,4.073,1863,4.073,1864,4.073,1865,4.073,1866,4.073,1867,4.073,1868,4.298,1869,4.541,1870,4.541,1871,3.804,1872,3.377,1873,3.412,1874,3.377,1875,3.377,1876,3.377,1877,2.829,1878,3.377,1879,3.377,1880,3.377,1881,3.377,1882,3.377,1883,2.232,1884,4.997,1885,3.377,1886,2.468,1887,1.87,1888,3.377,1889,3.377,1890,3.377,1891,2.232,1892,5.964,1893,5.13,1894,4.541,1895,2.232,1896,2.232,1897,2.232,1898,2.232,1899,2.829,1900,4.597,1901,2.232,1902,2.232,1903,2.829,1904,4.541,1905,2.232,1906,2.829,1907,2.829,1908,3.377,1909,3.377,1910,2.232,1911,1.87,1912,3.377,1913,2.232,1914,4.073,1915,3.377,1916,3.377,1917,1.87,1918,3.377,1919,2.232,1920,4.073,1921,2.232,1922,2.232,1923,2.232,1924,2.232,1925,2.232,1926,2.232,1927,4.073,1928,2.232,1929,2.232,1930,2.232,1931,2.232,1932,1.87,1933,2.232,1934,2.232,1935,2.232,1936,2.232,1937,2.232,1938,2.232,1939,2.232,1940,5.13,1941,2.232,1942,3.377,1943,2.232,1944,4.073,1945,2.232,1946,3.377,1947,2.232,1948,2.232,1949,2.232,1950,4.073,1951,4.877,1952,2.232,1953,2.232,1954,2.232,1955,2.232,1956,3.377,1957,2.232,1958,2.232,1959,2.232,1960,2.232,1961,2.232,1962,2.232,1963,2.232,1964,2.232,1965,2.232,1966,2.232,1967,2.232,1968,2.232,1969,2.232,1970,3.377,1971,2.232,1972,2.232,1973,1.87,1974,2.232,1975,2.232,1976,2.232,1977,2.232,1978,2.232,1979,3.377,1980,2.232,1981,2.232,1982,2.232,1983,2.232,1984,2.232,1985,2.232,1986,2.232,1987,2.232,1988,2.232,1989,2.232,1990,2.232,1991,2.232,1992,2.232,1993,2.232,1994,2.232,1995,2.232,1996,2.232,1997,2.232]],["title/classes/State.html",[0,0.294,798,1.448]],["body/classes/State.html",[0,0.399,2,0.244,3,0.208,4,0.244,5,0.173,8,0.244,13,1.703,14,1.703,17,0.173,36,0.534,39,0.031,41,0.328,43,0.701,53,1.317,62,2.329,67,0.701,72,0.41,77,1.432,82,1.122,83,1.443,93,1.558,94,2.662,96,2.666,99,1.872,115,1.872,116,2.999,121,0.63,127,2.744,129,2.843,136,1.432,139,0.447,143,2.932,153,0.701,155,0.244,156,0.463,161,0.75,170,0.494,177,1.499,188,3.23,190,1.221,229,3.147,238,1.558,256,1.319,262,3.191,277,0.964,300,1.129,321,2.843,389,0.02,390,0.02,391,0.015,400,1.669,407,1.221,432,2.399,476,0.846,491,1.042,667,1.669,787,3.992,788,2.075,793,3.191,794,3.643,795,3.643,796,1.558,797,1.558,798,2.754,799,2.329,800,2.329,801,2.329,802,3.243,803,3.405,804,3.147,805,3.405,806,2.329,807,2.329,808,2.329,809,3.654,810,2.329,811,2.329,812,2.329,813,2.329,814,3.916,815,3.64,816,3.191,817,3.191,818,4.338,819,4.417,820,3.916,821,3.916,822,2.329,823,2.329,824,2.329,825,4.338,826,2.329,827,2.329,828,4.417,829,2.329,830,2.329,831,3.64,832,4.338,833,2.329,834,2.329,835,2.329,836,3.191,837,2.329,838,2.329,839,2.329,840,2.329,841,2.329,842,2.329,843,2.329,844,2.329,845,2.329,846,2.329,847,2.329,848,2.329,849,2.329,850,2.329,851,2.329,852,2.075,853,2.329,854,3.64,855,3.191,856,2.329,857,3.64,858,2.075,859,3.64,860,3.191,861,2.329,862,2.075,863,2.329,864,2.329,865,2.329,866,3.191,867,3.191,868,3.191,869,3.191,870,3.243,871,3.243,872,3.64,873,2.565,874,3.191,875,2.565,876,2.843,877,2.565,878,2.075,879,2.075,880,2.075,881,2.329,882,3.916,883,2.329,884,2.329,885,2.329,886,2.329,887,2.329,888,2.329,889,2.329,1998,4.366,1999,4.366,2000,4.366,2001,4.366,2002,3.187,2003,3.187,2004,3.187,2005,3.187,2006,3.187,2007,3.187,2008,3.187,2009,3.187,2010,3.187,2011,2.67]],["title/classes/StateManager.html",[0,0.294,535,1.894]],["body/classes/StateManager.html",[0,0.265,2,0.222,3,0.189,4,0.222,5,0.33,7,1.202,8,0.452,9,1.989,10,1.694,17,0.158,18,0.361,28,1.131,30,1.225,32,1.564,33,3.97,34,2.626,36,0.563,38,0.581,39,0.031,40,0.511,41,0.342,42,0.511,45,0.604,46,1.045,48,2.664,53,1.098,55,0.854,60,3.727,67,0.639,68,1.026,72,0.466,76,1.446,121,0.517,130,1.381,139,0.665,153,0.639,155,0.222,156,0.443,161,0.712,170,0.537,185,4.389,277,0.878,319,1.989,328,3.35,339,2.129,351,2.001,374,1.202,389,0.013,390,0.019,391,0.013,400,2.151,476,0.695,482,4.715,488,3.428,490,0.955,491,1.773,495,1.89,496,3.35,499,3.091,501,2.529,513,2.33,515,3.398,516,3.846,517,1.89,521,1.553,533,2.122,534,1.705,535,3.307,539,3.679,545,3.428,589,2.122,594,2.122,596,2.122,600,2.432,721,2.991,724,2.432,753,2.122,780,2.432,784,2.432,798,2.936,916,3.746,987,1.89,1007,0.878,1017,2.187,1333,3.428,1355,1.89,1357,3.428,1404,2.432,1718,2.432,1729,3.761,1887,2.432,2012,5.368,2013,4.091,2014,4.091,2015,5.145,2016,4.738,2017,5.03,2018,5.145,2019,4.091,2020,5.145,2021,4.091,2022,4.091,2023,4.091,2024,4.091,2025,2.902,2026,4.091,2027,2.902,2028,4.091,2029,4.738,2030,2.902,2031,2.902,2032,4.091,2033,2.902,2034,4.091,2035,2.902,2036,4.091,2037,4.091,2038,2.902,2039,4.091,2040,2.902,2041,4.091,2042,5.424,2043,2.902,2044,2.902,2045,4.091,2046,2.902,2047,2.902,2048,2.902,2049,2.902,2050,2.902,2051,2.902,2052,2.902,2053,4.091,2054,4.091,2055,2.902,2056,4.091,2057,2.902,2058,2.902,2059,2.902,2060,2.902,2061,2.902,2062,2.902,2063,2.902,2064,4.091,2065,2.902,2066,2.902,2067,2.902,2068,2.902,2069,4.091,2070,2.902,2071,2.902,2072,2.902,2073,2.902,2074,2.902,2075,5.145,2076,2.902,2077,2.902,2078,2.902,2079,2.902,2080,2.902,2081,2.902,2082,2.902,2083,2.902,2084,2.902,2085,2.902,2086,2.902,2087,2.902,2088,2.902,2089,2.902,2090,2.902,2091,2.902]],["title/classes/TrackmlLoader.html",[0,0.294,2092,2.356]],["body/classes/TrackmlLoader.html",[0,0.267,2,0.224,3,0.268,4,0.224,5,0.159,8,0.48,12,1.454,15,1.118,17,0.159,18,0.363,19,1.089,28,1.543,30,1.231,36,0.575,38,0.635,39,0.031,40,0.558,41,0.358,42,0.549,43,1.369,44,2.216,45,0.654,46,1.2,51,1.454,53,0.592,55,0.844,67,1.047,68,1.454,72,0.483,76,1.034,114,4.958,130,1.507,134,2.981,139,0.41,148,1.118,152,1.778,155,0.224,156,0.224,161,0.37,190,0.819,200,2.138,212,2.525,350,1.719,389,0.013,390,0.019,391,0.013,395,1.211,404,2.445,405,2.796,407,1.622,411,3.008,475,1.974,476,0.699,490,1.144,511,2.012,512,1.849,513,1.211,517,1.345,521,1.064,531,3.15,547,1.849,550,1.719,592,1.211,640,1.315,642,1.703,644,2.417,645,2.417,646,2.544,647,2.544,648,2.417,649,1.719,650,2.76,651,2.327,652,2.605,653,2.327,654,1.974,656,2.199,657,1.564,658,1.849,659,1.719,660,1.431,661,1.719,662,1.564,663,2.012,664,2.199,665,1.315,666,1.719,667,1.118,668,1.564,669,1.719,670,1.719,671,1.315,673,1.431,674,1.564,676,3.014,677,2.544,682,2.535,684,2.445,687,2.452,688,2.199,689,1.431,690,1.431,691,1.564,692,1.564,693,1.719,698,1.564,699,2.327,713,2.535,797,2.012,917,3.315,926,1.564,1007,0.885,1014,1.431,1015,1.564,1017,2.199,1022,2.327,1030,3.008,1034,3.008,1039,2.68,1040,3.675,1041,2.68,1042,2.68,1043,2.68,1044,2.68,1049,4.583,1050,2.139,1051,2.139,1052,1.906,1053,2.139,1054,1.906,1077,1.906,1078,3.363,1079,2.68,1080,2.139,1081,2.417,1082,1.906,1083,1.719,1084,1.906,1085,1.719,1086,2.68,1087,2.68,1088,1.906,1089,1.906,1090,2.68,1091,2.68,1092,2.68,1093,1.719,1094,1.906,1095,2.139,1096,2.796,1097,2.796,1098,1.906,1099,1.906,1100,1.564,1101,1.719,1102,2.139,1103,2.139,1104,2.139,1105,3.543,1106,2.139,1107,2.139,1108,1.906,1109,2.139,1110,1.906,1111,1.906,1112,1.906,1113,2.139,1114,2.68,1115,1.906,1116,2.139,1117,1.719,1118,1.906,1119,1.906,1120,2.139,1141,2.452,2092,3.008,2093,5.04,2094,5.163,2095,4.759,2096,4.759,2097,4.759,2098,4.115,2099,4.115,2100,4.115,2101,4.115,2102,4.115,2103,2.926,2104,4.115,2105,2.926,2106,2.926,2107,2.926,2108,5.163,2109,2.926,2110,4.115,2111,2.926,2112,5.163,2113,2.926,2114,2.926,2115,2.926,2116,2.926,2117,2.926,2118,2.926,2119,2.926,2120,2.926,2121,2.926,2122,2.926,2123,2.926,2124,2.926]],["title/classes/VRManager.html",[0,0.294,2125,2.356]],["body/classes/VRManager.html",[0,0.252,2,0.212,3,0.18,4,0.212,5,0.15,7,1.144,8,0.408,9,1.292,12,1.396,13,2.112,17,0.15,18,0.349,19,1.098,28,1.567,32,1.511,34,2.744,36,0.562,38,0.506,39,0.031,40,0.445,41,0.337,42,0.407,43,1.108,45,0.397,47,2.709,48,3.798,50,3.538,53,0.934,55,0.8,67,0.87,68,1.396,69,2.957,72,0.454,75,2.021,76,2.06,82,0.989,83,1.271,86,3.865,95,2.021,96,1.242,100,4.049,121,0.583,128,2.889,137,2.021,139,0.388,143,2.393,152,1.992,153,0.608,155,0.212,156,0.424,161,0.583,170,0.522,171,3.35,188,1.477,254,3.311,256,1.636,277,1.395,300,0.715,319,1.94,348,2.021,351,2.256,374,2.084,385,2.021,389,0.013,390,0.018,391,0.013,396,2.465,400,1.763,407,1.408,476,0.671,490,0.734,491,1.81,493,1.624,496,3.278,521,1.022,527,2.709,588,4.049,660,2.256,663,1.933,871,4.009,904,2.316,905,2.316,906,2.316,1590,3.865,1911,2.316,1917,2.316,2011,2.316,2125,2.889,2126,5.357,2127,4.926,2128,4.613,2129,5.702,2130,4.613,2131,4.886,2132,4.613,2133,4.613,2134,4.613,2135,4.613,2136,4.613,2137,5.034,2138,3.952,2139,5.034,2140,5.034,2141,3.952,2142,5.034,2143,3.952,2144,2.764,2145,2.764,2146,5.325,2147,2.764,2148,5.488,2149,2.764,2150,2.764,2151,2.764,2152,2.889,2153,3.952,2154,2.764,2155,3.952,2156,3.952,2157,3.952,2158,2.764,2159,2.764,2160,3.952,2161,5.831,2162,2.764,2163,3.952,2164,3.952,2165,3.952,2166,2.764,2167,3.952,2168,2.764,2169,2.316,2170,2.764,2171,2.764,2172,2.764,2173,2.764,2174,2.764,2175,2.764,2176,2.764,2177,2.764,2178,3.952,2179,3.952,2180,2.764,2181,3.952,2182,2.764,2183,3.952,2184,2.764,2185,2.764,2186,2.764,2187,2.764,2188,2.764,2189,2.764,2190,4.613,2191,2.764,2192,3.952,2193,2.764,2194,3.952,2195,2.764,2196,2.764,2197,4.613,2198,3.952,2199,2.764,2200,2.764,2201,2.764,2202,2.764,2203,2.764,2204,2.764,2205,3.952,2206,3.952,2207,2.764,2208,2.764,2209,2.764,2210,2.764,2211,2.764,2212,2.764,2213,2.764,2214,2.764,2215,2.764,2216,2.764,2217,3.952,2218,2.764,2219,2.764,2220,2.764,2221,2.764,2222,2.764]],["title/interfaces/Window.html",[637,1.894,2223,2.356]],["body/interfaces/Window.html",[0,0.252,3,0.3,4,0.132,5,0.316,8,0.132,9,1.643,10,0.713,11,4.053,12,1.219,13,0.92,14,0.92,15,1.319,17,0.093,18,0.244,19,1.088,28,1.27,30,0.713,32,2.033,34,1.428,39,0.031,40,0.559,41,0.273,43,1.282,44,1.65,45,0.652,46,1.11,47,1.348,50,1.62,51,1.628,52,1.442,53,1.12,54,3.859,55,0.646,57,3.859,58,2.31,59,2.31,60,1.011,61,1.258,62,2.016,63,2.31,64,3.617,65,2.89,66,2.89,67,0.607,69,2.318,70,2.31,71,2.31,72,0.385,76,1.88,77,0.773,82,0.641,83,0.411,88,1.442,90,2.31,91,2.89,93,1.687,94,0.92,95,1.258,96,1.239,97,2.016,98,1.62,99,1.011,100,2.016,111,1.94,121,0.612,128,1.258,130,1.493,136,2.174,139,0.646,152,0.563,153,0.759,155,0.132,156,0.504,161,0.737,170,0.569,171,1.011,174,1.796,177,0.445,190,0.481,200,1.428,215,4.337,219,3.078,238,0.842,248,1.121,256,1.142,273,3.859,300,1.341,319,0.563,335,2.569,349,0.92,382,1.442,389,0.008,390,0.013,391,0.008,395,1.142,407,1.353,471,2.526,473,1.258,474,1.258,475,1.319,476,0.468,490,1.172,491,1.885,493,1.011,496,3.151,497,2.246,498,2.522,499,2.108,501,2.07,502,2.016,503,2.901,505,1.62,510,2.31,512,1.55,515,1.62,517,1.411,521,1.431,527,1.687,535,2.027,536,1.442,539,2.954,578,1.258,586,1.258,592,1.142,602,2.318,605,2.016,637,2.027,638,1.258,639,1.258,642,1.428,646,0.92,647,0.92,650,0.92,651,1.687,652,2.33,653,1.348,654,1.508,656,0.92,657,0.92,658,0.773,660,1.687,663,1.348,664,1.474,665,0.773,668,0.92,671,2.07,672,2.318,674,0.92,676,2.253,677,0.92,678,2.027,679,1.442,680,1.442,682,1.772,683,1.258,684,0.773,685,2.31,686,3.617,688,1.474,689,1.348,690,0.842,691,1.474,692,0.92,696,3.156,697,1.258,698,2.307,700,1.442,701,1.442,712,2.31,713,2.07,714,1.442,715,2.31,716,1.442,717,1.442,719,2.318,722,2.772,725,2.522,752,2.016,753,2.016,755,3.791,759,1.442,767,1.258,852,1.796,875,1.62,895,1.442,896,1.442,897,1.442,909,4.053,910,2.31,911,1.442,912,2.016,913,1.442,914,4.882,916,3.193,918,3.305,919,2.884,920,3.305,926,1.474,931,1.121,934,1.258,982,1.442,1007,1.193,1010,2.31,1014,0.842,1032,3.125,1081,2.027,1093,1.011,1101,1.62,1117,2.027,1125,2.31,1126,1.442,1131,2.31,1143,1.442,1171,3.305,1172,2.89,1200,2.016,1240,1.442,1283,3.274,1355,1.796,1572,2.89,1628,1.442,1686,2.31,1716,2.522,1717,2.31,1720,2.31,1747,1.442,1749,1.442,1824,1.442,1868,1.442,1871,1.442,1873,1.442,1877,2.31,1884,2.89,1886,2.522,1899,1.442,1900,1.442,1903,1.442,1906,2.31,1907,1.442,1932,3.305,1973,1.442,2017,1.442,2127,2.884,2131,1.442,2148,1.442,2223,3.675,2224,1.442,2225,1.721,2226,2.31,2227,1.721,2228,1.442,2229,2.757,2230,1.721,2231,3.45,2232,3.45,2233,1.721,2234,1.721,2235,1.721,2236,1.721,2237,2.757,2238,1.442,2239,1.721,2240,1.721,2241,1.721,2242,1.721,2243,1.721,2244,1.721,2245,1.721,2246,2.757,2247,1.721,2248,1.721,2249,1.721,2250,1.721,2251,1.721,2252,1.721,2253,2.757,2254,3.45,2255,1.721,2256,2.757,2257,1.721,2258,1.721,2259,1.721,2260,1.721,2261,1.721,2262,1.721,2263,1.721,2264,1.721,2265,1.721,2266,3.45,2267,1.721,2268,1.721,2269,1.721,2270,1.721,2271,1.721,2272,1.721,2273,1.721,2274,1.721,2275,1.721,2276,2.757,2277,2.757,2278,2.757,2279,2.757,2280,1.721,2281,1.721,2282,1.721,2283,1.721,2284,1.721,2285,1.721,2286,1.721,2287,1.721,2288,1.721,2289,6.154,2290,4.606,2291,1.721,2292,1.721,2293,3.945,2294,3.45,2295,3.945,2296,1.721,2297,1.721,2298,1.721,2299,1.721,2300,1.721,2301,1.721,2302,2.757,2303,1.721,2304,1.721,2305,2.757,2306,1.721,2307,1.721,2308,1.721,2309,1.721,2310,1.721,2311,1.721,2312,1.721,2313,1.721,2314,1.721,2315,1.721,2316,1.721,2317,1.721,2318,1.721,2319,2.757,2320,2.757,2321,2.757,2322,1.721,2323,1.721,2324,1.721,2325,1.721,2326,4.606,2327,1.721,2328,3.45,2329,1.721,2330,1.721,2331,1.721,2332,3.45,2333,1.442,2334,1.721,2335,1.721,2336,1.721,2337,1.721,2338,1.721,2339,1.721,2340,1.721,2341,1.721,2342,1.721,2343,1.721,2344,1.721,2345,1.721,2346,1.721,2347,1.721,2348,1.721,2349,1.721,2350,1.721,2351,1.721,2352,1.721,2353,1.721,2354,1.721,2355,1.721,2356,1.721,2357,1.721,2358,1.721,2359,1.721,2360,2.757,2361,1.721,2362,1.721,2363,1.721,2364,1.721,2365,1.721,2366,1.721,2367,1.721,2368,1.721,2369,1.721,2370,1.721,2371,1.721,2372,1.721,2373,1.721,2374,1.721,2375,1.721,2376,1.721,2377,1.721,2378,1.442,2379,1.721,2380,1.721,2381,1.721,2382,1.721,2383,1.721,2384,1.721,2385,2.757,2386,1.721,2387,1.721,2388,1.721,2389,1.721,2390,1.721,2391,3.45,2392,2.757,2393,2.757,2394,3.45,2395,1.721,2396,1.721,2397,1.721,2398,1.721,2399,1.721,2400,2.757,2401,1.721,2402,1.721,2403,3.45,2404,1.721,2405,1.721,2406,2.757,2407,2.31,2408,1.721,2409,1.721,2410,1.721,2411,1.721,2412,1.721,2413,1.442,2414,1.721,2415,1.721,2416,1.721,2417,1.721,2418,1.721,2419,1.721,2420,1.721,2421,2.757,2422,1.721,2423,1.721]],["title/changelog.html",[2152,1.967,2424,2.255,2425,2.691]],["body/changelog.html",[3,0.293,5,0.244,9,1.468,10,1.859,32,1.717,39,0.025,42,0.481,45,0.669,46,0.834,83,1.072,115,3.202,170,0.509,219,2.197,248,2.925,319,1.468,328,2.925,374,1.859,389,0.021,390,0.025,391,0.021,396,2.401,397,4.566,471,2.018,475,1.717,478,3.763,501,2.637,503,2.87,505,2.639,517,1.782,521,1.7,547,2.449,551,3.283,560,3.763,652,2.018,662,2.401,798,2.449,1007,1.648,1020,3.283,1355,2.925,1594,4.566,1602,3.763,1654,3.763,1665,3.763,1716,3.283,1886,3.283,2127,3.984,2169,3.763,2238,3.763,2333,3.763,2378,4.566,2426,4.491,2427,4.491,2428,4.491,2429,4.491,2430,4.491,2431,4.491,2432,4.491,2433,4.491,2434,4.491,2435,5.868,2436,4.491,2437,4.491,2438,4.491,2439,6.489,2440,4.491,2441,4.491,2442,4.491,2443,4.491,2444,6.251,2445,4.491,2446,4.491,2447,5.45,2448,4.491,2449,4.491,2450,4.491,2451,5.45,2452,4.491,2453,4.491,2454,4.491,2455,4.491,2456,4.491,2457,4.491,2458,4.491,2459,4.491,2460,4.491,2461,4.491,2462,4.491,2463,4.491,2464,4.491,2465,4.491,2466,4.491,2467,4.491,2468,4.491,2469,4.491,2470,4.491,2471,4.491,2472,4.491,2473,4.491,2474,4.491,2475,4.491,2476,4.491,2477,4.491,2478,4.491,2479,5.45,2480,4.491,2481,4.491,2482,3.763,2483,4.491,2484,4.491,2485,3.283]],["title/coverage.html",[2486,3.686]],["body/coverage.html",[0,0.619,1,2.986,5,0.222,6,3.423,7,2.682,35,2.66,39,0.031,41,0.222,45,0.411,46,0.759,121,0.517,140,3.423,389,0.019,390,0.023,391,0.019,392,2.986,393,3.423,394,3.757,399,2.4,415,2.4,471,1.836,472,3.423,481,2.4,499,2.183,513,1.691,518,2.66,531,1.998,534,2.4,535,2.4,539,2.4,547,1.836,548,3.423,554,2.66,575,2.66,576,3.423,637,3.02,639,4.111,640,2.89,651,1.998,653,1.998,654,1.561,702,2.986,703,3.423,787,3.663,788,3.663,796,1.998,798,1.836,890,2.986,891,3.423,1003,3.423,1004,3.423,1028,2.986,1029,3.423,1032,2.4,1138,2.986,1139,3.423,1156,3.423,1182,5.696,1319,3.423,1320,3.423,1441,3.423,1468,2.66,1568,3.423,1569,3.423,1585,2.66,1586,3.423,1587,3.423,1646,3.423,1647,3.423,1696,3.423,1802,2.986,1803,3.757,1860,2.986,1861,3.423,2012,3.423,2092,2.986,2093,3.423,2125,2.986,2126,3.423,2223,2.986,2224,4.307,2226,3.423,2486,3.423,2487,4.085,2488,4.085,2489,4.085,2490,5.14,2491,4.085,2492,5.624,2493,5.14,2494,5.902,2495,4.085,2496,3.423,2497,4.307,2498,5.14,2499,4.085,2500,5.624,2501,4.085,2502,4.085,2503,4.085,2504,4.085,2505,4.085,2506,4.085,2507,4.085,2508,4.085,2509,5.624,2510,4.085,2511,4.085,2512,4.085,2513,4.085,2514,4.085,2515,4.085,2516,4.085,2517,4.085,2518,4.085,2519,4.085,2520,4.085,2521,4.085,2522,4.085,2523,4.085,2524,4.085,2525,4.085]],["title/dependencies.html",[2485,1.967,2526,3.248]],["body/dependencies.html",[39,0.03,153,1.143,154,4.351,389,0.024,390,0.027,391,0.024,498,3.797,2482,4.351,2526,4.351,2527,5.194,2528,5.194,2529,5.194,2530,5.194,2531,5.194,2532,5.194,2533,5.194]],["title/index.html",[17,0.146,2152,1.967,2424,2.255]],["body/index.html",[2,0.361,15,1.804,39,0.031,45,0.662,46,1.043,77,2.12,111,2.12,121,0.71,139,0.788,161,0.71,174,3.903,219,2.746,339,2.693,374,1.954,389,0.022,390,0.026,391,0.022,471,2.847,501,2.523,511,2.308,517,2.028,521,1.68,539,3.522,602,2.773,690,2.308,713,2.12,722,2.522,752,3.45,1022,2.308,1100,2.522,1666,3.954,2407,3.954,2413,4.704,2485,3.45,2534,4.719,2535,4.719,2536,4.719,2537,4.719,2538,4.719,2539,4.719,2540,4.719,2541,5.615,2542,5.615,2543,4.719,2544,4.719,2545,4.719,2546,4.719,2547,4.719,2548,4.719,2549,4.719,2550,4.719,2551,4.719,2552,4.719,2553,4.719,2554,5.615,2555,4.719,2556,4.719]],["title/modules.html",[2557,3.686]],["body/modules.html",[39,0.027,389,0.024,390,0.027,391,0.024,2557,4.431]],["title/overview.html",[2558,3.686]],["body/overview.html",[2,0.403,39,0.027,354,4.41,389,0.024,390,0.027,391,0.024,432,2.179,638,3.848,2558,4.41]],["title/miscellaneous/variables.html",[2559,2.255,2560,3.248]],["body/miscellaneous/variables.html",[17,0.271,39,0.03,41,0.315,45,0.501,46,0.926,51,1.762,82,0.926,83,1.191,121,0.823,130,1.191,134,2.439,212,2.439,389,0.023,390,0.026,391,0.023,415,3.408,512,2.241,640,2.606,642,2.065,1032,3.71,1096,2.93,1097,2.93,1222,4.179,1418,4.179,1803,3.646,1807,4.179,2228,4.179,2496,4.179,2497,4.179,2559,4.179,2560,4.179,2561,4.988,2562,4.988,2563,6.134,2564,4.988,2565,5.8,2566,4.988,2567,4.988,2568,4.988]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["0.0002",{"_index":856,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1535,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["0.1",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.120.0",{"_index":2533,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1502,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":858,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2528,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["05",{"_index":2479,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2437,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":2446,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":2442,"title":{},"body":{"changelog.html":{}}}],["0x000fff",{"_index":2298,"title":{},"body":{"interfaces/Window.html":{}}}],["0x2fd691",{"_index":997,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x41a6f4",{"_index":948,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x8c8c8c",{"_index":2552,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["1.0.1",{"_index":2482,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":2478,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2434,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":2498,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1182,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["11",{"_index":2436,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":2511,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1480,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["1100.0",{"_index":1530,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["1261358",{"_index":2473,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":2515,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":2493,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2527,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":2510,"title":{},"body":{"coverage.html":{}}}],["17909eb",{"_index":2469,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":2520,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":2508,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":2468,"title":{},"body":{"changelog.html":{}}}],["1].oncomplete",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"overview.html":{}}}],["2/2",{"_index":2492,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2213,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":2523,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1183,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2020",{"_index":2435,"title":{},"body":{"changelog.html":{}}}],["22/22",{"_index":2509,"title":{},"body":{"coverage.html":{}}}],["23/23",{"_index":2507,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["29/08/2020",{"_index":2171,"title":{},"body":{"classes/VRManager.html":{}}}],["29/29",{"_index":2504,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["3.3333",{"_index":2009,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2530,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2500,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["30/30",{"_index":2506,"title":{},"body":{"coverage.html":{}}}],["300).start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["32",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{},"overview.html":{}}}],["32/32",{"_index":2519,"title":{},"body":{"coverage.html":{}}}],["3200.0",{"_index":1533,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33/33",{"_index":2514,"title":{},"body":{"coverage.html":{}}}],["3918159",{"_index":2450,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":2481,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":667,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["4",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["4/4",{"_index":2499,"title":{},"body":{"coverage.html":{}}}],["4000.0",{"_index":1544,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["49/49",{"_index":2491,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{}}}],["5/5",{"_index":2501,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1209,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["500",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2522,"title":{},"body":{"coverage.html":{}}}],["52/52",{"_index":2517,"title":{},"body":{"coverage.html":{}}}],["5283e9a",{"_index":2452,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":2490,"title":{},"body":{"coverage.html":{}}}],["612205c",{"_index":2474,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7/7",{"_index":2495,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":2443,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":2477,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["9/9",{"_index":2494,"title":{},"body":{"coverage.html":{}}}],["9e3dc20",{"_index":2476,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":2458,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":2465,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2372,"title":{},"body":{"interfaces/Window.html":{}}}],["access",{"_index":2357,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1862,"title":{},"body":{"classes/SelectionManager.html":{}}}],["actual",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":1007,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["add(data",{"_index":1016,"title":{},"body":{"classes/InfoLogger.html":{}}}],["addchild",{"_index":1330,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1351,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1039,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":1077,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1331,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":2047,"title":{},"body":{"classes/StateManager.html":{}}}],["addconfig(type",{"_index":1353,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1200,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["adding",{"_index":660,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addjetssizeoption",{"_index":1194,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addobjecttype",{"_index":1041,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":1089,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":584,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addrenderer",{"_index":1701,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1722,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":1081,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["again",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["alleventdata",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":2253,"title":{},"body":{"interfaces/Window.html":{}}}],["allowcustomvalue",{"_index":1190,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":563,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":714,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2369,"title":{},"body":{"interfaces/Window.html":{}}}],["allscripts",{"_index":1826,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["alongaxisposition",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":1785,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1856,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":1654,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":1922,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":2555,"title":{},"body":{"index.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationclipplane",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":2470,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1784,"title":{},"body":{"classes/RendererManager.html":{}}}],["any).geometry",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2180,"title":{},"body":{"classes/VRManager.html":{}}}],["any)?.xr?.requestsession(vrmanager.session_type",{"_index":2187,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":1094,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["anypresetview",{"_index":484,"title":{},"body":{"classes/Configuration.html":{}}}],["api",{"_index":2536,"title":{},"body":{"index.html":{}}}],["app",{"_index":2439,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1820,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":2540,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":2056,"title":{},"body":{"classes/StateManager.html":{}}}],["applied",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["apply",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["around",{"_index":2164,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from(eventobject.geometry.attributes['position'].array",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1513,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arrays",{"_index":1968,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2241,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1583,"title":{},"body":{"classes/PresetView.html":{}}}],["associated",{"_index":689,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":1825,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["atlas",{"_index":1665,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["attribute",{"_index":551,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":1964,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":931,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1965,"title":{},"body":{"classes/SelectionManager.html":{}}}],["automatic",{"_index":1178,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["available",{"_index":1063,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/RendererManager.html":{}}}],["available/created",{"_index":1721,"title":{},"body":{"classes/RendererManager.html":{}}}],["await",{"_index":1836,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1923,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1762,"title":{},"body":{"classes/RendererManager.html":{}}}],["b46c49f",{"_index":2461,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":822,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":817,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":816,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["being",{"_index":934,"title":{},"body":{"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["big",{"_index":2453,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":724,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["blob([json.stringify(state",{"_index":2055,"title":{},"body":{"classes/StateManager.html":{}}}],["blob([text",{"_index":778,"title":{},"body":{"classes/ExportManager.html":{}}}],["bloom",{"_index":581,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":491,"title":{},"body":{"classes/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["both",{"_index":919,"title":{},"body":{"classes/ImportManager.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2184,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":880,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1467,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(30",{"_index":1536,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":470,"title":{},"body":{"classes/CMSObjects.html":{}}}],["break",{"_index":1310,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["browsers",{"_index":1764,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["bufferattribute(pointpos",{"_index":1521,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bug",{"_index":2438,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":2463,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1973,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["buildeventdata",{"_index":644,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":649,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2275,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2274,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2484,"title":{},"body":{"changelog.html":{}}}],["buttons",{"_index":2043,"title":{},"body":{"classes/StateManager.html":{}}}],["c7a35db",{"_index":2454,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1679,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":881,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(eventdata",{"_index":982,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2273,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":986,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":951,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(uuid",{"_index":1880,"title":{},"body":{"classes/SelectionManager.html":{}}}],["callbacks",{"_index":1877,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":912,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":2354,"title":{},"body":{"interfaces/Window.html":{}}}],["caloclusters",{"_index":1097,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["camera())?.getworlddirection(direction",{"_index":2220,"title":{},"body":{"classes/VRManager.html":{}}}],["camera().copy(camera",{"_index":2199,"title":{},"body":{"classes/VRManager.html":{}}}],["cameragroup",{"_index":2128,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1573,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2051,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2327,"title":{},"body":{"interfaces/Window.html":{}}}],["cancelanimationframe(this.frameid",{"_index":2247,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1720,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1943,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1941,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('touchstart",{"_index":1945,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1948,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1947,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('touchstart",{"_index":1949,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1781,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":659,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["case",{"_index":1482,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["casting",{"_index":971,"title":{},"body":{"classes/ImportManager.html":{}}}],["catch((error",{"_index":2419,"title":{},"body":{"interfaces/Window.html":{}}}],["catmullromcurve3",{"_index":1461,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cfb1b6a",{"_index":2462,"title":{},"body":{"changelog.html":{}}}],["chaining",{"_index":2451,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":406,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changelog",{"_index":2425,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":1886,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["charge",{"_index":802,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1420,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["checked",{"_index":1726,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":851,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1596,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":964,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["child.castshadow",{"_index":973,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material",{"_index":969,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":1001,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":1000,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":1002,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color",{"_index":975,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.dispose",{"_index":970,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['color",{"_index":996,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['side",{"_index":998,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":965,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.nodelevel",{"_index":1377,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1376,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.receiveshadow",{"_index":974,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1393,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.userdata",{"_index":967,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata.name",{"_index":995,"title":{},"body":{"classes/ImportManager.html":{}}}],["childindex",{"_index":1380,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1251,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["childrenactive",{"_index":1322,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1432,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1437,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1439,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["clearing",{"_index":2278,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2216,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1893,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1977,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2374,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":954,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipintersection",{"_index":961,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["clippingangle",{"_index":2015,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":2016,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingplanes",{"_index":960,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipplanes",{"_index":892,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipshadows",{"_index":962,"title":{},"body":{"classes/ImportManager.html":{}}}],["cloned",{"_index":2157,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":1994,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1267,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clustercoll",{"_index":1259,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1257,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1260,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1262,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1261,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1265,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1534,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1541,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1555,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1111,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":397,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":2503,"title":{},"body":{"coverage.html":{}}}],["cmsobjects",{"_index":392,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["collected",{"_index":1314,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":676,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":772,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":1233,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionname",{"_index":677,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":682,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collectionslist",{"_index":1226,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1254,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1242,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1246,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.children.length",{"_index":1250,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1243,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["color(0x2194ce",{"_index":2564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":2563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":2565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["color(parseint(object[collectionname][0]?.color",{"_index":1235,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color).set(color",{"_index":976,"title":{},"body":{"classes/ImportManager.html":{}}}],["colors",{"_index":2567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colour",{"_index":2360,"title":{},"body":{"interfaces/Window.html":{}}}],["combined",{"_index":1315,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1300,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1309,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["commit",{"_index":2432,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2431,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2333,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completes",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["components",{"_index":2238,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["composer",{"_index":582,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":800,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":1500,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1355,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["config.json",{"_index":2060,"title":{},"body":{"classes/StateManager.html":{}}}],["configactive",{"_index":1323,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":2070,"title":{},"body":{"classes/StateManager.html":{}}}],["configoptions",{"_index":1388,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1324,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1408,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate?.['color",{"_index":1423,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate?.['highvalue",{"_index":1431,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate?.['ischecked",{"_index":1421,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate?.['value",{"_index":1426,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1415,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1413,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1417,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":1176,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":471,"title":{"classes/Configuration.html":{}},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["configuration('wrapper_element_id",{"_index":2546,"title":{},"body":{"index.html":{}}}],["configuration.defaulteventfile?.eventfile",{"_index":2259,"title":{},"body":{"interfaces/Window.html":{}}}],["configuration.defaulteventfile?.eventtype",{"_index":2260,"title":{},"body":{"interfaces/Window.html":{}}}],["configure",{"_index":2167,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2254,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('cannot",{"_index":1384,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2422,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('error",{"_index":1854,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":1248,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["console.log(\"track",{"_index":1473,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('event",{"_index":2120,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":1147,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log(`${typename",{"_index":1229,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["const",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constituents",{"_index":1231,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constructor(camera",{"_index":587,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(clipplanes",{"_index":903,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(elementid",{"_index":489,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["constructor(field",{"_index":558,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(jsroot",{"_index":1045,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["constructor(name",{"_index":1337,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2337,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1727,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":699,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1702,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1724,"title":{},"body":{"classes/RendererManager.html":{}}}],["containspoint(new",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["content",{"_index":2295,"title":{},"body":{"interfaces/Window.html":{}}}],["controller",{"_index":2129,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":663,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["controlsmanager",{"_index":2513,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2430,"title":{},"body":{"changelog.html":{}}}],["copy",{"_index":1616,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["correctly",{"_index":2460,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["coverage",{"_index":2486,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1488,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/StateManager.html":{},"index.html":{}}}],["created",{"_index":2170,"title":{},"body":{"classes/VRManager.html":{}}}],["creating",{"_index":2276,"title":{},"body":{"interfaces/Window.html":{}}}],["ctheta",{"_index":1492,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1538,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1552,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1554,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1546,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1547,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1548,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1553,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1556,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":736,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2130,"title":{},"body":{"classes/VRManager.html":{}}}],["custom",{"_index":991,"title":{},"body":{"classes/ImportManager.html":{}}}],["customize",{"_index":2240,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":547,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"coverage.html":{}}}],["cut('energy",{"_index":1204,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1203,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1201,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('pt",{"_index":1208,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('vertextype",{"_index":1219,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut.field",{"_index":1238,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":1091,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":1237,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cylinderbuffergeometry",{"_index":1464,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cylinderbuffergeometry(width",{"_index":1499,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1669,"title":{},"body":{"classes/RKHelper.html":{}}}],["d3.min.js",{"_index":1831,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["dat.gui",{"_index":498,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":2549,"title":{},"body":{"index.html":{}}}],["data.length",{"_index":2122,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":935,"title":{},"body":{"classes/ImportManager.html":{}}}],["declare",{"_index":1824,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":477,"title":{},"body":{"classes/Configuration.html":{}}}],["defaulteventpath",{"_index":2392,"title":{},"body":{"interfaces/Window.html":{}}}],["defaulteventtype",{"_index":2394,"title":{},"body":{"interfaces/Window.html":{}}}],["defaultmaxvalue",{"_index":552,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":553,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":583,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1821,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":478,"title":{},"body":{"classes/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":789,"title":{},"body":{"classes/Field.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2356,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1677,"title":{},"body":{"classes/RKHelper.html":{}}}],["definitions",{"_index":1682,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1385,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{}}}],["dependencies",{"_index":2526,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":2480,"title":{},"body":{"changelog.html":{}}}],["descendants",{"_index":1366,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1577,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":680,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["dflt_colors",{"_index":2320,"title":{},"body":{"interfaces/Window.html":{}}}],["different",{"_index":642,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":882,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":871,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["directionallight",{"_index":1921,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disable",{"_index":1899,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":1730,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1869,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":521,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["display.ts",{"_index":2224,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":686,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":2543,"title":{},"body":{"index.html":{}}}],["disposing",{"_index":999,"title":{},"body":{"classes/ImportManager.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividing",{"_index":1288,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1842,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.body",{"_index":1780,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":782,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":780,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["document.createelement('input",{"_index":2065,"title":{},"body":{"classes/StateManager.html":{}}}],["document.createelement('script",{"_index":1846,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('three",{"_index":1940,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1779,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1819,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2487,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2428,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1599,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["don't",{"_index":1617,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":413,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["doublesided",{"_index":914,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":739,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":728,"title":{},"body":{"classes/ExportManager.html":{}}}],["dparams",{"_index":1631,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1670,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1672,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1673,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1674,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1675,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":666,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":2537,"title":{},"body":{"index.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":1805,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":2069,"title":{},"body":{"classes/StateManager.html":{}}}],["e.g",{"_index":1058,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["e.target?.files[0",{"_index":2071,"title":{},"body":{"classes/StateManager.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1570,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":410,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["effect",{"_index":597,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":595,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":619,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":577,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["effectsmanager",{"_index":575,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["element",{"_index":495,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{}}}],["elementid",{"_index":479,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["elements",{"_index":605,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":497,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1729,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":480,"title":{},"body":{"classes/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2355,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2386,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2353,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1870,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2376,"title":{},"body":{"interfaces/Window.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2264,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2137,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1600,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["entries",{"_index":1012,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1019,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":852,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["error_estimate",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":853,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1601,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":1597,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["etc",{"_index":1114,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.clientx",{"_index":1984,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1987,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1979,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_id",{"_index":893,"title":{},"body":{"classes/ImportManager.html":{}}}],["event_data_type_colors",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors['caloclusters",{"_index":1537,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['hits",{"_index":1522,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['jets",{"_index":1501,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['muonchambers",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors['vertices",{"_index":1558,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors[typename",{"_index":1236,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1199,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":768,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.electrons",{"_index":1216,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.hits",{"_index":1195,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1207,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.photons",{"_index":1213,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdata.vertices",{"_index":1218,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":763,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":770,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":773,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1296,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1307,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":481,"title":{"interfaces/EventDataLoader.html":{}},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["eventdataprop",{"_index":1302,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1306,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1299,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1293,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1305,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":539,"title":{},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":2547,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":2551,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":2550,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":537,"title":{},"body":{"classes/Configuration.html":{}}}],["eventkey",{"_index":2282,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2266,"title":{},"body":{"interfaces/Window.html":{}}}],["eventnum",{"_index":2109,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":1148,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.dividescalar(previousscale",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals(new",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":696,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":698,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":538,"title":{},"body":{"classes/Configuration.html":{}}}],["example",{"_index":1291,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["examples",{"_index":2553,"title":{},"body":{"index.html":{}}}],["existing",{"_index":1686,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":690,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["export",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":718,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":746,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":757,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":747,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":702,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2310,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":704,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":711,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":712,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":705,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":720,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2299,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1119,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":1092,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extends",{"_index":1030,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1806,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2414,"title":{},"body":{"interfaces/Window.html":{}}}],["extracted",{"_index":1062,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["extrapolate",{"_index":1652,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1475,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1648,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1650,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1484,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration.model",{"_index":2225,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1169,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["f87c587",{"_index":2448,"title":{},"body":{"changelog.html":{}}}],["face3",{"_index":409,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2217,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2328,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":2440,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2393,"title":{},"body":{"interfaces/Window.html":{}}}],["false",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["features",{"_index":2466,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2410,"title":{},"body":{"interfaces/Window.html":{}}}],["fetch('path/to/event",{"_index":2548,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2411,"title":{},"body":{"interfaces/Window.html":{}}}],["fetch(urlparams.get('config",{"_index":2405,"title":{},"body":{"interfaces/Window.html":{}}}],["few",{"_index":1474,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":2345,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":859,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":860,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":554,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":835,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":842,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":823,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["file.readobject(objectname",{"_index":1126,"title":{},"body":{"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["fileeventdata",{"_index":1031,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["filename",{"_index":725,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["filereader",{"_index":2073,"title":{},"body":{"classes/StateManager.html":{}}}],["files",{"_index":1074,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["filter",{"_index":560,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["filter(hitposition",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["filter(val",{"_index":1971,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":561,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":550,"title":{},"body":{"classes/Cut.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":2423,"title":{},"body":{"interfaces/Window.html":{}}}],["find",{"_index":2421,"title":{},"body":{"interfaces/Window.html":{}}}],["find(symbol",{"_index":1614,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["finding",{"_index":1909,"title":{},"body":{"classes/SelectionManager.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"index.html":{}}}],["fix",{"_index":2444,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1717,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1697,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2378,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2379,"title":{},"body":{"interfaces/Window.html":{}}}],["flatten",{"_index":937,"title":{},"body":{"classes/ImportManager.html":{}}}],["float32array([].concat(...reachedhits",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1516,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2183,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2036,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":1101,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["form",{"_index":1076,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["format",{"_index":713,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["formatted",{"_index":2459,"title":{},"body":{"changelog.html":{}}}],["frame",{"_index":2229,"title":{},"body":{"interfaces/Window.html":{}}}],["frameid",{"_index":2230,"title":{},"body":{"interfaces/Window.html":{}}}],["front",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{}}}],["frontside",{"_index":940,"title":{},"body":{"classes/ImportManager.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":665,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":754,"title":{},"body":{"classes/ExportManager.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["geom",{"_index":2342,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":671,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":774,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2373,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":894,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":765,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":776,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.name",{"_index":990,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.scale.set(scale",{"_index":993,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.setattribute('position",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.traverse((child",{"_index":994,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":2368,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(field",{"_index":790,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1871,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcameragroup",{"_index":2138,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2155,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1442,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1447,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":645,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":674,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":646,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":1034,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":2105,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventdata(objects",{"_index":1055,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["geteventdataloader",{"_index":485,"title":{},"body":{"classes/Configuration.html":{}}}],["geteventmetadata",{"_index":647,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":648,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":693,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethit",{"_index":1035,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gethit(hit",{"_index":1064,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gethits",{"_index":1443,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1449,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1575,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2288,"title":{},"body":{"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1008,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2018,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1444,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1452,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlocalclipping",{"_index":1703,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1704,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":1042,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":1108,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":401,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":402,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1332,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":1078,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1245,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":1043,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1112,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1705,"title":{},"body":{"classes/RendererManager.html":{}}}],["getphoenixmenuroot",{"_index":486,"title":{},"body":{"classes/Configuration.html":{}}}],["getprettyparams",{"_index":1591,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1604,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1592,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1608,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1706,"title":{},"body":{"classes/RendererManager.html":{}}}],["gettevetrack",{"_index":1036,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettevetrack(track",{"_index":1066,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettgeotrack",{"_index":1037,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettgeotrack(track",{"_index":1069,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["getthreemanager",{"_index":2286,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2424,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gettrack",{"_index":1445,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1455,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1649,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1655,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2287,"title":{},"body":{"interfaces/Window.html":{}}}],["getvertex",{"_index":1446,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1457,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2139,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":407,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["giving",{"_index":1907,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2228,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1680,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1690,"title":{},"body":{"classes/RKHelper.html":{}}}],["gltf",{"_index":755,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":984,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":980,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":981,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":743,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":943,"title":{},"body":{"classes/ImportManager.html":{}}}],["go",{"_index":1620,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":661,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":650,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2329,"title":{},"body":{"interfaces/Window.html":{}}}],["group",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1290,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guidelines",{"_index":2433,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":828,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":843,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":814,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":815,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":836,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2185,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1684,"title":{},"body":{"classes/RKHelper.html":{}}}],["handles",{"_index":1086,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["hash",{"_index":2456,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":1470,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["helper.ts",{"_index":1647,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":1656,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:33",{"_index":1651,"title":{},"body":{"classes/RKHelper.html":{}}}],["helpers/constants",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/pretty",{"_index":1925,"title":{},"body":{"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1469,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hide",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["highlight",{"_index":1906,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":603,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1872,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1903,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2534,"title":{},"body":{"index.html":{}}}],["highvalue",{"_index":1430,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1518,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1519,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1520,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":2124,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":2095,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["hits.split('\\n",{"_index":2119,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits;1",{"_index":1060,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["hitsparams",{"_index":1451,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1514,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1527,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1511,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hovered",{"_index":604,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1889,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2365,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1747,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1816,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["icon",{"_index":1325,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["id",{"_index":493,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["identifier",{"_index":2488,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1085,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["identifying",{"_index":1061,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["ignored",{"_index":1888,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1863,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2153,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":641,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1157,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["implicitly",{"_index":2475,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["importmanager",{"_index":890,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["inbounds",{"_index":877,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["including",{"_index":735,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":2538,"title":{},"body":{"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["infinity",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":654,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1005,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1014,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":1049,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1873,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["init(camera",{"_index":1910,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2242,"title":{},"body":{"interfaces/Window.html":{}}}],["initeventfromurl(defaulteventpath",{"_index":2395,"title":{},"body":{"interfaces/Window.html":{}}}],["initial",{"_index":1753,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":602,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["initialized",{"_index":1890,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2237,"title":{},"body":{"interfaces/Window.html":{}}}],["initially",{"_index":2290,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2289,"title":{},"body":{"interfaces/Window.html":{}}}],["initvr(onsessionended",{"_index":2261,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":753,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["inputfile",{"_index":2064,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.accept",{"_index":2067,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.click",{"_index":2081,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.onchange",{"_index":2068,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.remove",{"_index":2079,"title":{},"body":{"classes/StateManager.html":{}}}],["inputfile.type",{"_index":2066,"title":{},"body":{"classes/StateManager.html":{}}}],["inside",{"_index":592,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2541,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2017,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["instantiate",{"_index":745,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["instead",{"_index":1387,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":2102,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["integrator",{"_index":813,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":637,"title":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":638,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1915,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1951,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1956,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1970,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1874,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1912,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1914,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1992,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1995,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2205,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2206,"title":{},"body":{"classes/VRManager.html":{}}}],["invisible",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["isfixedoverlay",{"_index":1707,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1864,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1483,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2140,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":1626,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1321,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["items",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{}}}],["iterating",{"_index":1298,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1365,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1155,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["jet",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1454,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1509,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1096,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["jetsscale",{"_index":1181,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexml",{"_index":2391,"title":{},"body":{"interfaces/Window.html":{}}}],["jivexmlloader",{"_index":2226,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["joining",{"_index":1312,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2532,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":916,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["json.parse(e.target.result.tostring",{"_index":2076,"title":{},"body":{"classes/StateManager.html":{}}}],["json.parse(input",{"_index":2305,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1404,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(geometry",{"_index":978,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":760,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsondata",{"_index":2075,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2085,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2087,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2082,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1403,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1433,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1405,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1409,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1406,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":758,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1032,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.newhttprequest(url",{"_index":2318,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url",{"_index":2325,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot3dpainter.js",{"_index":1833,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootcore.js",{"_index":1827,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":1028,"title":{"classes/JSRootEventLoader.html":{}},"body":{"classes/JSRootEventLoader.html":{},"coverage.html":{}}}],["jsrootgeobase.js",{"_index":1834,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootgeopainter.js",{"_index":1835,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootpainter.js",{"_index":1832,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2529,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":825,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":818,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":819,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":820,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":847,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1550,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":678,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2256,"title":{},"body":{"interfaces/Window.html":{}}}],["keys",{"_index":697,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":795,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":788,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:13",{"_index":1801,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:132",{"_index":2006,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:134",{"_index":2002,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:136",{"_index":2004,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:138",{"_index":2007,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:140",{"_index":2010,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:142",{"_index":2008,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:144",{"_index":2003,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:146",{"_index":2005,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:156",{"_index":791,"title":{},"body":{"classes/Field.html":{}}}],["kutta.ts:93",{"_index":1800,"title":{},"body":{"classes/RungeKutta.html":{}}}],["label",{"_index":1017,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["later",{"_index":715,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["left",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{}}}],["length",{"_index":876,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1346,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":1140,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1138,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":662,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["line",{"_index":411,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["linebasicmaterial",{"_index":412,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":414,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["linesegments(boxedges",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{}}}],["link.click",{"_index":786,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":785,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":783,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":781,"title":{},"body":{"classes/ExportManager.html":{}}}],["linkedclusters",{"_index":1256,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["linkedtracks",{"_index":1270,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["list",{"_index":684,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2348,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2350,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":500,"title":{},"body":{"classes/Configuration.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{}}}],["load",{"_index":501,"title":{},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loadconfig",{"_index":2403,"title":{},"body":{"interfaces/Window.html":{}}}],["loaded",{"_index":719,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":475,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader.geteventdata",{"_index":2416,"title":{},"body":{"interfaces/Window.html":{}}}],["loader.load(json",{"_index":988,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.load(sceneurl",{"_index":983,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(json",{"_index":989,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":979,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.process(res",{"_index":2415,"title":{},"body":{"interfaces/Window.html":{}}}],["loader.ts",{"_index":640,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":2103,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:109",{"_index":1070,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:11",{"_index":1047,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:113",{"_index":1168,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":2101,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:13",{"_index":1046,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{}}}],["loader.ts:132",{"_index":1067,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:16",{"_index":1159,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:163",{"_index":1065,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:18",{"_index":655,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:20",{"_index":1158,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:211",{"_index":1161,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":1145,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:247",{"_index":1160,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:25",{"_index":694,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:269",{"_index":1167,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":2111,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:286",{"_index":1166,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":681,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:327",{"_index":1164,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:35",{"_index":1817,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:38",{"_index":675,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:40",{"_index":1057,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:44",{"_index":687,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:55",{"_index":1165,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:62",{"_index":1142,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:65",{"_index":2115,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:66",{"_index":1073,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:71",{"_index":1163,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:8",{"_index":1141,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":2106,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:9",{"_index":1048,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:92",{"_index":1162,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loaders",{"_index":643,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/jivexml",{"_index":2227,"title":{},"body":{"interfaces/Window.html":{}}}],["loaders/phoenix",{"_index":532,"title":{},"body":{"classes/Configuration.html":{}}}],["loadevent(eventkey",{"_index":2283,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":895,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":907,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadgltfgeometry(url",{"_index":2314,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":512,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["loadjsongeometry",{"_index":896,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsongeometry(json",{"_index":913,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":1808,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(onscriptsloaded",{"_index":1810,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":1044,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1115,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":897,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":921,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadobjgeometry(filename",{"_index":2291,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry(jsroot",{"_index":2323,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry(jsroot",{"_index":2317,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":909,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2338,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1809,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1813,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromfile",{"_index":2019,"title":{},"body":{"classes/StateManager.html":{}}}],["loadstatefromfile(onfileread",{"_index":2026,"title":{},"body":{"classes/StateManager.html":{}}}],["loadstatefromjson",{"_index":1333,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1357,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["locationhref",{"_index":2396,"title":{},"body":{"interfaces/Window.html":{}}}],["log",{"_index":1020,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":672,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1004,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":1018,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:27",{"_index":1021,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:7",{"_index":1009,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:9",{"_index":1011,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":673,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["logs",{"_index":1010,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1627,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2382,"title":{},"body":{"interfaces/Window.html":{}}}],["lookatobject(uuid",{"_index":2383,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2248,"title":{},"body":{"interfaces/Window.html":{}}}],["ls",{"_index":1292,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["lumiblock",{"_index":1294,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1367,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["main",{"_index":593,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1698,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":2471,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["making",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:10",{"_index":1718,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:104",{"_index":1919,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:106",{"_index":1731,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:107",{"_index":2158,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:108",{"_index":726,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:11",{"_index":905,"title":{},"body":{"classes/ImportManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:114",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:117",{"_index":1901,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":2030,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:12",{"_index":596,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:122",{"_index":1732,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:129",{"_index":1898,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:13",{"_index":906,"title":{},"body":{"classes/ImportManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:133",{"_index":1723,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:139",{"_index":925,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:14",{"_index":594,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:141",{"_index":2162,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:143",{"_index":1736,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:144",{"_index":2038,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:15",{"_index":904,"title":{},"body":{"classes/ImportManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:152",{"_index":2035,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:154",{"_index":1891,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:155",{"_index":1758,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:156",{"_index":908,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:16",{"_index":600,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:160",{"_index":2033,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:167",{"_index":1725,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:168",{"_index":2040,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:17",{"_index":2147,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:173",{"_index":915,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:18",{"_index":589,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:180",{"_index":1743,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":2149,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:190",{"_index":1728,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:196",{"_index":930,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:20",{"_index":721,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":1734,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:201",{"_index":1913,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:208",{"_index":1741,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":2144,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:22",{"_index":1896,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:224",{"_index":1905,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":2154,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":1897,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:25",{"_index":2145,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:26",{"_index":1883,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:265",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:31",{"_index":1739,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:32",{"_index":2166,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:33",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{}}}],["manager.ts:335",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:37",{"_index":922,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:38",{"_index":2025,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:385",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":611,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:424",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:434",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:44",{"_index":1895,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:444",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:46",{"_index":1887,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:49",{"_index":1752,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:51",{"_index":2151,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:52",{"_index":601,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:54",{"_index":734,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:55",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:60",{"_index":928,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:61",{"_index":2150,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:65",{"_index":730,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:68",{"_index":2031,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:69",{"_index":608,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:71",{"_index":1911,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:75",{"_index":1745,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:79",{"_index":2159,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:8",{"_index":710,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":933,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:83",{"_index":1748,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:84",{"_index":732,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1917,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:9",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:91",{"_index":2027,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:96",{"_index":1902,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:98",{"_index":1755,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":738,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["managers/state",{"_index":536,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{}}}],["manages",{"_index":590,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":670,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1419,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":2121,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["matching",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1503,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material2",{"_index":957,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.abs(1",{"_index":1637,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(returnvec.x",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":849,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1540,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1543,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1489,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1493,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.max(math.min(pos.z",{"_index":1549,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["math.pow(fh",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1676,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1640,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(clusterparams.phi",{"_index":1545,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1487,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1491,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(pos.x",{"_index":1477,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":873,"title":{},"body":{"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":1006,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":564,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1529,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":1998,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":555,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1532,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":499,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["menu/phoenix",{"_index":534,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menus",{"_index":669,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(boxbuffer",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh(geometry",{"_index":1504,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1508,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1505,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1506,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1507,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1510,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":938,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1462,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meta",{"_index":1289,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":688,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1316,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["mev",{"_index":1668,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1189,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["minimum",{"_index":562,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":556,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2559,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1667,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":2063,"title":{},"body":{"classes/StateManager.html":{}}}],["mode",{"_index":2464,"title":{},"body":{"changelog.html":{}}}],["modular",{"_index":2535,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2557,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1602,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["momentum",{"_index":804,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":1099,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mouse",{"_index":1892,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1983,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1986,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":2141,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2160,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2146,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":872,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":695,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":405,"title":{},"body":{"classes/CMSObjects.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":408,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":2566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":1110,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1258,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1272,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1285,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1212,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1255,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1269,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1282,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1287,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1286,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["n",{"_index":1137,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["name('jets",{"_index":1184,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["names",{"_index":1105,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["naming",{"_index":1098,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navigator",{"_index":2179,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1598,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["need",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["needed",{"_index":1628,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["needs",{"_index":1531,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":516,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["node.ts",{"_index":1320,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1347,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:104",{"_index":1354,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1363,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1349,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:127",{"_index":1356,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1340,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:148",{"_index":1358,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1342,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1345,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1348,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1341,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1338,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:6",{"_index":1344,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:62",{"_index":1352,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:75",{"_index":1361,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1343,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:84",{"_index":1359,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:95",{"_index":1368,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1434,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1440,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1436,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1438,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1410,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1414,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.onchange",{"_index":1429,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.onchange?.(configstate?.['color",{"_index":1424,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.onchange?.(configstate?.['ischecked",{"_index":1422,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.onchange?.(configstate?.['value",{"_index":1427,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1412,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1416,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2207,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1326,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1364,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":502,"title":{},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["normalblending",{"_index":614,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2426,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2169,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nowdisplayingevent",{"_index":2233,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":2542,"title":{},"body":{"index.html":{}}}],["null",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":1969,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":722,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["obj._typename",{"_index":1133,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["obj.arr",{"_index":1136,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["obj.eventobject",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":749,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1389,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1317,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1311,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":1967,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1253,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(paramscopy",{"_index":1622,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":1962,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols",{"_index":1613,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2339,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1297,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.fileeventdata[objecttype]).length",{"_index":1129,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["object.keys(trackscollections",{"_index":1660,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":775,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":955,"title":{},"body":{"classes/ImportManager.html":{}}}],["object.uuid",{"_index":1997,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.values(combinedprops).join",{"_index":1318,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":924,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":966,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse((child",{"_index":963,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":968,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":1228,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object[collectionname][0]?.color",{"_index":1234,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection",{"_index":1082,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection.length",{"_index":1230,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection[0",{"_index":1239,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":1079,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1247,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup.name",{"_index":1252,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectloader",{"_index":939,"title":{},"body":{"classes/ImportManager.html":{}}}],["objectname",{"_index":1125,"title":{},"body":{"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["objectparams",{"_index":1244,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.length",{"_index":1128,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["objects.ts",{"_index":394,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:108",{"_index":1453,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:14",{"_index":403,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:156",{"_index":1450,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:16",{"_index":1456,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:200",{"_index":1448,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:235",{"_index":1458,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1170,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectsgroup",{"_index":1904,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.traverse((object",{"_index":1996,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":767,"title":{},"body":{"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":771,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":769,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":741,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":941,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":949,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":952,"title":{},"body":{"classes/ImportManager.html":{}}}],["observable",{"_index":1885,"title":{},"body":{"classes/SelectionManager.html":{}}}],["olddrawrangecount",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1191,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["onclick",{"_index":2045,"title":{},"body":{"classes/StateManager.html":{}}}],["ondisplayedeventchange",{"_index":2232,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1865,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":658,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventdata",{"_index":1056,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["oneventdata(this.fileeventdata",{"_index":1132,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["oneventschange",{"_index":2231,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":2028,"title":{},"body":{"classes/StateManager.html":{}}}],["onfileread?.(jsondata",{"_index":2077,"title":{},"body":{"classes/StateManager.html":{}}}],["onscriptsloaded",{"_index":1812,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onscriptsloaded(jsroot",{"_index":1838,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onsessionended",{"_index":2131,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["ontoggle",{"_index":1327,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1866,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1867,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":1881,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":2132,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2133,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["option",{"_index":2467,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2182,"title":{},"body":{"classes/VRManager.html":{}}}],["options",{"_index":1100,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2172,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":578,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":606,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":630,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":632,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":631,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":756,"title":{},"body":{"classes/ExportManager.html":{}}}],["over",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1716,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1749,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2364,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1699,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":2558,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1618,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":805,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2485,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["panel",{"_index":1015,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["param",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":421,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameter",{"_index":1611,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["parameterss",{"_index":1607,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramkey",{"_index":1621,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":1083,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{}}}],["paramscopy",{"_index":1619,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1645,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1642,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1644,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1635,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1634,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1638,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1632,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1629,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1625,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1624,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1328,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1815,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1855,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":752,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsegltfgeometry",{"_index":898,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(geometry",{"_index":923,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":2312,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":899,"title":{},"body":{"classes/ImportManager.html":{}}}],["parseobjgeometry(content",{"_index":2296,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":927,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":2303,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2268,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":926,"title":{},"body":{"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":398,"title":{},"body":{"classes/CMSObjects.html":{}}}],["part_list",{"_index":1152,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":2096,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":579,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":879,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["passes",{"_index":591,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":634,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":875,"title":{},"body":{"classes/Field.html":{},"classes/ImportManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":1999,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1153,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["perform",{"_index":797,"title":{},"body":{"classes/Field.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["performed",{"_index":799,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":793,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["perspectivecamera",{"_index":2168,"title":{},"body":{"classes/VRManager.html":{}}}],["phi",{"_index":1593,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["phnx",{"_index":2302,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":517,"title":{},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["phoenixloader",{"_index":531,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixloader:113",{"_index":1116,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:16",{"_index":1051,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:18",{"_index":1053,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:20",{"_index":1050,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:211",{"_index":1095,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:247",{"_index":1080,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:269",{"_index":1113,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:286",{"_index":1109,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:31",{"_index":1102,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:327",{"_index":1106,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:55",{"_index":1107,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:71",{"_index":1104,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:92",{"_index":1103,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenu",{"_index":2049,"title":{},"body":{"classes/StateManager.html":{}}}],["phoenixmenunode",{"_index":513,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1375,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":482,"title":{},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixnodejson",{"_index":1394,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1401,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1402,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1398,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1400,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1395,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1396,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1397,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":399,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1206,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1268,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getelectrons",{"_index":1217,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1198,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1193,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getphotons",{"_index":1215,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1281,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getvertex",{"_index":1221,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2304,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2307,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2306,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":395,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pi",{"_index":1202,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["pipe",{"_index":2445,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["plane(vertice",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":874,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":821,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1515,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1517,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1466,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points(geometry",{"_index":1524,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1465,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1523,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1526,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1525,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1528,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1478,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1479,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":833,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":840,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1695,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1476,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length==0",{"_index":1472,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1687,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":2449,"title":{},"body":{"changelog.html":{}}}],["possible",{"_index":1303,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["possibly",{"_index":1177,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1926,"title":{},"body":{"classes/SelectionManager.html":{}}}],["postion",{"_index":1196,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["presenting",{"_index":2539,"title":{},"body":{"index.html":{}}}],["preset",{"_index":473,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":518,"title":{"classes/PresetView.html":{}},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":483,"title":{},"body":{"classes/Configuration.html":{}}}],["pretty",{"_index":1588,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1633,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1641,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1639,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1643,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1636,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":1960,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":1966,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1612,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1585,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams(intersectedobject.userdata",{"_index":1961,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1623,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1615,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["previousscale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["print",{"_index":1630,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1606,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1678,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":404,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":1144,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":917,"title":{},"body":{"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2336,"title":{},"body":{"interfaces/Window.html":{}}}],["processgeometry",{"_index":900,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgeometry(geometry",{"_index":929,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":2098,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":2110,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":511,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["processitemslist",{"_index":1038,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["processitemslist(obj",{"_index":1072,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["processobj",{"_index":901,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":932,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":2099,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":2113,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":2100,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":2114,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["progress",{"_index":2176,"title":{},"body":{"classes/VRManager.html":{}}}],["project",{"_index":2427,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":1823,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promise((resolve",{"_index":1839,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1304,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":866,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1799,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1653,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":476,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1301,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1975,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1974,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1040,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provided",{"_index":992,"title":{},"body":{"classes/ImportManager.html":{}}}],["pt",{"_index":1594,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushing",{"_index":1313,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":803,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":809,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1463,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1498,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queryselectorall('script[src",{"_index":1843,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["radius",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1551,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rangeslider",{"_index":1428,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ratio",{"_index":806,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1920,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1991,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1990,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1989,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":2556,"title":{},"body":{"index.html":{}}}],["read",{"_index":2029,"title":{},"body":{"classes/StateManager.html":{}}}],["reader",{"_index":2072,"title":{},"body":{"classes/StateManager.html":{}}}],["reader.onload",{"_index":2074,"title":{},"body":{"classes/StateManager.html":{}}}],["reader.readastext(configfile",{"_index":2080,"title":{},"body":{"classes/StateManager.html":{}}}],["readonly",{"_index":1590,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["receives",{"_index":1117,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1118,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":1087,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1295,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":716,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["refactoring",{"_index":2472,"title":{},"body":{"changelog.html":{}}}],["reject",{"_index":1840,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["relevant",{"_index":1075,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["remaining",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["removechild",{"_index":1334,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1360,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1708,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1735,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":609,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removepass",{"_index":585,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":607,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":586,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["render(camera",{"_index":610,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render(scene",{"_index":1738,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1750,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1795,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1760,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1757,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":1981,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":1988,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":1985,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1700,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":599,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":2366,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":598,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":623,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":918,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replacing",{"_index":1174,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["represent",{"_index":2239,"title":{},"body":{"interfaces/Window.html":{}}}],["representing",{"_index":664,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":657,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["requestanimationframe(animate",{"_index":2249,"title":{},"body":{"interfaces/Window.html":{}}}],["required",{"_index":2545,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2407,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["res.text",{"_index":2412,"title":{},"body":{"interfaces/Window.html":{}}}],["reset",{"_index":557,"title":{},"body":{"classes/Cut.html":{}}}],["resolve",{"_index":1852,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["responsible",{"_index":510,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restoring",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":679,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":845,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["right",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{},"classes/RKHelper.html":{}}}],["rkhelper",{"_index":1468,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1663,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1481,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":883,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":885,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":888,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":886,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":889,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":884,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":887,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["root",{"_index":515,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["rootfileurl",{"_index":1033,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["rotate.chain(end",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotationpositions",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["routes",{"_index":2457,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":692,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["runge",{"_index":794,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":796,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1150,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["same",{"_index":1088,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["save",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["save(blob",{"_index":723,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":717,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":706,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":729,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":707,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":731,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2267,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":708,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":733,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2020,"title":{},"body":{"classes/StateManager.html":{}}}],["savestring",{"_index":709,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":737,"title":{},"body":{"classes/ExportManager.html":{}}}],["scale",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":2014,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1769,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":762,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":910,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1768,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":750,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":759,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2341,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2343,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["scenestring",{"_index":977,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":911,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":2375,"title":{},"body":{"interfaces/Window.html":{}}}],["script",{"_index":1804,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1845,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1851,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1853,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1850,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1849,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1847,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1841,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1844,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1859,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1858,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1814,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1802,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript('assets/jsroot",{"_index":1837,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1807,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1818,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["second",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1719,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":2429,"title":{},"body":{"changelog.html":{}}}],["selected",{"_index":1884,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1868,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1900,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1284,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["selectionmanager",{"_index":1860,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["send",{"_index":2322,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1022,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["session",{"_index":2148,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["session.addeventlistener('end",{"_index":2191,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2134,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2181,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":1782,"title":{},"body":{"classes/RendererManager.html":{}}}],["setcamera",{"_index":2021,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2032,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":2022,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2034,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2023,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2037,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdataloader",{"_index":487,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdataloader(eventdataloader",{"_index":525,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdisplay",{"_index":2024,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2039,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1709,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1740,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfromsphericalcoordinates",{"_index":1681,"title":{},"body":{"classes/RKHelper.html":{}}}],["setinterval",{"_index":2211,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1710,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1742,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1711,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1744,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":902,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":936,"title":{},"body":{"classes/ImportManager.html":{}}}],["setoverlayrenderer",{"_index":1712,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1746,"title":{},"body":{"classes/RendererManager.html":{}}}],["setphoenixmenuroot",{"_index":488,"title":{},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenunode",{"_index":528,"title":{},"body":{"classes/Configuration.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2041,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderer",{"_index":1713,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderer(elementid",{"_index":1751,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers",{"_index":1714,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1754,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2363,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1875,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1916,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1876,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1918,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2263,"title":{},"body":{"interfaces/Window.html":{}}}],["setupvrcontrols",{"_index":2142,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1574,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2143,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2165,"title":{},"body":{"classes/VRManager.html":{}}}],["shadows",{"_index":972,"title":{},"body":{"classes/ImportManager.html":{}}}],["shininess",{"_index":958,"title":{},"body":{"classes/ImportManager.html":{}}}],["show",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":668,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["shown",{"_index":1013,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":807,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["sides",{"_index":920,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":2544,"title":{},"body":{"index.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["singleton",{"_index":2013,"title":{},"body":{"classes/StateManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["sizemenu",{"_index":1179,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1185,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["slider",{"_index":1425,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["smaller",{"_index":2330,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["space",{"_index":869,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["specific",{"_index":1143,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1572,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":549,"title":{},"body":{"classes/Cut.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1565,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1559,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1561,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1563,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1564,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1567,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.vertices",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(3",{"_index":1557,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1486,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../constants.ts",{"_index":2561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../script",{"_index":2562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":639,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.model.ts",{"_index":472,"title":{},"body":{"classes/Configuration.html":{},"coverage.html":{}}}],["src/extras/configuration.model.ts:12",{"_index":504,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:14",{"_index":519,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:16",{"_index":509,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:18",{"_index":514,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:20",{"_index":508,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:22",{"_index":507,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:24",{"_index":492,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:45",{"_index":522,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:54",{"_index":526,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:62",{"_index":523,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:70",{"_index":529,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:79",{"_index":524,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/cut.model.ts",{"_index":548,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":566,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":568,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":567,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":569,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":570,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":565,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":559,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1568,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/constants.ts",{"_index":2496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1586,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1646,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":787,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/info",{"_index":1003,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":2502,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jivexml",{"_index":2505,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":1029,"title":{},"body":{"classes/JSRootEventLoader.html":{},"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1139,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":393,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1441,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":1156,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/loaders/script",{"_index":1803,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":2093,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2012,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/three/controls",{"_index":2512,"title":{},"body":{"coverage.html":{}}}],["src/three/effects",{"_index":576,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/three/export",{"_index":703,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/three/import",{"_index":891,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/three/index.ts",{"_index":2516,"title":{},"body":{"coverage.html":{}}}],["src/three/renderer",{"_index":1696,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/three/scene",{"_index":2518,"title":{},"body":{"coverage.html":{}}}],["src/three/selection",{"_index":1861,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/three/vr",{"_index":2126,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/ui/index.ts",{"_index":2521,"title":{},"body":{"coverage.html":{}}}],["src/ui/phoenix",{"_index":1319,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["start.chain(startxaxis",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":870,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1691,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2152,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":868,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1688,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1689,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":798,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":832,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add(k1.clone().add(k2.clone().multiplyscalar(2)).add(k3.clone().multiplyscalar(2)).add(k4).multiplyscalar(fh",{"_index":864,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k1.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":837,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k2.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":839,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k3.clone().multiplyscalar(h)).cross(b_last).multiplyscalar(qop",{"_index":844,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":826,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":824,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":865,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":831,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add(k1.clone().add(k2).add(k3).multiplyscalar(fh2",{"_index":863,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(h)).add(k3.clone().multiplyscalar(h2",{"_index":841,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(half_h)).add(k1.clone().multiplyscalar(h2",{"_index":834,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":810,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":857,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":811,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":535,"title":{"classes/StateManager.html":{}},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager().seteventdisplay(this",{"_index":2236,"title":{},"body":{"interfaces/Window.html":{}}}],["statemanager().setphoenixmenuroot(phoenixmenunode",{"_index":546,"title":{},"body":{"classes/Configuration.html":{}}}],["statemanager.instance",{"_index":2042,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2409,"title":{},"body":{"interfaces/Window.html":{}}}],["statements",{"_index":2489,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":400,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2531,"title":{},"body":{"dependencies.html":{}}}],["step",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":801,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2161,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":867,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2000,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1490,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2174,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2215,"title":{},"body":{"classes/VRManager.html":{}}}],["store",{"_index":2112,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":683,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2234,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":490,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":685,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":2107,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["super",{"_index":1120,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["svg",{"_index":1584,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1759,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1761,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1715,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1756,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":520,"title":{},"body":{"classes/Configuration.html":{}}}],["symbol",{"_index":1610,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1589,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1587,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:26",{"_index":1609,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:38",{"_index":1605,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:8",{"_index":1603,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":1811,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["table",{"_index":2525,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2524,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1822,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1512,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["takes",{"_index":656,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["temp",{"_index":1794,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":2057,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.click",{"_index":2061,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.download",{"_index":2059,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.href",{"_index":2058,"title":{},"body":{"classes/StateManager.html":{}}}],["tempanchor.remove",{"_index":2062,"title":{},"body":{"classes/StateManager.html":{}}}],["temporary",{"_index":727,"title":{},"body":{"classes/ExportManager.html":{}}}],["tesla",{"_index":792,"title":{},"body":{"classes/Field.html":{}}}],["tests",{"_index":2447,"title":{},"body":{"changelog.html":{}}}],["tevetrack",{"_index":1068,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["text",{"_index":740,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["text/javascript",{"_index":1848,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":779,"title":{},"body":{"classes/ExportManager.html":{}}}],["tgeotrack",{"_index":1071,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["then((res",{"_index":2413,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["then(jsonstate",{"_index":2408,"title":{},"body":{"interfaces/Window.html":{}}}],["then(res",{"_index":2406,"title":{},"body":{"interfaces/Window.html":{}}}],["then(this.onvrsessionstarted",{"_index":2188,"title":{},"body":{"classes/VRManager.html":{}}}],["theta",{"_index":1539,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["third",{"_index":838,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2090,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.activecamera.position.fromarray(jsondata['eventdisplay']?.['cameraposition",{"_index":2086,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2052,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":1937,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":1959,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":1232,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":1205,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1197,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":1192,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1210,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.photons",{"_index":1214,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.vertices",{"_index":1220,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1787,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1772,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateeventwithclipping",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2285,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildeventdatafromjson(eventdata",{"_index":2417,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks",{"_index":1879,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.callbacks.push(callback",{"_index":1882,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camera",{"_index":620,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2197,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2203,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2221,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2202,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1582,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1372,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter(nodechild",{"_index":1435,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1381,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1379,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1382,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1399,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2054,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2053,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clipplanes",{"_index":945,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.collideparticles(1500",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":618,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":633,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":624,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":635,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":636,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":627,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1373,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.filter(nodeconfig",{"_index":1411,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1390,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2243,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().buildeventdata(eventdata",{"_index":2280,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollection(collectionname",{"_index":2346,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollections",{"_index":2347,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventmetadata",{"_index":2352,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventslist(eventsdata",{"_index":2270,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1790,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller",{"_index":2208,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectend",{"_index":2214,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectstart",{"_index":2210,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2218,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2194,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2196,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2195,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1146,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1149,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1154,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1151,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":572,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":571,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":622,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":625,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":626,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":1939,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1933,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1935,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":1982,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.elementid",{"_index":540,"title":{},"body":{"classes/Configuration.html":{}}}],["this.enabledatguimenu",{"_index":543,"title":{},"body":{"classes/Configuration.html":{}}}],["this.enableeventdisplayconsole",{"_index":2255,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2257,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1938,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":946,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":1173,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1263,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1264,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":1266,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1277,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1278,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1280,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1308,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdataloader",{"_index":542,"title":{},"body":{"classes/Configuration.html":{}}}],["this.eventdisplay",{"_index":2091,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.getuimanager().rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2089,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2088,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventsdata",{"_index":2269,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2284,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fileeventdata",{"_index":1123,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.fileeventdata[objecttype",{"_index":1130,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.fixedoverlay",{"_index":1798,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.frameid",{"_index":2246,"title":{},"body":{"interfaces/Window.html":{}}}],["this.geometries_id",{"_index":947,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getinfologger().add('could",{"_index":2420,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getmainrenderer().domelement.classname",{"_index":1777,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().domelement.id",{"_index":1778,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setpixelratio(window.devicepixelratio",{"_index":1776,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setsize",{"_index":1774,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1211,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1227,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1766,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1767,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1771,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1171,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1225,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2390,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2389,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2279,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2388,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2377,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2265,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2311,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2300,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2380,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2381,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1186,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2385,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2244,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2262,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":2315,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":2316,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":2292,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2384,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":2309,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":2313,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2297,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.render",{"_index":2252,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2367,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2370,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.updatecontrols",{"_index":2250,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2335,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":2116,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.icon",{"_index":1370,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1953,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1932,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2301,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1976,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2294,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1027,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1023,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1025,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1026,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.initeventfromurl",{"_index":2258,"title":{},"body":{"interfaces/Window.html":{}}}],["this.intersectobject(event",{"_index":1952,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1770,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.jsroot",{"_index":1121,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.jsroot.openfile(this.rootfileurl",{"_index":1124,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2271,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2359,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(json",{"_index":2362,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(jsroot.geo.build(obj",{"_index":2319,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2361,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2308,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromfile",{"_index":2048,"title":{},"body":{"classes/StateManager.html":{}}}],["this.loadstatefromjson(jsondata",{"_index":2078,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1783,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1024,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":574,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":573,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2212,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1369,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1378,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2281,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2349,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1944,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":2272,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2351,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onsessionended",{"_index":2178,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1371,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1407,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1391,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":1946,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":1942,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":1980,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2192,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1934,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1950,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1954,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1788,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1374,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1383,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parsephoenixevents(res",{"_index":2418,"title":{},"body":{"interfaces/Window.html":{}}}],["this.particledata",{"_index":2117,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":545,"title":{},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{}}}],["this.phoenixmenuroot.addconfig('button",{"_index":2044,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2084,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2050,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2083,"title":{},"body":{"classes/StateManager.html":{}}}],["this.presetviews",{"_index":541,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews.length",{"_index":544,"title":{},"body":{"classes/Configuration.html":{}}}],["this.processgeometry(geometry",{"_index":985,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processitemslist(object",{"_index":1127,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.processobj",{"_index":953,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":950,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.renderer",{"_index":2177,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcamera(new",{"_index":2219,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2209,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2193,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1789,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1792,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1796,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1791,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1793,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1797,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.rootfileurl",{"_index":1122,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.save(new",{"_index":777,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":764,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":766,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":751,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2046,"title":{},"body":{"classes/StateManager.html":{}}}],["this.savestring(output",{"_index":761,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":748,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":621,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1936,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1958,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1963,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1957,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1955,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1773,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":956,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setrenderer(elementid",{"_index":1765,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2189,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1392,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.truthdata",{"_index":2118,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1172,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1240,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1241,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatafolder",{"_index":2277,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2340,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1223,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1224,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2344,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2293,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2387,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.showui(configuration",{"_index":2245,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2251,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uuid",{"_index":1878,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.vractive",{"_index":2190,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2198,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2200,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2222,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1683,"title":{},"body":{"classes/RKHelper.html":{}}}],["three",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1737,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":1829,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.min.js",{"_index":1828,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":744,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":742,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":944,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":942,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":612,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":616,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1924,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":617,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":615,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/index",{"_index":700,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["threecsg.js",{"_index":1830,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["threejs",{"_index":1249,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":651,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threeservice",{"_index":1052,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["time",{"_index":691,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["tlist",{"_index":1135,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["tobjarray",{"_index":1134,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["todo",{"_index":1175,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":1350,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggles",{"_index":2371,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1335,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1362,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1329,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1339,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["tojson",{"_index":2321,"title":{},"body":{"interfaces/Window.html":{}}}],["top",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["touch",{"_index":1894,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":1978,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2163,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.children[0",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1664,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1662,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcoll",{"_index":1273,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["trackid",{"_index":1271,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1274,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1276,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1275,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2186,"title":{},"body":{"classes/VRManager.html":{}}}],["trackml",{"_index":2094,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["trackmlloader",{"_index":2092,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1279,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1471,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["tracks;1",{"_index":1059,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["trackscollection",{"_index":1659,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1658,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1661,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1657,"title":{},"body":{"classes/RKHelper.html":{}}}],["transforming/changing",{"_index":1571,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1908,"title":{},"body":{"classes/SelectionManager.html":{}}}],["true",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1336,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":2108,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":2097,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":2104,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":827,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep",{"_index":829,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":855,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material).to",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position).to",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenduration).start",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenjs/tween.js",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typefolder",{"_index":1093,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolder.add",{"_index":1180,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm",{"_index":1187,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1188,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":1090,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":987,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1418,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":652,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui/index",{"_index":701,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["ui/phoenix",{"_index":533,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{}}}],["uimanager",{"_index":653,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2235,"title":{},"body":{"interfaces/Window.html":{}}}],["uiservice",{"_index":1054,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["undefined",{"_index":1131,"title":{},"body":{"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1386,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniquely",{"_index":1084,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":2011,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2001,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":808,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":580,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":878,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":396,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["update",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["updateanimationsphere",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":503,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["url.createobjecturl(blob",{"_index":784,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["url.indexof('.root",{"_index":2324,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams",{"_index":2398,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('config",{"_index":2404,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('file",{"_index":2400,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('type",{"_index":2401,"title":{},"body":{"interfaces/Window.html":{}}}],["urlparams.get('type').tolowercase",{"_index":2402,"title":{},"body":{"interfaces/Window.html":{}}}],["urlsearchparams(locationhref.substr(locationhref.lastindexof",{"_index":2399,"title":{},"body":{"interfaces/Window.html":{}}}],["usage",{"_index":2554,"title":{},"body":{"index.html":{}}}],["use",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"index.html":{}}}],["used",{"_index":527,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["uses",{"_index":1666,"title":{},"body":{"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1283,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["v1",{"_index":1495,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1496,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1972,"title":{},"body":{"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1692,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1693,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1694,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2123,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["variable",{"_index":2497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2560,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":2204,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":613,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":628,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{}}}],["vector3(0.5",{"_index":1494,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(4000.0",{"_index":1542,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1497,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2483,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":1459,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1460,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1566,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1560,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1562,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertice",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vertices",{"_index":1222,"title":{},"body":{"classes/PhoenixLoader.html":{},"miscellaneous/variables.html":{}}}],["verticies",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["view",{"_index":505,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":530,"title":{},"body":{"classes/Configuration.html":{}}}],["view.model.ts",{"_index":1569,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1580,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1576,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1581,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1579,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1578,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":474,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr",{"_index":2127,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2201,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2135,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2136,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2125,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["wait",{"_index":1857,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":1993,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":588,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderer(parameters",{"_index":1786,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1763,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1733,"title":{},"body":{"classes/RendererManager.html":{}}}],["webxr",{"_index":2173,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":496,"title":{},"body":{"classes/Configuration.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["width",{"_index":1485,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2223,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.eventdisplay",{"_index":2358,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":629,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1775,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2397,"title":{},"body":{"interfaces/Window.html":{}}}],["wipe",{"_index":1685,"title":{},"body":{"classes/RKHelper.html":{}}}],["wireframe",{"_index":959,"title":{},"body":{"classes/ImportManager.html":{}}}],["without",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["work",{"_index":2175,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2455,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2156,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":494,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["x",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":506,"title":{},"body":{"classes/Configuration.html":{}}}],["x1d6d8;2",{"_index":1595,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["y",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1671,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":2441,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2326,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomfactor",{"_index":2331,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2332,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2334,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/three/animations-manager.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:434\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:114\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:265\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:424\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:55\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:385\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:335\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:33\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:444\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from \"./scene-manager\";\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, Object3D, BufferAttribute, Scene, Camera, SphereGeometry, Plane, Group } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport { RendererManager } from \"./renderer-manager\";\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(\n      this.activeCamera.position\n    ).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: { eventObject: Object3D, position: any }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount = eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to({\n                count: geometryPosCount\n              }, tweenDuration);\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01\n          }).to({\n            x: eventObject.scale.x,\n            y: eventObject.scale.y,\n            z: eventObject.scale.z\n          }, tweenDuration);\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position.divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(eventObject.geometry.attributes['position'].array);\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere)\n      .to({ radius: 3000 }, tweenDuration);\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions\n            .filter(hitPosition => updateAnimationSphere\n              .containsPoint(new Vector3().fromArray(hitPosition))\n            );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute('position', new BufferAttribute(\n              new Float32Array([].concat(...reachedHits)), 3\n            ));\n            geometry.computeBoundingSphere();\n          }\n\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere)\n      .to({ radius: 10000 }, extraAnimationSphereDuration);\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane)\n        .to({ constant: clippingConstant }, tweenDuration);\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material).to({\n        opacity: 1\n      }, 300).start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position).to({\n        z: 0\n      }, tweenDuration).start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:14\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, Line, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\nimport { EVENT_DATA_TYPE_COLORS } from \"../../helpers/constants\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let faces = [];\n    let backs = [];\n\n    for (const param of Object.keys(muonChamberParams)) {\n      if (param.startsWith('front')) {\n        faces.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      } else if (param.startsWith('back')) {\n        backs.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      }\n    }\n\n    let box = new Geometry();\n    box.vertices = faces.concat(backs);\n\n    // front\n    box.faces.push(new Face3(0, 1, 2));\n    box.faces.push(new Face3(2, 3, 0));\n\n    // back\n    box.faces.push(new Face3(4, 5, 6));\n    box.faces.push(new Face3(6, 7, 4));\n\n    // top\n    box.faces.push(new Face3(4, 5, 1));\n    box.faces.push(new Face3(1, 0, 4));\n\n    // bottom\n    box.faces.push(new Face3(7, 6, 2));\n    box.faces.push(new Face3(2, 3, 7));\n\n    // left\n    box.faces.push(new Face3(0, 3, 7));\n    box.faces.push(new Face3(7, 4, 0));\n\n    // right\n    box.faces.push(new Face3(1, 5, 6));\n    box.faces.push(new Face3(6, 2, 1));\n\n    box.computeFaceNormals();\n    box.computeVertexNormals();\n\n    const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n    const boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\n      color: EVENT_DATA_TYPE_COLORS['MuonChambers'],\n      transparent: true,\n      opacity: 0.1,\n      side: DoubleSide\n    }));\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.7\n    }));\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Configuration.html":{"url":"classes/Configuration.html","title":"class - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for preset views and event data loader.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                defaultEventFile\n                            \n                            \n                                defaultView\n                            \n                            \n                                elementId\n                            \n                            \n                                enableDatGUIMenu\n                            \n                            \n                                eventDataLoader\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                presetViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                anyPresetView\n                            \n                            \n                                    Public\n                                getEventDataLoader\n                            \n                            \n                                    Public\n                                getPhoenixMenuRoot\n                            \n                            \n                                    Public\n                                setEventDataLoader\n                            \n                            \n                                    Public\n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, enableDatGUIMenu: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/extras/configuration.model.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the Configuration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        enableDatGUIMenu\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether to enable dat.GUI menu or not.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultEventFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:24\n                            \n                        \n\n                \n                    \n                        Default event to load when none given in URL. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:12\n                            \n                        \n\n                \n                    \n                        Default view [x,y,z] \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:22\n                            \n                        \n\n                \n                    \n                        ID of the wrapper element. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enableDatGUIMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:20\n                            \n                        \n\n                \n                    \n                        Whether to enable dat.GUI menu or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDataLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDataLoader\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:16\n                            \n                        \n\n                \n                    \n                        Event data loader responsible for processing and loading event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:18\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            presetViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PresetView[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:14\n                            \n                        \n\n                \n                    \n                        Preset views for switching event display camera. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            anyPresetView\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    anyPresetView()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:45\n                \n            \n\n\n            \n                \n                    Get if there are any preset views.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If there are any preset views.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataLoader()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:62\n                \n            \n\n\n            \n                \n                    Get the event data loader responsible for processing and loading event data.\n\n\n                    \n                    \n                    \n                        Returns :         EventDataLoader\n\n                    \n                    \n                        The event data loader.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPhoenixMenuRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:79\n                \n            \n\n\n            \n                \n                    Get he root node for phoenix menu.\n\n\n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The root node of phoenix menu.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEventDataLoader(eventDataLoader: EventDataLoader)\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:54\n                \n            \n\n\n            \n                \n                    Set the event data loader to be used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataLoader\n                                    \n                                                EventDataLoader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data loader responsible for\nprocessing and loading event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:70\n                \n            \n\n\n            \n                \n                    Set he root node for phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The phoenix menu node to be set as the root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { StateManager } from '../managers/state-manager';\n\n/**\n * Configuration for preset views and event data loader.\n */\nexport class Configuration {\n  /** Default view [x,y,z] */\n  defaultView: number[];\n  /** Preset views for switching event display camera. */\n  presetViews: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu: boolean;\n  /** ID of the wrapper element. */\n  elementId: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile: { eventFile: string, eventType: string };\n\n  /**\n   * Constructor for the Configuration.\n   * @param elementId ID of the wrapper element.\n   * @param enableDatGUIMenu Whether to enable dat.GUI menu or not.\n   */\n  constructor(\n    elementId: string = 'eventDisplay',\n    enableDatGUIMenu: boolean = false\n  ) {\n    this.elementId = elementId;\n    this.presetViews = [];\n    this.eventDataLoader = new PhoenixLoader();\n    this.enableDatGUIMenu = enableDatGUIMenu;\n  }\n\n  /**\n   * Get if there are any preset views.\n   * @returns If there are any preset views.\n   */\n  public anyPresetView(): boolean {\n    return this.presetViews.length > 0;\n  }\n\n  /**\n   * Set the event data loader to be used.\n   * @param eventDataLoader Event data loader responsible for\n   * processing and loading event data.\n   */\n  public setEventDataLoader(eventDataLoader: EventDataLoader) {\n    this.eventDataLoader = eventDataLoader;\n  }\n\n  /**\n   * Get the event data loader responsible for processing and loading event data.\n   * @returns The event data loader.\n   */\n  public getEventDataLoader(): EventDataLoader {\n    return this.eventDataLoader;\n  }\n\n  /**\n   * Set he root node for phoenix menu.\n   * @param phoenixMenuNode The phoenix menu node to be set as the root node.\n   */\n  public setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuNode;\n    new StateManager().setPhoenixMenuRoot(phoenixMenuNode);\n  }\n\n  /**\n   * Get he root node for phoenix menu.\n   * @return The root node of phoenix menu.\n   */\n  public getPhoenixMenuRoot(): PhoenixMenuNode {\n    return this.phoenixMenuRoot;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:52\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(camera: Camera, scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:40\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from \"three\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n  }\n\n  /**\n   * Render the effects composer.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   */\n  public render(camera: Camera, scene: Scene) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:18\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:38\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:31\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:44\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:25\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n  /**\n   * Constructor for the export manager.\n   */\n  constructor() {\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    this.saveString(result, 'phoenix-obj.obj');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      result => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        this.saveString(output, 'phoenix-scene.phnx');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n\n  /**\n   * Save string in the file and download it.\n   * @param text Text to be stored.\n   * @param filename Name of the file.\n   */\n  private saveString(text: string, filename: string) {\n    this.save(new Blob([text], { type: 'text/plain' }), filename);\n  }\n\n  /**\n   * Create a temporary link and download/save the data (blob) in a file.\n   * @param blob Blob containing exported data.\n   * @param filename Name of the export file.\n   */\n  private save(blob: Blob, filename: string) {\n    const link = document.createElement('a');\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:156\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadJSONGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:156\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadJSONGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSONGeometry(json: string | object, name: string, callback: (Geometry: Object3D) => void, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:173\n                \n            \n\n\n            \n                \n                    Loads geometries from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON or URL to JSON file of the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry or group of geometries.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometries are processed and loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Object3D) => void, filename: string, name: string, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:37\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:139\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:60\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:196\n                \n            \n\n\n            \n                \n                    Process the geometry by setting up material and clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:80\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: Object3D, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:99\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Plane, Material, ObjectLoader, Color, FrontSide } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n  /** Planes for clipping geometry. */\n  private clipPlanes: Plane[];\n  /** Object group ID containing event data. */\n  private EVENT_DATA_ID: string;\n  /** Object group ID containing detector geometries. */\n  private GEOMETRIES_ID: string;\n\n  /**\n   * Constructor for the import manager.\n   * @param clipPlanes Planes for clipping geometry.\n   * @param EVENT_DATA_ID Object group ID containing event data.\n   * @param GEOMETRIES_ID Object group ID containing detector geometries.\n   */\n  constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n    this.clipPlanes = clipPlanes;\n    this.EVENT_DATA_ID = EVENT_DATA_ID;\n    this.GEOMETRIES_ID = GEOMETRIES_ID;\n  }\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename.\n   * @param callback Callback when geometry is processed.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadOBJGeometry(\n    callback: (object: Object3D) => any,\n    filename: string,\n    name: string,\n    color: any,\n    doubleSided: boolean\n  ) {\n    if (color == null) {\n      color = 0x41a6f4;\n    }\n    const objLoader = new OBJLoader();\n    objLoader.load(filename, object => {\n      const processed = this.processOBJ(object, name, color, doubleSided, 'OBJ file');\n      callback(processed);\n    });\n  }\n\n  /**\n   * Parses and loads a geometry in OBJ (.obj) format.\n   * @param geometry Geometry in OBJ (.obj) format.\n   * @param name Name given to the geometry.\n   * @returns The processed object.\n   */\n  public parseOBJGeometry(geometry: string, name: string): Object3D {\n    const objLoader = new OBJLoader();\n    const object = objLoader.parse(geometry);\n    return this.processOBJ(\n      object,\n      name,\n      0x41a6f4,\n      false,\n      'OBJ file loaded from the client.'\n    );\n  }\n\n  /**\n   * Process the geometry object being loaded from OBJ (.obj) format.\n   * @param object 3D object.\n   * @param name Name of the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @param data Data/description to be associated with the object.\n   */\n  private processOBJ(\n    object: Object3D,\n    name: string,\n    color: any,\n    doubleSided: boolean,\n    data?: string\n  ): Object3D {\n    object.name = name;\n    object.userData = { info: data };\n    return this.setObjFlat(object, color, doubleSided);\n  }\n\n  /**\n   * Process the 3D object and flatten it.\n   * @param object3d Group of geometries that make up the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @returns The processed object.\n   */\n  private setObjFlat(object3d: Object3D, color: any, doubleSided: boolean): Object3D {\n    const material2 = new MeshPhongMaterial({\n      color: color,\n      shininess: 0,\n      wireframe: false,\n      clippingPlanes: this.clipPlanes,\n      clipIntersection: true,\n      clipShadows: false,\n      side: doubleSided ? DoubleSide : FrontSide\n    });\n\n    object3d.traverse((child: Object3D) => {\n      if (child instanceof Mesh) {\n        child.name = object3d.name;\n        child.userData = object3d.userData;\n        // Use the new material\n        if (child.material instanceof Material) {\n          child.material.dispose();\n          child.material = material2;\n        }\n        // enable casting shadows\n        child.castShadow = false;\n        child.receiveShadow = false;\n      } else {\n        if (\n          child instanceof LineSegments &&\n          child.material instanceof LineBasicMaterial\n        ) {\n          (child.material.color as Color).set(color);\n        }\n      }\n    });\n    return object3d;\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param geometry Geometry in GLTF (.gltf) format.\n   * @param callback Callback called after the geometry is loaded.\n   */\n  public parseGLTFGeometry(geometry: any, callback: (geometries: Object3D, eventData: Object3D) => any) {\n    const loader = new GLTFLoader();\n    const sceneString = JSON.stringify(geometry, null, 2);\n    loader.parse(sceneString, '', gltf => {\n      const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n      const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n      callback(eventData, geometries);\n    });\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * @param sceneUrl URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param callback Callback called after the scene/geometry is loaded.\n   * @param scale Scale of the geometry.\n   */\n  public loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => any, scale?: number) {\n    const loader = new GLTFLoader();\n    loader.load(sceneUrl, gltf => {\n      const geometry = gltf.scene;\n      this.processGeometry(geometry, name, scale);\n      callback(geometry);\n    });\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param callback Callback called after the geometries are processed and loaded.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    callback: (Geometry: Object3D) => any,\n    scale?: number, doubleSided?: boolean) {\n    const loader = new ObjectLoader();\n    if (typeof json === 'string') {\n      loader.load(json, (geometry: Object3D) => {\n        this.processGeometry(geometry, name, scale, doubleSided);\n        callback(geometry);\n      });\n    } else if (typeof json === 'object') {\n      const geometry = loader.parse(json);\n      this.processGeometry(geometry, name, scale, doubleSided);\n      callback(geometry);\n    }\n  }\n\n  /**\n   * Process the geometry by setting up material and clipping attributes.\n   * @param geometry Geometry to be processed.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  private processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean) {\n    geometry.name = name;\n    // Set a custom scale if provided\n    if (scale) {\n      geometry.scale.set(scale, scale, scale);\n    }\n    geometry.traverse((child) => {\n      if (child instanceof Mesh) {\n        child.name ? child.userData.name = child.name : child.name = child.userData.name = name;\n        if (child.material instanceof Material) {\n          const color = child.material['color'] ? child.material['color'] : 0x2fd691;\n          const side = doubleSided ? DoubleSide : child.material['side'];\n          // Disposing of the default material\n          child.material.dispose();\n          // Changing to a material with 0 shininess\n          child.material = new MeshPhongMaterial({\n            color: color,\n            shininess: 0,\n            side: side\n          });\n          // Setting up the clipping planes\n          child.material.clippingPlanes = this.clipPlanes;\n          child.material.clipIntersection = true;\n          child.material.clipShadows = false;\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:7\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:9\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:16\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:27\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JSRootEventLoader.html":{"url":"classes/JSRootEventLoader.html","title":"class - JSRootEventLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JSRootEventLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/jsroot-event-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from \".root\".\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileEventData\n                            \n                            \n                                    Private\n                                JSROOT\n                            \n                            \n                                    Private\n                                rootFileURL\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Private\n                                getHit\n                            \n                            \n                                    Private\n                                getTEveTrack\n                            \n                            \n                                    Private\n                                getTGeoTrack\n                            \n                            \n                                    Private\n                                processItemsList\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(JSROOT: any, rootFileURL: string)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/jsroot-event-loader.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the JSRoot event loader.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        JSROOT\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JSROOT object containing all JSROOT functions.\n\n                                                        \n                                                \n                                                \n                                                        rootFileURL\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                URL of the \".root\" file to be processed.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fileEventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:11\n                            \n                        \n\n                \n                    \n                        Event data inside the file. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:9\n                            \n                        \n\n                \n                    \n                        JSROOT object containing all JSROOT functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rootFileURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:13\n                            \n                        \n\n                \n                    \n                        URL of the \".root\" file to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:20\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:16\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(objects: string[], onEventData: (eventData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:40\n                \n            \n\n\n            \n                \n                    Get event data of the given objects (e.g ['tracks;1', 'hits;1'])\nfrom the currently loaded \".root\" file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objects\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array identifying objects inside the \".root\" file.\n\n                                    \n                                \n                                \n                                    onEventData\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when event data is extracted and available for use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHit(hit: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:163\n                \n            \n\n\n            \n                \n                    Process and get the Hit in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hit\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hit object containing the hit information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Hit in phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTEveTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTEveTrack(track: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:132\n                \n            \n\n\n            \n                \n                    Process and get the TEveTrack in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Track object containing the track information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Track object in the phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTGeoTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTGeoTrack(track: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:109\n                \n            \n\n\n            \n                \n                    Process and get the TGeoTrack in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Track object containing the track information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Track object in the phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processItemsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processItemsList(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:66\n                \n            \n\n\n            \n                \n                    Process the list of items inside the JSROOT files for relevant event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing the event data in the form of JSROOT classes.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:247\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:211\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:31\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:92\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:71\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:327\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:55\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:286\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:269\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:113\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from \"./phoenix-loader\";\n\n/**\n * PhoenixLoader for processing and loading an event from \".root\".\n */\nexport class JSRootEventLoader extends PhoenixLoader {\n\n  /** JSROOT object containing all JSROOT functions. */\n  private JSROOT: any;\n  /** Event data inside the file. */\n  private fileEventData: any;\n  /** URL of the \".root\" file to be processed. */\n  private rootFileURL: any;\n\n  /**\n   * Constructor for the JSRoot event loader.\n   * @param JSROOT JSROOT object containing all JSROOT functions.\n   * @param rootFileURL URL of the \".root\" file to be processed.\n   */\n  constructor(JSROOT: any, rootFileURL: string) {\n    super();\n\n    this.JSROOT = JSROOT;\n    this.rootFileURL = rootFileURL;\n\n    this.fileEventData = {\n      Hits: {},\n      Tracks: {},\n      Jets: {},\n      CaloClusters: {}\n    };\n  }\n\n  /**\n   * Get event data of the given objects (e.g ['tracks;1', 'hits;1'])\n   * from the currently loaded \".root\" file.\n   * @param objects An array identifying objects inside the \".root\" file.\n   * @param onEventData Callback when event data is extracted and available for use.\n   */\n  public getEventData(objects: string[], onEventData: (eventData: any) => void) {\n    this.JSROOT.OpenFile(this.rootFileURL, (file: any) => {\n      let i = 0;\n      for (const objectName of objects) {\n        file.ReadObject(objectName, (object: any) => {\n          i++;\n          if (object) {\n            this.processItemsList(object);\n          }\n          if (i === objects.length) {\n            for (let objectType of ['Hits', 'Tracks', 'Jets', 'CaloClusters']) {\n              if (Object.keys(this.fileEventData[objectType]).length === 0) {\n                this.fileEventData[objectType] = undefined;\n              }\n            }\n            onEventData(this.fileEventData);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Process the list of items inside the JSROOT files for relevant event data.\n   * @param obj Object containing the event data in the form of JSROOT classes.\n   */\n  private processItemsList(obj: any) {\n    if ((obj._typename === 'TObjArray') || obj._typename === 'TList') {\n      if (!obj.arr) return;\n      for (let n = 0; n \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:20\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:16\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:247\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:211\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:31\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:92\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:71\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:327\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:55\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:286\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:269\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:113\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:20\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:16\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:18\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:247\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:211\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:31\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:92\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:71\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:327\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:55\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:286\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:269\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:113\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Color, Group, Object3D } from 'three';\nimport { UIManager } from '../ui';\nimport { ThreeManager } from '../three';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLogger } from '../info-logger';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { EVENT_DATA_TYPE_COLORS } from '../helpers/constants';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeManager;\n  /** UIService to perform UI related functions. */\n  private ui: UIManager;\n  /** Event data processed by the loader. */\n  private eventData: any;\n\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeManager,\n    ui: UIManager, infoLogger: InfoLogger): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibly automatic if tracks have  {\n        if (typeFolder) {\n          const sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            min: 1, max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            }\n          });\n        }\n      };\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\n    }\n\n    if (eventData.Hits) {\n      // Cannot currently cut on just a postion array.\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000),\n        new Cut('pT', 0, 50)\n      ];\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons', cuts);\n    }\n\n    // if (eventData.Photons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getPhotons, 'Muons');\n    // }\n\n    // if (eventData.Electrons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getElectrons, 'Muons');\n    // }\n\n    if (eventData.Vertices) {\n      const cuts = [\n        new Cut('vertexType', 0, 5)\n      ];\n      this.addObjectType(eventData.Vertices, PhoenixObjects.getVertex, 'Vertices', cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string,\n    cuts?: Cut[], extendEventDataTypeUI?: (typeFolder: any, typeFolderPM?: PhoenixMenuNode) => void) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName, extendEventDataTypeUI);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName, extendEventDataTypeUI);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n      console.log(`${typeName} collection ${collectionName} has ${objectCollection.length} constituents.`)\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      let collectionColor: Color;\n      if (object[collectionName][0]?.color) {\n        collectionColor = new Color(parseInt(object[collectionName][0]?.color));\n      } else {\n        // If the color is not in event data use the default one\n        collectionColor = EVENT_DATA_TYPE_COLORS[typeName];\n      }\n\n      cuts = cuts?.filter(cut => cut.field in objectCollection[0]);\n      this.ui.addCollection(typeFolder, collectionName, cuts, collectionColor);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts, collectionColor);\n    }\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n    // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n    if ('LinkedClusters' in muonParams) {\n      for (const clusterID of muonParams.LinkedClusters) {\n        const clusterColl = clusterID.split(':')[0];\n        const clusterIndex = clusterID.split(':')[1];\n\n        if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n          const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n          if (clusterParams) {\n            const cluster = PhoenixObjects.getCluster(clusterParams);\n            muonScene.add(cluster);\n          }\n        }\n      }\n    }\n    if ('LinkedTracks' in muonParams) {\n      for (const trackID of muonParams.LinkedTracks) {\n        const trackColl = trackID.split(':')[0];\n        const trackIndex = trackID.split(':')[1];\n\n        if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n          const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n          if (trackParams) {\n            const track = PhoenixObjects.getTrack(trackParams);\n            muonScene.add(track);\n          }\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label\n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' },\n        { keys: ['lumiBlock'], label: 'LumiBlock' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ui/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:14\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:16\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:8\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:18\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:10\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:20\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:12\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:62\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: string, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:104\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:127\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:148\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:84\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:75\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:95\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children)\n      this.children = children;\n    if (configs)\n      this.configs = configs;\n    if (parent)\n      this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(name: string, onToggle?: (value: boolean) => void, icon?: string): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: string, options: any): PhoenixMenuNode {\n    let configOptions = { type: type };\n    Object.assign(configOptions, options);\n    this.configs.push(configOptions);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      child.toggleSelfAndDescendants(value);\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.filter(nodeConfig =>\n        nodeConfig.type === configState['type'] && nodeConfig.label === configState['label']\n      )[0];\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        // Apply configs of different config types - manual\n        if (nodeConfig.type === 'checkbox' && configState?.['isChecked']) {\n          nodeConfig.onChange?.(configState?.['isChecked']);\n        } else if (nodeConfig.type === 'color' && configState?.['color']) {\n          nodeConfig.onChange?.(configState?.['color']);\n        } else if (nodeConfig.type === 'slider' && configState?.['value']) {\n          nodeConfig.onChange?.(configState?.['value']);\n        } else if (nodeConfig.type === 'rangeSlider' && configState?.['value']) {\n          nodeConfig.onChange?.({\n            value: configState?.['value'],\n            highValue: configState?.['highValue']\n          });\n        }\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(nodeChild =>\n        nodeChild.name === childState.name && nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:200\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:156\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:108\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:16\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:235\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Object3D, CatmullRomCurve3, TubeBufferGeometry, MeshToonMaterial, Mesh, BufferGeometry, LineBasicMaterial, Line, Group, Quaternion, CylinderBufferGeometry, MeshBasicMaterial, BufferAttribute, PointsMaterial, Points, BoxBufferGeometry, MeshPhongMaterial, SphereBufferGeometry } from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    // Track with no points\n    // if (positions.length==0) {\n    //   console.log(\"Track with no positions.\")\n    //   return;\n    // }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000)\n            return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100)\n            return false;\n\n          return true\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new MeshBasicMaterial({ color: EVENT_DATA_TYPE_COLORS['Jets'], opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new PointsMaterial({ size: 10, color: EVENT_DATA_TYPE_COLORS['Hits'] });\n    // object\n    const pointsObj = new Points(geometry, material);\n    pointsObj.userData = Object.assign({}, hitsParamsClone);\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0; // This needs to be configurable. \n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['CaloClusters'] });\n    // object\n    const cube = new Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['Vertices'] });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:8\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:38\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:26\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n\n  /** Pretty symbols for object params. */\n  public static readonly symbols: object = {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols)\n      .find(symbol => PrettySymbols.symbols[symbol].includes(param));\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:33\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:13\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from \"./runge-kutta\";\nimport { Vector3 } from \"three\";\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(\n      -d0 * Math.sin(phi),\n      d0 * Math.cos(phi),\n      z0\n    );\n\n    // Wipe existing positions\n    let positions: number[][] = []\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [val.pos.x, val.pos.y, val.pos.z]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                    Private\n                                setRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string)\n                    \n                \n                        \n                            \n                                Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Instantiate the renderer manager by setting up the main renderer.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:133\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:167\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:190\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:106\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:114\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:122\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:143\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:31\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:208\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:180\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:75\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:49\n                \n            \n\n\n            \n                \n                    Set the initial renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:98\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:155\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n\n  /**\n   * Instantiate the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  constructor(elementId: string) {\n    // Main renderer for current browsers\n    this.setRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set the initial renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  private setRenderer(elementId: string) {\n    const renderer: WebGLRenderer = new WebGLRenderer();\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n    this.getMainRenderer().setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    this.getMainRenderer().setPixelRatio(window.devicePixelRatio)\n    this.getMainRenderer().domElement.className = 'ui-element';\n    this.getMainRenderer().domElement.id = 'three-canvas';\n    let canvas = document.getElementById(elementId);\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:93\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:13\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:13\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onScriptsLoaded\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when all the JSRoot scripts have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:35\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        declare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\n   */\n  public static loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void) {\n    (async () => {\n      const allScripts = [\n        'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\n        'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\n        'JSRootGeoBase.js', 'JSRootGeoPainter.js'\n      ];\n      for (const script of allScripts) {\n        await ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT');\n      }\n      onScriptsLoaded(JSROOT);\n    })();\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(scriptURL: string, scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]): Promise {\n    return new Promise((resolve, reject) => {\n      const scriptExists = document\n        .querySelectorAll('script[src=\"' + scriptURL + '\"]');\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n        }\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n          });\n        }\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:46\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:154\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:190\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:143\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:44\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:129\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:117\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:96\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:224\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:71\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:201\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:88\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:104\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../helpers/pretty-symbols';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[]; };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  };\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera, scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      if (enable) {\n        this.enableSelecting();\n      } else {\n        this.disableSelecting();\n      }\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document.getElementById('three-canvas').addEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').addEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').addEventListener('touchstart',\n      this.onTouchDown);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document.getElementById('three-canvas').removeEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').removeEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').removeEventListener('touchstart',\n      this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n  }\n\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) { return; }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  }\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(intersectedObject.userData);\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key]\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData).map((key) => {\n        // Only take properties that are a string or number (no arrays or objects)\n        if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n          return key + '=' + intersectedObject.userData[key];\n        }\n      }).filter(val => val);\n      // Build the log text and add to the logger\n      const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  }\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  }\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    objectsGroup.traverse((object: any) => {\n      if (object.uuid === uuid) {\n        this.outlinePass.selectedObjects = [object];\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:134\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:144\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:136\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:146\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:132\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:138\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:142\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:140\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromFile\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:18\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:38\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromFile\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromFile(onFileRead?: (json?: object) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:91\n                \n            \n\n\n            \n                \n                    Load data from JSON file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onFileRead\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback with JSON file data when the file data is read.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:118\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:68\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:160\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:152\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:144\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:168\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:46\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from \"../event-display\";\nimport { Camera } from \"three\";\nimport { PhoenixMenuNode } from \"../ui/phoenix-menu/phoenix-menu-node\";\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled: boolean;\n  /** Angle of the clipping. */\n  clippingAngle: number;\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n\n  /**\n   * Create the state manager.\n   */\n  constructor() {\n    if (StateManager.instance) {\n      return StateManager.instance;\n    } else {\n      StateManager.instance = this;\n      return StateManager.instance;\n    }\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot.addConfig('button', {\n        label: 'Save state',\n        onClick: () => {\n          this.saveStateAsJSON();\n        }\n      }).addConfig('button', {\n        label: 'Load state',\n        onClick: () => {\n          this.loadStateFromFile();\n        }\n      });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null\n      }\n    };\n\n    const blob = new Blob([JSON.stringify(state)], {\n      type: 'application/json'\n    });\n    const tempAnchor = document.createElement('a');\n    tempAnchor.href = URL.createObjectURL(blob);\n    tempAnchor.download = 'phoenix-config.json';\n    tempAnchor.click();\n    tempAnchor.remove();\n  }\n\n  /**\n   * Load data from JSON file.\n   * @param onFileRead Callback with JSON file data when the file data is read.\n   */\n  loadStateFromFile(onFileRead?: (json: object) => void) {\n    // Create a mock input file element and use that to read the file\n    let inputFile = document.createElement('input');\n    inputFile.type = 'file';\n    inputFile.accept = 'application/json';\n    inputFile.onchange = (e: any) => {\n      const configFile = e.target?.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        const jsonData = JSON.parse(e.target.result.toString());\n\n        onFileRead?.(jsonData);\n\n        this.loadStateFromJSON(jsonData);\n\n        inputFile.remove();\n        inputFile = null;\n      };\n      reader.readAsText(configFile);\n    }\n    inputFile.click();\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonData: object;\n    if (typeof json === 'string') {\n      jsonData = JSON.parse(json);\n    } else {\n      jsonData = json;\n    }\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(jsonData['eventDisplay']?.['cameraPosition']);\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay.getUIManager().rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled = clipping;\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle = angle;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:20\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:16\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:247\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:211\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:31\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:92\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:71\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:327\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:55\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:286\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:269\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:113\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:21\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:25\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:17\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:61\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:51\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:23\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:71\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:88\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:107\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:79\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:141\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:114\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:32\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Group, Camera, Vector3, PerspectiveCamera } from \"three\";\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n  /** The VR controller for movement. */\n  private controller: any;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    if ((navigator as any)?.xr) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n      };\n      (navigator as any)?.xr?.requestSession(VRManager.SESSION_TYPE, sessionInit)\n        .then(this.onVRSessionStarted);\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  }\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   */\n  public getCameraGroup(camera?: Camera) {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera) {\n      this.vrCamera = new Camera().copy(camera);\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    // Get the controller\n    this.controller = this.renderer.xr.getController(0);\n    this.controller.addEventListener('selectstart', () => {\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    });\n    this.controller.addEventListener('selectend', () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    });\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.renderer.xr.getCamera(new Camera())?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\nimport { Configuration } from './extras/configuration.model';\nimport { StateManager } from './managers/state-manager';\nimport { JiveXMLLoader } from './loaders/jivexml-loader';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Frame ID of the current animation frame. */\n  private frameID: number;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n\n  /**\n   * Constructor for the phoenix event display.\n   */\n  constructor() {\n    this.graphicsLibrary = new ThreeManager();\n    this.infoLogger = new InfoLogger();\n    this.ui = new UIManager(this.graphicsLibrary);\n    new StateManager().setEventDisplay(this);\n  }\n\n  /**\n   * Initializes the components needed to later represent the geometries.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    // Configuration\n    this.configuration = configuration;\n    // Init the three manager\n    this.graphicsLibrary.init(configuration, this.infoLogger);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    if (this.frameID) {\n      cancelAnimationFrame(this.frameID);\n    }\n    // Animate loop\n    const animate = () => {\n      this.frameID = requestAnimationFrame(animate);\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    animate();\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n    // Initialize event with data from URL if there is any\n    this.initEventFromURL(\n      configuration.defaultEventFile?.eventFile,\n      configuration.defaultEventFile?.eventType\n    );\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadOBJGeometry(filename: string, name: string, color: any,\n    doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, color, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(content: string, name: string, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   */\n  public parsePhoenixDisplay(input: any) {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n      this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   */\n  public parseGLTFGeometry(input: any) {\n    const scene = JSON.parse(input);\n    this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadGLTFGeometry(url: any, name: string,\n    scale?: number, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\n    this.ui.addGeometry(name, undefined, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, undefined, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(JSROOT: any, url: string, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name, scale, doubleSided, initiallyVisible);\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(JSROOT: any, url: string, objectName: string,\n    name: string, scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.OpenFile(url, (file: any) => {\n        file.ReadObject(objectName, (obj: any) => {\n          this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name, scale, doubleSided, initiallyVisible);\n        });\n      });\n    }\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.getEventDataLoader().getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.getEventDataLoader().getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.getEventDataLoader().getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, doubleSided);\n      },\n      loadJSONGeometry: (json: string | object, name: string,\n        scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) => {\n        this.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n      }\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void) {\n    this.graphicsLibrary\n      .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public initEventFromURL(defaultEventPath?: string, defaultEventType?: string) {\n    const locationHref = window.location.href;\n    const urlParams = new URLSearchParams(locationHref.substr(locationHref.lastIndexOf('?')));\n\n    let file: string, type: string;\n\n    if (!urlParams.get('file') || !urlParams.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = urlParams.get('file');\n      type = urlParams.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (urlParams.get('config')) {\n        fetch(urlParams.get('config'))\n          .then(res => res.json())\n          .then(jsonState => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          });\n      }\n    }\n\n    if (file && type && ('fetch' in window)) {\n      fetch(file)\n        .then(res => type === 'jivexml' ? res.text() : res.json())\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.buildEventDataFromJSON(eventData);\n          } else {\n            this.parsePhoenixEvents(res);\n          }\n        }).catch((error) => {\n          this.getInfoLogger().add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        }).finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n        });\n    } else {\n      loadConfig();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (49/49)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.model.ts\n            \n            class\n            Configuration\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/three/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (52/52)\n            \n        \n        \n            \n                \n                src/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                src/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/ui/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/ui/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (20/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.120.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application. First, install the npm package.\nnpm install phoenix-event-displayUsage\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, Configuration } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Create the configuration\nconst configuration = new Configuration('wrapper_element_id');\n\n// ... other configuration options\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);Examples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194CE),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xFFD166)\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
