var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.289,1,2.328]],["body/classes/AnimationsManager.html",[0,0.153,1,1.979,2,0.135,3,0.135,4,0.135,5,0.096,6,4.494,7,0.752,8,0.429,9,2.03,10,1.886,11,5.325,12,1.352,13,1.44,14,2.412,15,1.466,16,2.717,17,0.096,18,0.25,19,0.987,20,2.717,21,3.402,22,3.402,23,2.717,24,3.402,25,3.402,26,3.402,27,3.402,28,1.145,29,2.717,30,1.063,31,1.694,32,2.431,33,3.893,34,2.792,35,3.22,36,0.485,37,1.416,38,0.552,39,0.032,40,0.485,41,0.297,42,0.552,43,0.629,44,1.605,45,0.709,46,1.348,47,1.44,48,1.979,49,1.586,50,2.488,51,0.944,52,2.272,53,1.49,54,5.242,55,0.912,56,1.694,57,4.714,58,4.399,59,4.399,60,3.652,61,3.987,62,3.915,63,3.805,64,5.242,65,5.013,66,5.269,67,1.389,68,1.98,69,3.29,70,4.399,71,4.399,72,0.429,73,1.694,74,5.473,75,1.694,76,1.98,77,2.021,78,4.263,79,1.694,80,4.263,81,1.694,82,0.788,83,1.063,84,2.717,85,3.402,86,3.256,87,3.893,88,2.272,89,1.694,90,1.416,91,3.565,92,1.694,93,1.316,94,1.804,95,3.315,96,2.561,97,2.836,98,1.586,99,1.986,100,2.836,101,1.694,102,1.694,103,1.694,104,1.694,105,3.402,106,5.126,107,1.694,108,3.893,109,4.263,110,4.263,111,2.718,112,1.694,113,2.272,114,4.577,115,1.586,116,1.44,117,3.402,118,2.846,119,3.805,120,2.717,121,0.855,122,2.717,123,1.694,124,4.78,125,1.416,126,2.717,127,1.648,128,1.979,129,2.205,130,1.152,131,2.717,132,1.694,133,3.62,134,2.534,135,3.893,136,2.207,137,2.836,138,3.893,139,0.572,140,1.416,141,2.846,142,1.979,143,1.729,144,1.979,145,1.097,146,1.416,147,4.156,148,1.023,149,2.272,150,1.694,151,2.272,152,0.871,153,0.392,154,1.416,155,0.135,156,0.496,157,1.694,158,1.694,159,1.694,160,1.694,161,0.851,162,3.402,163,1.694,164,2.846,165,1.694,166,2.846,167,1.694,168,1.694,169,1.694,170,0.224,171,1.586,172,1.694,173,1.694,174,1.097,175,1.694,176,1.694,177,1.378,178,1.694,179,1.694,180,1.694,181,3.402,182,1.694,183,2.717,184,1.694,185,2.272,186,1.761,187,1.694,188,0.898,189,1.694,190,0.742,191,1.694,192,1.694,193,1.694,194,1.694,195,1.694,196,1.694,197,2.717,198,1.694,199,1.694,200,0.692,201,3.402,202,1.694,203,2.717,204,1.694,205,3.402,206,3.893,207,1.694,208,1.234,209,1.694,210,4.263,211,1.694,212,1.44,213,2.717,214,2.272,215,1.979,216,3.402,217,2.488,218,1.097,219,1.804,220,2.717,221,3.893,222,1.416,223,3.893,224,1.694,225,1.694,226,1.416,227,2.717,228,2.846,229,0.989,230,2.717,231,2.717,232,1.694,233,1.694,234,1.694,235,1.694,236,1.694,237,1.694,238,0.82,239,1.416,240,1.694,241,2.846,242,2.717,243,1.694,244,1.694,245,1.694,246,1.694,247,1.694,248,1.097,249,1.694,250,1.694,251,1.694,252,1.694,253,1.416,254,1.416,255,1.416,256,0.692,257,1.694,258,1.694,259,1.694,260,2.717,261,1.694,262,1.234,263,1.694,264,1.694,265,1.694,266,1.979,267,1.694,268,1.694,269,1.694,270,1.694,271,1.694,272,0.989,273,1.416,274,1.416,275,1.694,276,1.694,277,1.182,278,1.694,279,1.694,280,2.717,281,1.416,282,1.694,283,2.717,284,1.694,285,1.694,286,1.694,287,1.694,288,3.402,289,1.694,290,1.694,291,1.694,292,1.694,293,1.694,294,1.694,295,1.416,296,1.694,297,1.416,298,1.694,299,1.694,300,0.929,301,1.694,302,1.694,303,1.694,304,1.416,305,1.694,306,1.694,307,1.694,308,2.717,309,3.402,310,1.694,311,1.694,312,1.694,313,1.694,314,1.694,315,1.416,316,1.694,317,3.893,318,1.694,319,0.638,320,1.694,321,1.761,322,3.402,323,1.694,324,1.694,325,1.694,326,1.694,327,1.694,328,1.416,329,1.694,330,1.097,331,3.893,332,2.717,333,1.694,334,1.694,335,1.097,336,2.717,337,2.717,338,2.717,339,0.82,340,1.694,341,1.694,342,1.694,343,1.694,344,1.694,345,1.694,346,1.694,347,1.694,348,1.234,349,0.898,350,0.989,351,0.898,352,1.694,353,1.694,354,2.717,355,2.717,356,1.234,357,1.979,358,2.717,359,1.694,360,2.717,361,1.694,362,1.694,363,1.694,364,1.694,365,1.694,366,1.694,367,1.694,368,1.694,369,1.694,370,1.694,371,1.694,372,1.694,373,1.694,374,0.898,375,1.694,376,1.694,377,3.893,378,1.694,379,1.694,380,1.694,381,1.694,382,1.416,383,2.717,384,1.694,385,1.234,386,1.694,387,1.694,388,1.694,389,0.008,390,0.013,391,0.008]],["title/classes/CMSObjects.html",[0,0.289,392,2.328]],["body/classes/CMSObjects.html",[0,0.358,2,0.315,3,0.315,4,0.315,5,0.223,8,0.401,17,0.223,18,0.462,19,0.64,36,0.364,38,0.628,39,0.032,40,0.364,41,0.223,42,0.415,44,2.075,45,0.594,72,0.401,111,2.659,118,3.304,121,0.939,130,1.484,139,0.737,142,2.878,143,1.755,144,3.654,145,2.56,148,2.075,152,1.608,153,0.915,155,0.315,156,0.401,161,0.809,170,0.523,177,1.387,186,3.571,190,1.505,219,3.073,229,3.216,272,2.927,300,1.37,356,3.654,357,3.654,389,0.019,390,0.024,391,0.019,392,3.654,393,4.195,394,2.878,395,2.049,396,2.927,397,5.016,398,5.016,399,3.216,400,2.251,401,5.016,402,5.016,403,3.951,404,2.228,405,3.569,406,6.114,407,1.484,408,5.511,409,3.951,410,3.951,411,2.878,412,3.654,413,4.195,414,3.304,415,1.267,416,3.304,417,3.951,418,3.951,419,3.951,420,3.951,421,3.951,422,5.016,423,3.951,424,3.951,425,5.016,426,3.951,427,3.951,428,3.951,429,6.468,430,5.016,431,2.251,432,5.016,433,3.951,434,5.016,435,5.511,436,5.016,437,5.511,438,5.511,439,3.951,440,5.016,441,3.951,442,5.016,443,3.951,444,3.304,445,3.951,446,3.951,447,3.951,448,3.951,449,3.951,450,3.951,451,3.304,452,3.304,453,3.304,454,3.951,455,2.56,456,3.951,457,5.511,458,3.951,459,3.951,460,3.951,461,3.951,462,3.951,463,3.951,464,3.951,465,3.951,466,3.951,467,3.951,468,3.951,469,3.951]],["title/classes/Configuration.html",[0,0.289,470,1.548]],["body/classes/Configuration.html",[0,0.306,2,0.27,3,0.27,4,0.27,5,0.191,8,0.436,17,0.191,18,0.417,19,1.041,30,1.49,34,2.194,36,0.579,38,0.536,39,0.032,40,0.471,41,0.344,42,0.536,45,0.775,46,1.509,55,0.665,72,0.478,121,0.496,139,0.802,155,0.27,156,0.436,170,0.722,177,0.851,277,1.174,319,2.206,389,0.016,390,0.022,391,0.016,415,1.995,470,2.837,471,2.826,472,4.487,473,4.43,474,2.613,475,0.807,476,5.004,477,6.082,478,3.732,479,5.109,480,5.109,481,5.458,482,5.458,483,5.458,484,4.529,485,4.529,486,2.826,487,1.11,488,2.253,489,4.529,490,3.186,491,4.565,492,3.976,493,4.565,494,3.537,495,3.976,496,3.75,497,3.379,498,3.379,499,4.9,500,2.837,501,2.602,502,2.788,503,3.379,504,4.033,505,4.634,506,3.31,507,3.379,508,4.529,509,1.237,510,3.379,511,3.379,512,3.379,513,4.529,514,3.379,515,2.194,516,4.529,517,3.379,518,3.379,519,2.194,520,3.379,521,2.826,522,2.19,523,2.19,524,3.379,525,3.379,526,5.109,527,3.379,528,3.379,529,4.529]],["title/classes/Cut.html",[0,0.289,530,1.548]],["body/classes/Cut.html",[0,0.353,2,0.311,3,0.311,4,0.311,5,0.22,8,0.397,17,0.22,18,0.458,19,1.047,28,1.533,30,1.357,36,0.578,38,0.409,39,0.032,40,0.532,41,0.35,42,0.409,45,0.776,46,1.518,53,1.518,55,0.572,72,0.311,82,1.434,83,1.79,98,3.195,155,0.311,156,0.46,188,3.356,190,1.357,248,3.547,339,2.407,389,0.018,390,0.024,391,0.018,475,0.885,487,1.124,530,2.998,531,3.257,532,3.895,533,2.273,534,5.481,535,5.474,536,5.474,537,3.86,538,6.191,539,6.191,540,6.091,541,3.895,542,4.97,543,4.97,544,5.474,545,6.191,546,6.379,547,6.191,548,3.895,549,3.895,550,3.895,551,3.895,552,3.895,553,3.895,554,4.97,555,4.97,556,3.895,557,3.895]],["title/classes/EffectsManager.html",[0,0.289,558,2.071]],["body/classes/EffectsManager.html",[0,0.306,2,0.27,3,0.27,4,0.27,5,0.191,7,1.502,8,0.436,9,2.231,10,2.195,15,2.056,17,0.191,18,0.418,19,1.025,28,1.551,30,1.396,32,2.965,34,3.188,36,0.561,38,0.537,39,0.032,40,0.471,41,0.338,42,0.537,45,0.757,50,3.42,55,0.665,72,0.436,82,1.409,121,0.802,139,0.836,153,0.783,155,0.27,156,0.468,161,0.599,170,0.447,190,0.923,208,3.977,349,2.402,389,0.016,390,0.022,391,0.016,475,0.807,509,1.746,515,2.946,558,2.936,559,5.152,560,5.087,561,3.977,562,5.395,563,3.79,564,3.79,565,6.278,566,5.111,567,5.46,568,4.532,569,4.269,570,4.532,571,3.977,572,3.79,573,4.532,574,5.46,575,2.394,576,3.79,577,3.382,578,5.111,579,3.382,580,6.225,581,5.111,582,3.79,583,3.382,584,3.382,585,2.645,586,4.566,587,4.566,588,3.977,589,5.087,590,4.532,591,3.382,592,3.301,593,4.532,594,2.828,595,3.382,596,2.828,597,4.532,598,3.382,599,3.382,600,3.382,601,4.532,602,3.382,603,4.274,604,3.79,605,3.382,606,3.382,607,3.382,608,3.382,609,3.382,610,3.382,611,3.382,612,2.828,613,3.382,614,3.382,615,3.382,616,3.382,617,3.382,618,3.382,619,3.382]],["title/interfaces/EventDataLoader.html",[478,1.865,620,1.865]],["body/interfaces/EventDataLoader.html",[3,0.45,4,0.292,5,0.207,8,0.45,9,2.3,17,0.207,18,0.44,36,0.538,38,0.558,39,0.032,40,0.49,41,0.3,42,0.558,43,1.387,44,2.329,45,0.778,46,1.482,55,0.701,72,0.508,98,2.784,130,1.868,139,0.78,155,0.292,156,0.478,200,1.949,256,1.949,389,0.017,390,0.023,391,0.017,395,1.949,474,1.949,478,2.784,487,1.19,509,1.303,575,1.949,620,2.133,621,2.663,622,4.363,623,1.623,624,4.77,625,3.057,626,4.77,627,2.784,628,2.784,629,2.984,630,2.984,631,2.784,632,2.784,633,2.984,634,2.726,635,2.9,636,2.726,637,2.329,638,3.655,639,3.175,640,2.529,641,2.119,642,2.784,643,2.31,644,2.784,645,2.784,646,2.501,647,2.984,648,2.119,649,2.784,650,1.796,651,2.529,652,2.784,653,2.784,654,2.119,655,3.1,656,2.31,657,2.529,658,3.655,659,2.996,660,2.529,661,2.784,662,3.99,663,3.99,664,3.057,665,2.119,666,3.475,667,2.501,668,3.99,669,5.009,670,3.057,671,2.984,672,2.31,673,2.31,674,2.529,675,2.529,676,2.784,677,3.655,678,4.77,679,4.507,680,4.101,681,2.529,682,2.31,683,3.057,684,3.057]],["title/classes/ExportManager.html",[0,0.289,685,2.328]],["body/classes/ExportManager.html",[0,0.27,2,0.238,3,0.238,4,0.238,5,0.347,7,1.325,8,0.472,9,2.116,10,2.014,12,1.444,17,0.169,18,0.383,19,0.915,28,1.59,30,1.487,32,2.886,36,0.544,38,0.608,39,0.032,40,0.566,41,0.334,42,0.608,43,0.963,45,0.733,46,1.455,47,3.366,49,2.427,55,0.761,72,0.462,121,0.611,125,2.494,139,0.703,148,2.39,152,0.956,153,0.691,155,0.462,156,0.495,161,0.831,170,0.633,200,2.508,328,5.08,339,2.014,351,2.204,389,0.025,390,0.02,391,0.014,415,1.661,416,4.004,431,1.218,470,2.86,487,1.197,648,1.847,654,2.886,659,1.444,666,3.029,685,3.029,686,5.016,687,4.158,688,4.158,689,4.158,690,4.158,691,4.158,692,4.158,693,2.982,694,4.158,695,4.332,696,2.301,697,3.478,698,2.694,699,3.478,700,3.478,701,3.478,702,5.641,703,3.737,704,4.158,705,2.494,706,2.204,707,4.158,708,5.998,709,4.426,710,2.982,711,4.158,712,4.158,713,4.158,714,2.982,715,4.158,716,2.982,717,4.158,718,2.982,719,4.158,720,4.158,721,4.158,722,2.494,723,4.158,724,4.332,725,4.158,726,2.982,727,4.158,728,2.982,729,2.494,730,4.788,731,2.982,732,2.982,733,2.982,734,5.18,735,2.982,736,2.172,737,2.494,738,2.982,739,2.172,740,4.158,741,2.982,742,2.982,743,2.494,744,2.982,745,2.982,746,2.982,747,5.18,748,2.982,749,5.18,750,2.982,751,2.172,752,2.982,753,2.982,754,2.982,755,2.982,756,2.982,757,2.982,758,2.982,759,2.494,760,2.982,761,2.982,762,2.982,763,2.982,764,2.982,765,2.982,766,2.982,767,2.982,768,2.982,769,2.982,770,2.982,771,2.982]],["title/classes/Field.html",[0,0.289,537,2.071]],["body/classes/Field.html",[0,0.458,2,0.264,3,0.264,4,0.264,5,0.187,8,0.264,13,1.754,14,1.754,17,0.187,18,0.412,36,0.305,38,0.347,39,0.032,40,0.305,41,0.187,42,0.347,43,0.766,53,1.46,67,0.766,72,0.465,77,1.469,82,0.766,93,1.602,94,2.679,96,2.586,99,1.931,116,2.679,121,0.486,127,2.448,129,2.143,136,1.469,139,0.486,143,2.901,153,0.766,155,0.264,156,0.483,161,0.787,170,0.591,188,3.087,190,0.903,229,3.158,238,1.602,256,1.351,277,1.149,300,1.219,321,2.893,389,0.021,390,0.021,391,0.016,400,2.211,407,1.321,431,2.379,475,0.589,488,1.245,537,3.506,650,1.681,772,2.893,773,2.143,774,3.308,775,3.308,776,3.308,777,3.308,778,3.253,779,3.618,780,3.618,781,1.602,782,1.602,783,3.155,784,2.41,785,2.41,786,2.41,787,2.893,788,3.158,789,2.95,790,3.158,791,2.41,792,2.41,793,2.41,794,3.661,795,2.41,796,2.41,797,2.41,798,2.41,799,3.942,800,3.682,801,3.253,802,3.253,803,4.336,804,4.409,805,3.942,806,3.942,807,2.41,808,2.41,809,2.41,810,4.336,811,2.41,812,2.41,813,4.409,814,2.41,815,2.41,816,3.682,817,4.336,818,2.41,819,2.41,820,2.41,821,3.253,822,2.41,823,2.41,824,2.41,825,2.41,826,2.41,827,2.41,828,2.41,829,2.41,830,2.41,831,2.41,832,2.41,833,2.41,834,2.41,835,2.41,836,2.41,837,2.41,838,2.41,839,3.682,840,3.253,841,2.41,842,3.682,843,2.143,844,3.682,845,3.253,846,2.41,847,2.143,848,2.41,849,2.41,850,2.41,851,3.253,852,3.253,853,3.253,854,3.253,855,3.275,856,2.893,857,3.682,858,1.931,859,3.253,860,1.931,861,2.143,862,2.606,863,2.143,864,2.143,865,2.143,866,2.41,867,3.253,868,2.41,869,2.41,870,2.41,871,2.41,872,2.41,873,2.41,874,2.41]],["title/classes/ImportManager.html",[0,0.289,875,2.328]],["body/classes/ImportManager.html",[0,0.186,2,0.164,3,0.252,4,0.164,5,0.291,7,0.91,8,0.444,9,1.767,10,1.528,12,1.096,17,0.116,18,0.291,19,0.962,28,1.528,30,1.051,36,0.529,38,0.572,39,0.032,40,0.606,41,0.325,42,0.572,43,1.229,45,0.584,46,1.261,49,1.842,53,1.261,55,0.799,60,3.33,61,3.402,67,1.002,68,1.857,72,0.444,76,2.345,82,0.475,111,3.358,121,0.779,130,1.919,139,0.755,145,2.494,148,2.397,151,4.125,152,1.841,153,0.475,155,0.164,156,0.512,161,0.785,170,0.509,174,2.802,177,0.969,200,1.289,214,1.713,215,4.572,219,3.496,228,4.125,272,1.842,277,1.713,300,0.862,319,0.771,330,2.494,335,3.935,351,1.673,374,1.086,389,0.01,390,0.015,391,0.01,396,2.726,404,2.191,407,1.57,412,2.299,413,3.219,414,2.639,431,0.837,453,3.616,474,1.572,475,0.562,487,1.266,488,2.235,490,3.097,494,1.327,585,1.842,648,1.402,650,1.628,654,2.659,672,1.528,696,2.469,703,3.302,706,3.219,709,3.593,722,1.713,739,4.424,759,1.713,860,1.842,875,2.299,876,4.863,877,4.933,878,5.306,879,5.306,880,2.639,881,2.639,882,3.219,883,3.156,884,3.156,885,3.156,886,3.849,887,3.156,888,3.156,889,2.299,890,1.492,891,1.492,892,3.156,893,2.048,894,4.649,895,4.125,896,2.879,897,2.639,898,3.593,899,2.639,900,5.266,901,2.048,902,4.05,903,3.302,904,4.649,905,4.05,906,4.649,907,2.048,908,2.048,909,3.156,910,2.048,911,2.048,912,2.292,913,3.156,914,2.048,915,3.156,916,2.048,917,2.045,918,2.048,919,2.048,920,2.299,921,3.156,922,3.156,923,3.156,924,3.219,925,3.156,926,3.156,927,4.67,928,2.048,929,3.849,930,2.048,931,3.849,932,2.048,933,2.048,934,3.156,935,2.048,936,2.048,937,2.048,938,2.048,939,2.048,940,2.048,941,2.048,942,2.048,943,3.156,944,3.849,945,2.048,946,2.048,947,2.048,948,2.048,949,2.048,950,3.219,951,4.324,952,2.048,953,2.048,954,2.048,955,4.67,956,3.156,957,2.048,958,2.048,959,2.048,960,2.048,961,2.048,962,2.048,963,2.048,964,2.048,965,2.048,966,2.048,967,2.048,968,1.713,969,2.048,970,2.048,971,3.849,972,3.849,973,2.639,974,2.048,975,2.048,976,2.048,977,2.048,978,2.048,979,2.048,980,2.048,981,3.156,982,3.156,983,2.048,984,2.048,985,2.048,986,2.048,987,2.048,988,2.048]],["title/classes/InfoLogger.html",[0,0.289,637,1.203]],["body/classes/InfoLogger.html",[0,0.382,2,0.337,3,0.526,4,0.337,5,0.239,8,0.417,17,0.239,18,0.482,28,1.565,36,0.547,38,0.443,39,0.032,40,0.389,41,0.321,42,0.443,43,1.211,45,0.499,46,1.487,53,1.211,55,0.62,68,1.589,72,0.454,82,1.211,83,1.427,115,3.051,155,0.337,156,0.417,170,0.558,389,0.02,390,0.025,391,0.02,475,0.931,487,1.212,509,1.152,515,2.532,575,2.136,637,1.968,655,3.747,656,2.044,667,2.761,682,2.532,858,3.051,920,3.808,989,5.102,990,3.53,991,5.679,992,5.679,993,2.062,994,5.936,995,4.22,996,4.372,997,4.22,998,5.228,999,5.228,1000,2.532,1001,2.771,1002,5.228,1003,3.678,1004,4.22,1005,5.228,1006,4.529,1007,4.22,1008,2.532,1009,4.22,1010,4.22,1011,4.22,1012,4.22,1013,4.22]],["title/classes/JSRootEventLoader.html",[0,0.289,1014,2.328]],["body/classes/JSRootEventLoader.html",[0,0.224,2,0.345,3,0.291,4,0.198,5,0.338,8,0.49,12,1.265,15,0.933,17,0.14,18,0.336,19,0.959,28,1.625,30,1.179,36,0.586,38,0.649,39,0.032,40,0.57,41,0.366,42,0.64,43,1.423,44,2.295,45,0.779,46,1.448,47,1.93,51,1.841,55,0.857,67,1.102,68,1.371,72,0.49,76,1.625,130,1.907,134,1.93,136,1.617,139,0.364,148,0.933,152,1.625,155,0.198,156,0.405,161,0.328,170,0.328,177,1.087,200,2.166,212,2.81,217,3.281,266,3.693,315,3.045,350,1.446,374,1.93,389,0.012,390,0.017,391,0.012,395,1.012,404,2.355,405,2.52,407,1.698,415,1.802,474,1.944,475,0.649,487,1.197,500,1.763,501,1.617,502,1.1,504,3.779,509,0.994,519,3.027,530,1.763,533,1.446,575,2.239,623,1.1,625,1.763,627,2.125,628,2.125,629,2.289,630,2.289,631,2.125,632,1.446,633,2.523,634,2.091,635,2.654,636,2.091,637,1.792,639,1.93,640,1.313,641,1.617,642,1.446,643,1.2,644,1.446,645,1.446,646,1.617,647,1.93,648,1.1,649,1.446,650,0.933,651,1.313,652,1.446,653,1.446,654,1.1,656,1.2,657,1.313,659,2.864,660,2.289,665,2.355,667,2.434,671,1.93,672,1.2,673,1.2,674,1.313,675,1.313,676,1.446,681,1.313,682,2.091,696,2.434,703,2.125,706,1.93,751,1.805,782,1.763,896,2.777,903,2.959,912,1.313,993,0.86,1000,2.305,1001,1.313,1003,2.125,1008,2.091,1014,2.652,1015,4.878,1016,2.652,1017,4.317,1018,3.681,1019,5.621,1020,2.652,1021,3.641,1022,3.641,1023,3.641,1024,3.641,1025,2.359,1026,3.435,1027,2.359,1028,2.359,1029,2.359,1030,2.359,1031,3.641,1032,3.045,1033,2.477,1034,2.477,1035,4.402,1036,1.805,1037,1.805,1038,1.605,1039,1.805,1040,1.605,1041,3.641,1042,4.758,1043,2.477,1044,3.641,1045,3.641,1046,3.641,1047,3.641,1048,3.641,1049,3.045,1050,2.477,1051,2.477,1052,2.477,1053,2.477,1054,2.477,1055,2.477,1056,2.477,1057,2.477,1058,3.641,1059,2.477,1060,3.641,1061,3.641,1062,3.641,1063,1.605,1064,3.083,1065,2.359,1066,1.805,1067,2.125,1068,1.605,1069,1.446,1070,1.605,1071,1.446,1072,2.359,1073,2.359,1074,1.605,1075,1.605,1076,2.359,1077,2.359,1078,2.359,1079,1.446,1080,1.605,1081,1.805,1082,3.285,1083,3.285,1084,1.605,1085,1.605,1086,1.313,1087,1.446,1088,1.805,1089,1.805,1090,1.805,1091,3.285,1092,1.805,1093,1.805,1094,1.605,1095,1.805,1096,1.605,1097,1.605,1098,1.605,1099,1.805,1100,2.359,1101,1.605,1102,1.805,1103,1.446,1104,1.605,1105,1.605,1106,1.805,1107,2.477,1108,2.477,1109,2.477,1110,2.477,1111,2.072,1112,2.072,1113,2.477,1114,2.477,1115,2.477,1116,2.477,1117,2.477,1118,2.477,1119,3.641,1120,2.477,1121,2.477,1122,2.477,1123,3.641]],["title/classes/LHCbLoader.html",[0,0.289,1124,2.328]],["body/classes/LHCbLoader.html",[0,0.267,2,0.235,3,0.38,4,0.235,5,0.166,8,0.484,12,1.431,15,1.108,17,0.166,18,0.38,19,1.016,28,1.567,30,1.48,36,0.589,38,0.643,39,0.032,40,0.564,41,0.366,42,0.628,43,1.301,44,2.171,45,0.781,46,1.51,51,1.431,55,0.847,67,1.101,68,1.551,72,0.501,76,1.108,130,1.855,134,1.56,139,0.432,148,1.108,152,1.738,155,0.235,156,0.235,161,0.545,177,0.741,200,2.214,212,2.874,319,1.551,350,1.717,389,0.014,390,0.02,391,0.014,395,1.202,404,2.408,405,2.774,407,1.707,415,1.321,474,2.295,475,0.734,487,1.166,500,1.995,501,1.83,502,1.307,509,1.125,519,3.096,530,1.995,533,1.717,575,1.202,623,1.307,625,1.995,627,2.404,628,2.404,629,2.52,630,2.978,631,2.404,632,1.717,633,2.73,634,2.302,635,2.793,636,2.302,637,1.939,639,2.184,640,1.56,641,1.83,642,1.717,643,1.425,644,1.717,645,1.717,646,1.83,647,2.184,648,1.307,649,1.717,650,1.108,651,1.56,652,1.717,653,1.717,654,1.307,656,1.425,657,1.56,659,2.966,660,2.52,664,2.461,665,2.495,667,2.408,671,2.73,672,1.995,673,1.995,674,2.184,675,2.184,676,1.717,681,1.56,682,2.302,696,1.307,782,1.995,902,3.001,903,3.164,912,1.56,993,1.022,1000,1.425,1001,1.56,1003,2.404,1008,2.302,1016,3.001,1020,3.751,1025,2.669,1026,3.64,1027,2.669,1028,2.669,1029,2.669,1030,2.669,1035,4.537,1036,2.143,1037,2.143,1038,1.906,1039,2.143,1040,1.906,1063,1.906,1064,3.337,1065,2.669,1066,2.143,1067,2.404,1068,1.906,1069,1.717,1070,1.906,1071,1.717,1072,2.669,1073,2.669,1074,1.906,1075,1.906,1076,2.669,1077,2.669,1078,2.669,1079,1.717,1080,1.906,1081,2.143,1082,3.08,1083,3.08,1084,1.906,1085,1.906,1086,1.56,1087,1.717,1088,2.143,1089,2.143,1090,2.143,1091,3.512,1092,2.143,1093,2.143,1094,1.906,1095,2.143,1096,1.906,1097,1.906,1098,1.906,1099,2.143,1100,2.669,1101,1.906,1102,2.143,1103,1.717,1104,1.906,1105,1.906,1106,2.143,1124,3.001,1125,4.698,1126,5.42,1127,3.445,1128,2.942,1129,2.461,1130,4.119,1131,2.942,1132,4.119,1133,2.942,1134,2.461,1135,2.942,1136,2.461,1137,2.942,1138,2.942,1139,4.119,1140,2.942,1141,4.119]],["title/classes/PhoenixLoader.html",[0,0.289,519,1.548]],["body/classes/PhoenixLoader.html",[0,0.187,2,0.165,3,0.374,4,0.165,5,0.117,8,0.436,12,1.509,15,1.196,17,0.117,18,0.293,19,0.885,28,1.496,32,0.918,36,0.537,38,0.604,39,0.032,40,0.514,41,0.359,42,0.573,43,1.264,44,2.217,45,0.759,46,1.364,51,1.509,53,1.006,55,0.781,67,1.006,68,1.196,72,0.465,76,1.196,77,0.918,83,0.867,93,1,98,1.206,116,1.684,121,0.688,130,1.876,134,1.095,136,0.918,139,0.781,148,1.635,152,1.937,153,0.736,155,0.165,156,0.475,161,0.841,170,0.512,177,0.799,190,0.867,200,2.106,212,3.005,217,1.206,226,1.728,241,1.728,272,1.206,300,0.564,304,1.728,350,1.854,351,1.095,389,0.01,390,0.015,391,0.01,395,1.298,399,1.206,404,1.411,405,3.009,407,1.724,415,1.018,474,1.915,475,0.689,478,2.258,487,1.148,496,1.854,500,1.538,501,1.411,502,1.719,505,1.505,509,1.186,519,1.538,521,1.728,522,1.339,530,2.103,533,1.854,575,1.581,623,0.918,625,1.874,627,1.854,628,1.854,629,2.051,630,2.303,631,1.854,632,1.854,633,2.821,634,2.397,635,2.879,636,2.397,637,2.003,639,2.303,640,1.684,641,1.719,642,1.854,643,1.874,644,1.854,645,1.854,646,1.929,647,2.051,648,1.411,649,1.854,650,1.196,651,1.684,652,1.854,653,1.854,654,1.411,655,1.206,656,1.538,657,1.095,659,2.945,660,3.05,661,1.206,665,2.518,667,2.198,671,2.733,672,1.538,673,1.538,674,2.051,675,2.485,676,1.206,680,3.606,681,1.095,682,2.397,696,0.918,779,1.206,780,1.206,782,2.103,858,1.206,898,2.314,903,1.854,912,1.095,993,1.344,1000,1.538,1001,2.051,1003,3.357,1008,2.397,1025,2.507,1026,3.448,1027,2.058,1028,2.058,1029,2.058,1030,2.058,1038,2.058,1040,2.058,1063,1.339,1064,3.536,1065,3.207,1067,2.535,1068,3.037,1069,1.854,1070,2.058,1071,1.854,1072,2.814,1073,2.814,1074,2.058,1075,2.058,1076,2.814,1077,3.673,1078,3.207,1079,2.535,1080,1.339,1082,3.448,1083,3.34,1084,2.058,1085,2.058,1086,1.684,1087,1.854,1091,3.34,1094,2.058,1096,2.814,1097,2.058,1098,2.058,1100,2.814,1101,1.339,1103,1.206,1104,1.339,1105,1.339,1134,1.728,1136,1.728,1142,4.925,1143,3.176,1144,2.066,1145,2.066,1146,2.066,1147,2.066,1148,2.066,1149,2.066,1150,2.066,1151,2.066,1152,2.066,1153,2.066,1154,2.066,1155,2.066,1156,2.066,1157,2.066,1158,2.066,1159,1.728,1160,1.728,1161,2.066,1162,2.066,1163,2.066,1164,1.728,1165,2.066,1166,2.066,1167,2.066,1168,2.066,1169,3.176,1170,3.236,1171,3.176,1172,2.066,1173,2.066,1174,3.176,1175,3.869,1176,2.066,1177,2.066,1178,2.066,1179,2.066,1180,2.066,1181,2.066,1182,2.066,1183,2.066,1184,2.066,1185,2.066,1186,2.066,1187,1.505,1188,2.066,1189,3.176,1190,2.066,1191,2.066,1192,2.066,1193,2.066,1194,2.066,1195,2.066,1196,2.066,1197,4.343,1198,2.066,1199,3.176,1200,2.066,1201,2.066,1202,2.066,1203,2.066,1204,2.066,1205,2.066,1206,2.066,1207,2.066,1208,2.066,1209,2.066,1210,4.343,1211,2.066,1212,3.176,1213,2.066,1214,2.066,1215,2.066,1216,2.066,1217,2.066,1218,2.066,1219,1.728,1220,2.066,1221,2.066,1222,3.176,1223,2.066,1224,2.066,1225,2.066,1226,2.066,1227,2.066,1228,1.728,1229,2.066,1230,1.728,1231,2.066,1232,2.066,1233,2.066,1234,3.176,1235,2.066,1236,2.066,1237,2.066,1238,3.176,1239,2.066,1240,3.176,1241,2.066,1242,2.066,1243,2.066,1244,2.656,1245,2.066,1246,1.728,1247,2.066,1248,2.066,1249,2.066,1250,2.066,1251,2.066,1252,3.176,1253,2.066,1254,3.176,1255,2.066,1256,2.066,1257,2.066,1258,2.656,1259,2.066,1260,2.066,1261,2.066,1262,1.339,1263,1.505,1264,2.066,1265,2.066,1266,2.066,1267,2.066,1268,2.066,1269,2.066,1270,2.066,1271,3.869,1272,3.176,1273,3.176,1274,2.066,1275,2.066,1276,2.066,1277,3.869,1278,3.176,1279,2.066,1280,1.728,1281,2.066,1282,2.066,1283,2.066,1284,2.066,1285,2.066,1286,2.066,1287,3.176,1288,2.066,1289,2.066,1290,2.066,1291,2.066,1292,2.066,1293,2.066,1294,2.066,1295,2.066,1296,2.066,1297,2.066]],["title/classes/PhoenixMenuNode.html",[0,0.289,502,1.419]],["body/classes/PhoenixMenuNode.html",[0,0.251,2,0.221,3,0.221,4,0.221,5,0.157,8,0.44,17,0.157,18,0.364,28,1.158,30,1.078,36,0.582,38,0.556,39,0.032,40,0.589,41,0.359,42,0.556,48,3.653,53,0.915,55,0.851,67,1.402,68,2.134,72,0.471,82,1.276,83,1.696,121,0.407,137,2.019,155,0.221,156,0.488,161,0.609,170,0.609,177,0.994,190,1.078,256,2.368,277,2.013,300,1.504,319,1.043,339,1.912,349,3.171,389,0.013,390,0.019,391,0.013,415,1.858,470,2.668,475,0.703,487,1.242,488,2.338,496,3.792,502,2.849,504,1.796,505,4.858,522,4.112,592,2.877,783,2.093,950,5.365,993,1.742,1086,3.269,1230,5.283,1298,5.307,1299,2.318,1300,5.3,1301,4.6,1302,4.6,1303,5.898,1304,5.328,1305,4.6,1306,6.165,1307,5.156,1308,4.6,1309,3.949,1310,3.949,1311,3.949,1312,3.949,1313,5.014,1314,2.318,1315,3.949,1316,5.796,1317,2.771,1318,2.771,1319,2.771,1320,2.771,1321,2.771,1322,2.771,1323,3.949,1324,2.771,1325,2.771,1326,2.771,1327,3.949,1328,3.949,1329,2.771,1330,3.949,1331,2.771,1332,5.014,1333,2.771,1334,3.949,1335,2.771,1336,3.949,1337,2.771,1338,3.949,1339,3.949,1340,3.949,1341,3.949,1342,2.771,1343,2.318,1344,2.318,1345,2.771,1346,4.6,1347,2.771,1348,3.949,1349,2.771,1350,2.771,1351,2.771,1352,2.771,1353,2.771,1354,2.771,1355,2.771,1356,2.771,1357,2.771,1358,2.771,1359,2.318,1360,2.771,1361,2.771,1362,2.771,1363,2.771,1364,2.771,1365,2.771,1366,2.771,1367,2.771]],["title/classes/PhoenixObjects.html",[0,0.289,399,1.865]],["body/classes/PhoenixObjects.html",[0,0.246,2,0.217,3,0.42,4,0.217,5,0.153,8,0.437,17,0.153,18,0.359,19,0.805,36,0.485,38,0.678,39,0.032,40,0.485,41,0.297,42,0.552,44,1.465,45,0.461,72,0.469,97,1.978,111,2.411,115,1.585,116,1.439,119,3.254,121,0.933,127,2.203,130,1.832,133,4.338,134,2.987,139,0.571,141,2.27,142,2.835,143,1.206,144,2.835,145,2.947,146,2.27,147,3.254,148,2.242,149,2.27,152,0.87,153,0.629,155,0.217,156,0.397,161,0.866,164,2.27,166,3.254,170,0.763,177,1.25,186,2.947,190,1.242,217,3.364,218,1.759,219,3.322,238,1.315,239,4.154,255,2.27,262,2.835,266,2.835,272,2.271,277,1.58,281,3.803,295,2.27,297,2.27,300,1.063,330,3.219,335,3.906,356,1.978,357,1.978,385,1.978,389,0.013,390,0.018,391,0.013,394,1.978,395,1.59,396,2.271,399,2.271,400,2.529,404,2.607,407,1.737,411,1.978,412,1.978,415,1.248,431,1.59,452,2.27,455,3.219,665,2.206,781,1.315,843,2.947,861,3.735,862,1.585,917,1.759,924,3.803,973,2.27,1164,2.27,1244,3.803,1246,4.713,1258,3.254,1262,3.219,1263,3.619,1368,4.576,1369,3.891,1370,3.891,1371,3.891,1372,3.891,1373,3.891,1374,3.891,1375,2.715,1376,3.891,1377,2.715,1378,5.472,1379,2.715,1380,2.715,1381,3.891,1382,3.891,1383,2.715,1384,3.891,1385,2.715,1386,5.635,1387,4.548,1388,2.715,1389,2.715,1390,4.548,1391,2.715,1392,3.891,1393,4.548,1394,2.715,1395,1.759,1396,2.715,1397,1.978,1398,2.715,1399,2.715,1400,2.715,1401,2.715,1402,2.27,1403,3.891,1404,2.715,1405,4.967,1406,5.258,1407,2.715,1408,2.715,1409,2.715,1410,2.715,1411,2.715,1412,2.715,1413,4.548,1414,2.27,1415,4.548,1416,2.27,1417,5.258,1418,3.803,1419,4.548,1420,3.254,1421,2.715,1422,2.715,1423,3.891,1424,2.715,1425,2.715,1426,2.715,1427,3.891,1428,2.715,1429,2.715,1430,2.715,1431,2.715,1432,4.548,1433,2.715,1434,2.715,1435,2.715,1436,2.715,1437,2.715,1438,2.715,1439,4.967,1440,2.27,1441,2.715,1442,2.715,1443,2.715,1444,2.715,1445,4.548,1446,2.715,1447,2.715,1448,2.715,1449,2.715,1450,2.715,1451,3.891,1452,2.715,1453,2.715,1454,2.715,1455,2.715,1456,2.715,1457,5.258,1458,2.715,1459,2.715,1460,4.967,1461,2.715,1462,2.715,1463,2.715,1464,2.715,1465,3.891,1466,3.891,1467,1.978,1468,2.715,1469,2.715,1470,2.715,1471,3.891,1472,3.891,1473,3.891,1474,3.891,1475,3.891,1476,2.715,1477,2.715,1478,2.715,1479,2.715,1480,2.715,1481,2.715,1482,2.715,1483,2.715,1484,2.715,1485,2.715,1486,2.715,1487,2.715,1488,2.715,1489,3.891,1490,2.715,1491,2.715,1492,2.715,1493,2.715,1494,2.715]],["title/classes/PresetView.html",[0,0.289,506,2.071]],["body/classes/PresetView.html",[0,0.371,2,0.327,3,0.327,4,0.327,5,0.231,8,0.409,17,0.231,18,0.473,19,1.035,30,1.117,34,2.928,36,0.569,38,0.43,39,0.032,40,0.596,41,0.342,42,0.43,53,1.401,55,0.601,67,0.948,72,0.409,96,2.74,155,0.327,156,0.447,170,0.541,185,4.909,319,2.322,339,2.483,389,0.019,390,0.024,391,0.019,472,4.785,473,2.98,475,0.913,487,1.267,506,3.322,896,3.426,1304,5.509,1314,4.288,1343,3.421,1344,4.683,1495,5.235,1496,3.421,1497,4.829,1498,4.091,1499,4.091,1500,3.421,1501,6.329,1502,5.6,1503,5.87,1504,5.127,1505,5.87,1506,4.091,1507,4.091,1508,4.091,1509,4.091,1510,4.091,1511,4.091,1512,4.091]],["title/classes/PrettySymbols.html",[0,0.289,1513,2.071]],["body/classes/PrettySymbols.html",[0,0.343,2,0.302,3,0.302,4,0.302,5,0.214,8,0.431,17,0.214,18,0.45,19,0.876,36,0.498,38,0.646,39,0.032,40,0.45,41,0.334,42,0.513,51,1.315,72,0.431,82,0.877,83,1.034,93,1.834,121,0.717,127,1.834,130,1.921,155,0.302,156,0.472,161,0.781,170,0.715,253,3.167,339,1.834,389,0.018,390,0.023,391,0.018,395,1.994,400,2.573,455,2.454,475,0.87,487,1.113,661,2.211,787,3.163,788,2.849,789,2.849,790,2.849,993,1.315,1069,3.529,1359,4.772,1397,2.759,1467,3.556,1513,3.163,1514,4.772,1515,3.167,1516,6.489,1517,5.057,1518,4.518,1519,4.882,1520,4.882,1521,4.083,1522,5.706,1523,4.882,1524,4.882,1525,4.882,1526,5.706,1527,5.706,1528,5.706,1529,5.706,1530,4.882,1531,3.787,1532,4.882,1533,3.163,1534,3.787,1535,6.233,1536,4.882,1537,4.882,1538,3.787,1539,6.152,1540,5.906,1541,5.402,1542,3.787,1543,3.787,1544,3.787,1545,3.787,1546,3.787,1547,3.787,1548,5.402,1549,3.787,1550,4.882,1551,3.787,1552,3.787,1553,3.787,1554,4.882,1555,3.787,1556,3.787,1557,3.167,1558,3.787,1559,3.787,1560,3.167,1561,3.787,1562,5.706,1563,3.787,1564,3.787,1565,3.787,1566,3.167,1567,4.882,1568,3.787,1569,3.787,1570,3.787,1571,3.787,1572,3.787,1573,3.787,1574,3.787]],["title/classes/RKHelper.html",[0,0.289,1395,2.071]],["body/classes/RKHelper.html",[0,0.337,2,0.297,3,0.297,4,0.297,5,0.21,8,0.428,14,3.006,17,0.21,18,0.523,19,0.783,36,0.445,38,0.507,39,0.032,40,0.445,41,0.321,42,0.507,43,1.118,45,0.571,51,1.677,53,1.118,55,0.547,67,1.241,72,0.501,82,1.241,83,1.017,94,1.974,96,2.145,121,0.709,127,2.338,133,4.13,136,2.145,139,0.709,143,2.609,153,0.862,155,0.297,156,0.428,161,0.811,170,0.639,171,2.173,177,1.215,212,3.293,217,3.625,238,2.338,277,1.677,300,1.644,374,2.56,389,0.018,390,0.023,391,0.018,400,2.459,444,3.114,455,2.412,488,1.402,625,1.803,665,2.145,779,2.173,780,2.173,781,2.967,788,2.173,789,2.173,790,3.576,794,3.674,855,2.412,862,3.309,863,3.128,864,3.128,865,3.128,905,2.712,1228,3.114,1395,3.128,1397,3.517,1402,4.741,1414,4.038,1416,4.038,1418,4.038,1420,3.114,1467,3.517,1521,4.038,1533,3.128,1560,4.038,1566,3.114,1575,4.481,1576,3.114,1577,5.358,1578,4.828,1579,3.723,1580,3.723,1581,4.828,1582,4.828,1583,4.828,1584,4.828,1585,3.723,1586,5.358,1587,3.723,1588,3.723,1589,3.723,1590,3.723,1591,3.723,1592,3.723,1593,3.723,1594,5.358,1595,3.114,1596,3.723,1597,3.723,1598,5.358,1599,3.723,1600,4.828,1601,3.723,1602,3.723,1603,3.723,1604,3.723,1605,3.723,1606,3.723,1607,3.723,1608,3.723,1609,3.723,1610,3.723,1611,3.723,1612,3.723,1613,3.723,1614,3.723,1615,3.114,1616,3.723,1617,3.723,1618,3.723,1619,3.723,1620,3.723,1621,3.723,1622,3.723,1623,3.723,1624,3.723]],["title/classes/RendererManager.html",[0,0.289,35,2.071]],["body/classes/RendererManager.html",[0,0.209,2,0.184,3,0.184,4,0.184,5,0.131,7,1.026,8,0.476,9,2.189,10,2.227,12,1.201,15,2.074,17,0.234,18,0.319,19,1.018,28,1.558,30,0.631,32,2.502,35,2.24,36,0.579,37,1.932,38,0.626,39,0.032,40,0.544,41,0.346,42,0.619,45,0.652,49,2.018,50,3.871,51,1.439,53,0.535,55,0.855,60,3.569,72,0.503,77,1.536,82,0.96,83,1.538,113,2.892,121,0.508,130,1.023,139,0.508,153,0.801,155,0.184,156,0.485,161,0.729,170,0.709,177,0.582,190,0.944,218,2.98,256,0.944,277,1.439,300,0.944,319,2.22,330,2.24,348,4.013,349,1.833,351,2.74,389,0.011,390,0.016,391,0.011,396,2.018,475,0.616,476,3.846,486,2.892,487,1.008,488,2.22,490,2.684,491,3.846,492,3.587,509,1.411,515,2.227,569,3.35,571,4.801,576,4.869,582,2.892,592,2.519,612,1.932,635,1.119,646,1.84,667,2.788,682,2.227,706,2.196,729,2.892,889,2.519,890,1.683,891,1.683,993,1.201,1049,5.033,1187,2.519,1497,2.519,1625,5.27,1626,4.143,1627,4.143,1628,4.924,1629,6.345,1630,3.457,1631,3.457,1632,4.599,1633,4.599,1634,4.599,1635,4.599,1636,4.599,1637,3.457,1638,3.457,1639,3.457,1640,3.457,1641,3.457,1642,3.457,1643,3.457,1644,3.457,1645,5.306,1646,4.796,1647,3.457,1648,4.71,1649,3.457,1650,3.457,1651,2.31,1652,3.457,1653,2.31,1654,3.457,1655,3.457,1656,2.31,1657,4.607,1658,4.607,1659,2.31,1660,2.31,1661,2.31,1662,4.599,1663,2.31,1664,3.457,1665,2.31,1666,3.457,1667,3.457,1668,4.607,1669,2.31,1670,3.457,1671,2.31,1672,3.457,1673,2.31,1674,3.457,1675,2.31,1676,3.457,1677,3.465,1678,2.31,1679,3.465,1680,3.457,1681,3.457,1682,2.31,1683,3.457,1684,3.457,1685,2.31,1686,3.457,1687,5.168,1688,2.31,1689,3.457,1690,4.599,1691,4.599,1692,4.599,1693,3.457,1694,2.31,1695,2.31,1696,2.31,1697,2.31,1698,3.457,1699,4.143,1700,2.31,1701,2.31,1702,2.31,1703,2.31,1704,2.31,1705,2.31,1706,2.31,1707,2.31,1708,2.31,1709,2.31,1710,2.31,1711,2.31,1712,2.31,1713,2.31,1714,3.457,1715,2.31,1716,2.31,1717,2.31,1718,2.31,1719,3.457,1720,4.599,1721,2.31,1722,2.31,1723,2.31,1724,2.31,1725,3.457,1726,2.31,1727,2.31,1728,2.31,1729,3.457]],["title/classes/RungeKutta.html",[0,0.289,781,1.548]],["body/classes/RungeKutta.html",[0,0.439,2,0.244,3,0.244,4,0.244,5,0.173,8,0.387,13,2.242,14,2.242,17,0.173,18,0.39,36,0.39,38,0.444,39,0.032,40,0.39,41,0.274,42,0.444,43,0.98,53,1.501,55,0.449,67,1.123,72,0.474,77,1.357,82,0.708,83,0.834,93,2.048,94,2.775,96,2.712,99,1.783,116,2.913,121,0.449,127,2.535,129,2.74,136,1.878,139,0.449,143,2.886,153,0.708,155,0.244,156,0.474,161,0.771,170,0.559,188,3.297,190,1.155,229,3.055,238,2.048,256,1.248,277,1.469,300,1.429,321,2.74,389,0.02,390,0.02,391,0.015,400,2.322,407,1.549,431,2.322,475,0.753,488,1.15,650,1.97,772,3.142,773,1.979,778,3.813,779,3.68,780,3.68,781,2.048,782,2.048,783,3.297,784,3.08,785,3.08,786,3.08,787,3.142,788,3.318,789,3.055,790,3.318,791,2.225,792,2.225,793,2.225,794,3.561,795,2.225,796,2.225,797,2.225,798,2.225,799,3.813,800,3.533,801,3.08,802,3.08,803,4.245,804,4.327,805,3.813,806,3.813,807,2.225,808,2.225,809,2.225,810,4.245,811,2.225,812,2.225,813,4.327,814,2.225,815,2.225,816,3.533,817,4.245,818,2.225,819,2.225,820,2.225,821,3.08,822,2.225,823,2.225,824,2.225,825,2.225,826,2.225,827,2.225,828,2.225,829,2.225,830,2.225,831,2.225,832,2.225,833,2.225,834,2.225,835,2.225,836,2.225,837,2.225,838,2.225,839,3.533,840,3.08,841,2.225,842,3.533,843,1.979,844,3.533,845,3.08,846,2.225,847,1.979,848,2.225,849,2.225,850,2.225,851,4.003,852,3.813,853,3.813,854,3.813,855,3.561,856,3.391,857,4.003,858,2.468,859,3.813,860,2.468,861,2.74,862,3.055,863,2.74,864,2.74,865,2.74,866,3.08,867,3.08,868,2.225,869,2.225,870,2.225,871,2.225,872,2.225,873,2.225,874,2.225,1533,1.979,1730,3.055,1731,3.055,1732,3.055]],["title/classes/ScriptLoader.html",[0,0.289,1733,2.328]],["body/classes/ScriptLoader.html",[0,0.345,2,0.305,3,0.305,4,0.305,5,0.216,8,0.433,17,0.216,18,0.452,19,0.795,36,0.452,38,0.515,39,0.032,40,0.452,41,0.277,42,0.601,45,0.58,46,1.325,55,0.796,67,0.883,68,1.436,69,2.862,72,0.433,76,1.846,82,0.883,83,1.041,121,0.56,155,0.305,156,0.457,161,0.783,170,0.504,177,0.96,222,3.189,274,4.101,300,1.339,389,0.018,390,0.023,391,0.018,400,2.475,474,2.003,487,1.181,492,3.572,501,2.408,534,4.101,623,1.694,641,1.694,698,3.992,703,3.536,896,3.339,993,1.325,1018,3.643,1032,3.189,1071,2.862,1307,4.101,1733,3.572,1734,3.948,1735,6.557,1736,5.721,1737,4.904,1738,5.066,1739,4.904,1740,4.904,1741,4.904,1742,4.904,1743,4.904,1744,4.904,1745,6.305,1746,5.721,1747,5.42,1748,3.814,1749,5.721,1750,4.904,1751,4.904,1752,4.904,1753,4.904,1754,5.721,1755,3.189,1756,3.814,1757,4.904,1758,3.814,1759,3.814,1760,3.814,1761,3.814,1762,3.814,1763,3.814,1764,3.814,1765,3.814,1766,3.814,1767,3.814,1768,3.814,1769,3.814,1770,3.814,1771,4.904,1772,3.814,1773,3.814,1774,3.814,1775,3.814,1776,3.814,1777,3.814,1778,3.814,1779,3.814,1780,3.814,1781,4.904,1782,3.814,1783,5.721,1784,3.814,1785,3.814,1786,3.814,1787,3.814,1788,3.814,1789,3.814,1790,3.814]],["title/classes/SelectionManager.html",[0,0.289,1791,2.328]],["body/classes/SelectionManager.html",[0,0.195,2,0.172,3,0.261,4,0.172,5,0.122,7,0.955,8,0.417,9,2.339,10,2.435,12,1.137,15,1.669,17,0.122,18,0.302,19,0.971,28,1.648,30,1.303,32,2.794,34,2.945,36,0.573,38,0.528,39,0.032,40,0.497,41,0.344,42,0.501,43,1.027,44,1.797,45,0.749,46,1.248,47,2.985,49,1.911,51,1.137,53,0.498,55,0.791,67,1.304,69,2.935,72,0.45,76,1.669,82,1.027,83,1.211,121,0.701,130,1.905,139,0.701,148,1.893,152,1.05,153,0.498,155,0.172,156,0.45,161,0.768,170,0.587,171,3.287,177,0.824,186,1.393,190,0.894,208,3.663,218,2.122,277,0.747,300,1.373,319,1.893,349,1.736,389,0.01,390,0.016,391,0.01,404,0.955,407,1.312,431,1.338,475,0.79,487,1.146,488,1.797,494,3.092,500,1.041,509,1.649,515,2.435,558,3.846,560,3.991,561,3.925,562,4.205,563,3.708,564,3.708,572,1.798,575,1.812,585,1.911,586,2.738,587,3.708,588,3.663,589,4.205,594,1.798,596,2.738,603,2.738,604,1.798,637,2.235,641,0.955,650,1.233,655,1.911,656,2.147,661,2.315,679,3.23,705,1.798,724,1.798,847,2.122,917,2.122,993,0.747,1000,2.435,1001,2.351,1006,2.889,1008,2.147,1262,4.028,1263,4.229,1280,1.798,1440,1.798,1513,1.393,1517,1.798,1533,2.57,1657,4.709,1658,3.708,1791,2.385,1792,5.221,1793,3.966,1794,3.966,1795,3.966,1796,3.966,1797,3.966,1798,3.966,1799,4.205,1800,4.434,1801,4.434,1802,3.708,1803,3.274,1804,3.966,1805,3.274,1806,3.274,1807,3.274,1808,2.738,1809,2.738,1810,3.274,1811,3.274,1812,3.274,1813,3.274,1814,3.274,1815,2.15,1816,4.913,1817,3.274,1818,2.385,1819,2.15,1820,3.274,1821,3.274,1822,3.274,1823,2.15,1824,5.875,1825,5.028,1826,2.15,1827,4.434,1828,2.15,1829,2.15,1830,2.15,1831,2.15,1832,2.15,1833,2.738,1834,4.506,1835,2.15,1836,1.798,1837,2.738,1838,4.434,1839,2.15,1840,2.738,1841,2.738,1842,3.274,1843,3.274,1844,2.15,1845,2.15,1846,3.274,1847,2.15,1848,3.966,1849,3.274,1850,3.274,1851,2.15,1852,3.274,1853,2.15,1854,3.966,1855,2.15,1856,2.15,1857,2.15,1858,2.15,1859,2.15,1860,2.15,1861,3.966,1862,2.15,1863,2.15,1864,2.15,1865,2.15,1866,1.798,1867,2.15,1868,2.15,1869,2.15,1870,2.15,1871,2.15,1872,2.15,1873,2.15,1874,5.028,1875,2.15,1876,3.274,1877,2.15,1878,3.966,1879,2.15,1880,3.274,1881,2.15,1882,2.15,1883,2.15,1884,3.966,1885,4.772,1886,2.15,1887,2.15,1888,2.15,1889,2.15,1890,3.274,1891,2.15,1892,2.15,1893,2.15,1894,2.15,1895,2.15,1896,2.15,1897,2.15,1898,2.15,1899,2.15,1900,2.15,1901,2.15,1902,2.15,1903,2.15,1904,3.274,1905,2.15,1906,2.15,1907,1.798,1908,2.15,1909,2.15,1910,2.15,1911,2.15,1912,2.15,1913,3.274,1914,2.15,1915,2.15,1916,2.15,1917,2.15,1918,2.15,1919,2.15,1920,2.15,1921,2.15,1922,2.15,1923,2.15,1924,2.15,1925,2.15,1926,2.15,1927,2.15,1928,2.15,1929,2.15,1930,2.15,1931,2.15]],["title/classes/State.html",[0,0.289,783,1.694]],["body/classes/State.html",[0,0.387,2,0.247,3,0.247,4,0.247,5,0.175,8,0.247,13,1.641,14,1.641,17,0.175,36,0.549,39,0.032,41,0.337,43,0.717,53,1.49,62,2.255,67,0.717,72,0.42,77,1.375,82,1.38,83,1.627,93,1.499,94,2.589,96,2.598,99,1.807,115,1.807,116,2.927,121,0.717,127,2.674,129,2.765,136,1.375,139,0.455,143,2.866,153,0.717,155,0.247,156,0.476,161,0.774,170,0.564,177,1.437,188,3.159,190,1.165,229,3.072,238,1.499,256,1.265,262,3.109,277,1.075,300,1.165,321,2.765,389,0.02,390,0.02,391,0.015,400,1.743,407,1.263,431,2.332,475,0.87,488,1.165,650,1.607,772,3.919,773,2.006,778,3.109,779,3.572,780,3.572,781,1.499,782,1.499,783,3.206,784,2.255,785,2.255,786,2.255,787,3.164,788,3.331,789,3.072,790,3.331,791,2.255,792,2.255,793,2.255,794,3.578,795,2.255,796,2.255,797,2.255,798,2.255,799,3.834,800,3.558,801,3.109,802,3.109,803,4.261,804,4.341,805,3.834,806,3.834,807,2.255,808,2.255,809,2.255,810,4.261,811,2.255,812,2.255,813,4.341,814,2.255,815,2.255,816,3.558,817,4.261,818,2.255,819,2.255,820,2.255,821,3.109,822,2.255,823,2.255,824,2.255,825,2.255,826,2.255,827,2.255,828,2.255,829,2.255,830,2.255,831,2.255,832,2.255,833,2.255,834,2.255,835,2.255,836,2.255,837,2.255,838,2.255,839,3.558,840,3.109,841,2.255,842,3.558,843,2.006,844,3.558,845,3.109,846,2.255,847,2.006,848,2.255,849,2.255,850,2.255,851,3.109,852,3.109,853,3.109,854,3.109,855,3.164,856,3.164,857,3.558,858,2.491,859,3.109,860,2.491,861,2.765,862,2.491,863,2.006,864,2.006,865,2.006,866,2.255,867,3.834,868,2.255,869,2.255,870,2.255,871,2.255,872,2.255,873,2.255,874,2.255,1932,4.267,1933,4.267,1934,4.267,1935,4.267,1936,3.096,1937,3.096,1938,3.096,1939,3.096,1940,3.096,1941,3.096,1942,3.096,1943,3.096,1944,3.096,1945,2.589]],["title/classes/TrackmlLoader.html",[0,0.289,1946,2.328]],["body/classes/TrackmlLoader.html",[0,0.257,2,0.226,3,0.321,4,0.226,5,0.16,8,0.494,12,1.394,15,1.068,17,0.16,18,0.37,19,1.027,28,1.608,30,1.272,36,0.593,38,0.654,39,0.032,40,0.575,41,0.369,42,0.645,43,1.422,44,2.149,45,0.761,46,1.48,51,1.394,53,0.657,55,0.871,67,1.079,68,1.511,72,0.498,76,1.068,114,4.876,130,1.845,134,3.187,139,0.416,148,1.068,152,1.714,155,0.226,156,0.226,161,0.375,190,0.774,200,2.07,212,2.686,350,1.655,389,0.013,390,0.019,391,0.013,395,1.159,404,2.375,405,2.719,407,1.689,411,2.924,415,1.287,474,2.07,475,0.715,487,1.186,500,1.944,501,1.783,502,1.26,509,1.096,519,3.082,530,1.944,533,1.655,575,1.159,623,1.26,625,1.944,627,2.343,628,2.343,629,2.47,630,2.47,631,2.343,632,1.655,633,2.686,634,2.256,635,2.764,636,2.256,637,1.907,639,2.128,640,1.503,641,1.783,642,1.655,643,1.373,644,1.655,645,1.655,646,1.783,647,2.128,648,1.26,649,1.655,650,1.068,651,1.503,652,1.655,653,1.655,654,1.26,656,1.373,657,1.503,659,2.945,660,2.47,665,2.466,667,2.375,670,2.372,671,2.128,672,1.373,673,1.373,674,1.503,675,1.503,676,1.655,681,1.503,682,2.256,696,2.466,782,1.944,903,3.24,912,1.503,993,0.985,1000,1.373,1001,1.503,1003,2.343,1008,2.256,1016,2.924,1020,2.924,1025,2.601,1026,3.597,1027,2.601,1028,2.601,1029,2.601,1030,2.601,1035,4.509,1036,2.066,1037,2.066,1038,1.837,1039,2.066,1040,1.837,1063,1.837,1064,3.283,1065,2.601,1066,2.066,1067,2.343,1068,1.837,1069,1.655,1070,1.837,1071,1.655,1072,2.601,1073,2.601,1074,1.837,1075,1.837,1076,2.601,1077,2.601,1078,2.601,1079,1.655,1080,1.837,1081,2.066,1082,3.019,1083,3.019,1084,1.837,1085,1.837,1086,1.503,1087,1.655,1088,2.066,1089,2.066,1090,2.066,1091,3.464,1092,2.066,1093,2.066,1094,1.837,1095,2.066,1096,1.837,1097,1.837,1098,1.837,1099,2.066,1100,2.601,1101,1.837,1102,2.066,1103,1.655,1104,1.837,1105,1.837,1106,2.066,1127,2.372,1946,2.924,1947,4.959,1948,5.066,1949,4.659,1950,4.659,1951,4.659,1952,4.014,1953,4.014,1954,4.014,1955,4.014,1956,4.014,1957,2.836,1958,4.014,1959,2.836,1960,2.836,1961,2.836,1962,5.066,1963,2.836,1964,4.014,1965,2.836,1966,5.066,1967,2.836,1968,2.836,1969,2.836,1970,2.836,1971,2.836,1972,2.836,1973,2.836,1974,2.836,1975,2.836,1976,2.836,1977,2.836,1978,2.836]],["title/classes/VRManager.html",[0,0.289,1979,2.328]],["body/classes/VRManager.html",[0,0.253,2,0.223,3,0.223,4,0.223,5,0.158,7,1.24,8,0.424,9,1.621,12,1.378,13,2.104,17,0.158,18,0.366,19,1.03,28,1.629,32,1.763,34,3.184,36,0.577,38,0.528,39,0.032,40,0.464,41,0.346,42,0.485,43,1.165,45,0.47,47,2.104,48,2.891,50,3.497,53,1.07,55,0.834,67,0.919,68,1.494,69,2.936,72,0.454,76,2.186,82,1.165,83,1.373,86,3.862,95,2.033,96,1.24,100,4.023,121,0.678,128,2.891,137,2.033,139,0.41,143,2.36,152,1.943,153,0.646,155,0.223,156,0.441,161,0.611,170,0.525,171,3.316,188,1.479,254,3.319,256,1.621,319,2.224,348,2.033,351,2.448,374,2.667,385,2.033,389,0.013,390,0.019,391,0.013,396,2.695,400,1.887,407,1.489,475,0.707,487,0.774,490,1.629,509,1.084,515,2.674,571,4.023,643,2.237,646,1.763,856,3.966,889,2.033,890,2.033,891,2.033,1518,3.862,1808,2.334,1836,2.334,1945,2.334,1979,2.891,1980,5.262,1981,5.569,1982,4.618,1983,5.681,1984,4.618,1985,4.856,1986,4.618,1987,4.618,1988,4.618,1989,4.618,1990,5.03,1991,3.968,1992,5.03,1993,3.968,1994,5.03,1995,3.968,1996,2.791,1997,2.791,1998,5.314,1999,5.437,2000,2.791,2001,2.791,2002,2.891,2003,3.968,2004,2.791,2005,2.791,2006,3.968,2007,2.791,2008,3.968,2009,3.968,2010,3.968,2011,5.806,2012,2.791,2013,3.968,2014,2.791,2015,3.968,2016,3.968,2017,2.791,2018,3.968,2019,2.791,2020,2.334,2021,2.791,2022,2.791,2023,2.791,2024,2.791,2025,2.791,2026,2.791,2027,2.791,2028,2.791,2029,3.968,2030,3.968,2031,2.791,2032,3.968,2033,2.791,2034,3.968,2035,2.791,2036,2.791,2037,2.791,2038,2.791,2039,2.791,2040,2.791,2041,2.791,2042,3.968,2043,2.791,2044,3.968,2045,2.791,2046,2.791,2047,4.618,2048,4.618,2049,2.791,2050,2.791,2051,2.791,2052,2.791,2053,2.791,2054,2.791,2055,2.791,2056,2.791,2057,3.968,2058,3.968,2059,2.791,2060,2.791,2061,2.791,2062,2.791,2063,2.791,2064,2.791,2065,2.791,2066,2.791,2067,2.791,2068,2.791,2069,3.968,2070,2.791,2071,2.791,2072,2.791,2073,2.791,2074,2.791]],["title/interfaces/Window.html",[620,1.865,2075,2.328]],["body/interfaces/Window.html",[0,0.257,3,0.372,4,0.143,5,0.302,8,0.143,9,1.904,10,0.866,11,4.084,12,1.225,13,0.948,14,0.948,15,1.328,17,0.101,18,0.261,19,1.032,28,1.346,30,0.775,32,2.375,34,1.708,39,0.032,40,0.581,41,0.101,43,1.351,44,1.648,45,0.756,46,1.351,47,1.504,50,1.656,51,1.618,52,1.495,53,1.286,54,3.897,55,0.684,57,3.897,58,2.372,59,2.372,60,1.158,61,1.302,62,2.066,63,2.372,64,3.662,65,2.949,66,2.949,67,0.657,69,2.343,70,2.372,71,2.372,72,0.405,76,2.013,77,0.794,82,0.414,83,0.488,88,1.495,90,2.372,91,2.949,93,1.708,94,0.948,95,1.302,96,1.26,97,2.066,98,1.656,99,1.043,100,2.066,111,2.321,121,0.518,128,1.302,130,1.839,136,2.169,139,0.59,152,0.573,153,0.657,155,0.143,156,0.522,161,0.707,170,0.67,171,1.043,174,1.838,177,0.45,190,0.488,200,1.159,215,4.32,219,3.325,238,0.866,248,1.158,256,1.159,273,3.897,300,1.425,319,0.673,335,2.601,349,0.948,382,1.495,389,0.008,390,0.013,391,0.008,395,1.159,407,1.445,415,1.404,451,2.372,470,2.643,472,1.302,473,1.302,474,0.73,475,0.505,487,1.207,488,2.173,490,1.043,493,4.084,494,2.285,495,2.569,496,2.343,499,2.372,501,1.26,504,1.838,509,1.49,515,1.708,523,3.283,561,1.302,569,1.302,575,1.159,585,1.656,588,2.066,620,2.058,621,1.302,622,1.302,625,1.708,629,0.948,630,0.948,633,0.948,634,1.708,635,2.527,636,1.374,637,1.511,639,0.948,640,0.948,641,0.794,643,1.708,646,1.26,647,1.504,648,0.794,651,0.948,654,2.07,655,2.343,657,0.948,659,2.257,660,0.948,661,2.058,662,1.495,663,1.495,665,1.783,666,1.302,667,0.794,668,2.372,669,3.662,671,1.504,672,1.374,673,0.866,674,1.504,675,0.948,679,2.925,680,1.302,681,2.321,683,1.495,684,1.495,695,2.372,696,2.07,697,1.495,698,2.601,699,2.372,700,1.495,701,1.495,703,2.343,706,2.767,709,2.569,736,1.302,737,2.372,739,3.802,743,1.495,751,1.302,860,1.043,880,1.495,881,1.495,882,1.495,894,4.084,895,2.372,896,3.121,897,1.495,898,2.066,899,1.495,900,4.876,902,3.802,904,3.357,905,2.925,906,3.357,912,1.504,917,1.158,920,1.302,968,1.495,993,1.394,996,2.372,1000,0.866,1018,3.121,1067,2.058,1079,1.043,1087,1.656,1103,2.058,1111,2.372,1112,1.495,1129,1.495,1159,3.357,1160,2.949,1187,2.066,1219,1.495,1262,3.283,1497,2.066,1500,1.495,1557,1.495,1615,2.372,1645,2.949,1646,2.372,1648,2.372,1677,1.495,1679,1.495,1755,1.495,1799,1.495,1802,1.495,1809,2.372,1816,2.949,1818,2.569,1833,1.495,1834,1.495,1837,1.495,1840,2.372,1841,1.495,1866,3.357,1907,1.495,1981,3.357,1985,1.495,1999,1.495,2075,3.558,2076,1.495,2077,1.787,2078,1.495,2079,2.836,2080,1.787,2081,3.526,2082,3.526,2083,1.787,2084,1.787,2085,1.787,2086,2.836,2087,1.787,2088,1.787,2089,1.787,2090,1.787,2091,1.787,2092,1.787,2093,1.787,2094,1.787,2095,2.836,2096,1.787,2097,1.787,2098,1.787,2099,1.787,2100,1.787,2101,1.787,2102,2.836,2103,3.526,2104,1.787,2105,2.836,2106,1.787,2107,1.787,2108,1.787,2109,1.787,2110,1.787,2111,1.787,2112,3.526,2113,1.787,2114,1.787,2115,1.787,2116,1.787,2117,1.787,2118,1.787,2119,1.787,2120,1.787,2121,1.787,2122,2.836,2123,2.836,2124,2.836,2125,2.836,2126,1.787,2127,1.787,2128,1.787,2129,1.787,2130,1.787,2131,1.787,2132,1.787,2133,1.787,2134,1.787,2135,1.787,2136,6.139,2137,4.66,2138,1.787,2139,1.787,2140,4.014,2141,3.526,2142,4.014,2143,1.787,2144,1.787,2145,1.787,2146,1.787,2147,1.787,2148,1.787,2149,2.836,2150,1.787,2151,1.787,2152,2.836,2153,1.787,2154,1.787,2155,1.787,2156,1.787,2157,1.787,2158,1.787,2159,1.787,2160,1.787,2161,1.787,2162,1.787,2163,1.787,2164,1.787,2165,1.787,2166,2.836,2167,2.836,2168,2.836,2169,1.787,2170,1.787,2171,1.787,2172,1.787,2173,4.66,2174,1.787,2175,3.526,2176,1.787,2177,1.787,2178,1.787,2179,3.526,2180,1.787,2181,1.787,2182,1.787,2183,1.787,2184,1.787,2185,1.787,2186,1.787,2187,1.787,2188,1.787,2189,1.787,2190,1.787,2191,1.787,2192,1.787,2193,1.787,2194,1.787,2195,1.787,2196,1.787,2197,1.787,2198,1.787,2199,1.787,2200,1.787,2201,1.787,2202,1.787,2203,1.787,2204,1.787,2205,1.787,2206,1.787,2207,2.836,2208,1.787,2209,1.787,2210,1.787,2211,1.787,2212,1.787,2213,1.787,2214,1.787,2215,1.787,2216,1.787,2217,1.787,2218,1.787,2219,1.787,2220,1.787,2221,1.787,2222,1.787,2223,1.787,2224,1.787,2225,1.787,2226,1.787,2227,1.787,2228,1.787,2229,1.787,2230,1.787,2231,1.787,2232,2.836,2233,1.787,2234,1.787,2235,1.787,2236,1.787,2237,1.787]],["title/changelog.html",[2002,1.944,2238,2.232,2239,2.669]],["body/changelog.html",[5,0.289,39,0.028,45,0.604,115,2.979,248,3.307,389,0.024,390,0.028,391,0.024,415,1.636,509,1.394,1006,3.718,1818,3.718,2020,4.268,2240,5.103,2241,5.103,2242,5.103,2243,5.103,2244,5.103,2245,5.103,2246,5.103,2247,5.103,2248,4.268,2249,5.103,2250,5.103,2251,5.103,2252,5.103,2253,3.718]],["title/coverage.html",[2254,3.647]],["body/coverage.html",[0,0.608,1,2.95,5,0.229,6,3.386,7,2.831,35,2.624,39,0.032,41,0.229,45,0.479,46,0.938,121,0.595,140,3.386,389,0.019,390,0.024,391,0.019,392,2.95,393,3.386,394,3.711,399,2.363,470,1.961,471,3.386,478,2.363,496,2.363,502,1.799,506,2.624,519,1.961,522,2.624,523,2.624,530,1.961,531,3.386,537,2.624,558,2.624,559,3.386,620,2.973,622,4.06,623,2.831,634,1.961,636,1.961,637,1.524,685,2.95,686,3.386,772,3.612,773,3.612,781,1.961,783,2.147,875,2.95,876,3.386,989,3.386,990,3.386,1014,2.95,1015,3.386,1018,2.363,1124,2.95,1125,3.386,1142,3.386,1170,5.627,1298,3.386,1299,3.386,1368,3.386,1395,2.624,1495,3.386,1496,3.386,1513,2.624,1514,3.386,1515,3.386,1575,3.386,1576,3.386,1625,3.386,1668,3.386,1733,2.95,1734,3.711,1791,2.95,1792,3.386,1946,2.95,1947,3.386,1979,2.95,1980,3.386,2075,2.95,2076,4.26,2254,3.386,2255,4.049,2256,4.049,2257,4.049,2258,5.094,2259,4.049,2260,5.574,2261,4.049,2262,5.849,2263,4.049,2264,4.049,2265,5.574,2266,4.049,2267,4.049,2268,4.049,2269,4.049,2270,4.049,2271,4.049,2272,4.049,2273,4.049,2274,4.049,2275,4.049,2276,3.386,2277,4.049,2278,5.574,2279,4.049,2280,4.049,2281,4.049,2282,4.049,2283,4.049,2284,4.049,2285,4.049,2286,4.049,2287,4.049,2288,4.049,2289,4.049,2290,4.049,2291,4.049,2292,4.049]],["title/dependencies.html",[2253,1.944,2293,3.214]],["body/dependencies.html",[39,0.031,153,1.191,154,4.298,389,0.024,390,0.028,391,0.024,495,3.744,2248,4.298,2293,4.298,2294,5.139,2295,5.139,2296,5.139,2297,5.139,2298,5.139,2299,5.139,2300,5.139]],["title/index.html",[17,0.151,2002,1.944,2238,2.232]],["body/index.html",[2,0.371,15,1.749,39,0.032,45,0.772,46,1.284,77,2.063,111,2.462,121,0.814,139,0.814,161,0.733,174,3.837,219,2.938,339,2.868,374,2.462,389,0.022,390,0.026,391,0.022,415,1.966,470,3.035,500,2.249,509,1.755,523,3.837,585,2.711,673,2.249,696,2.063,698,3.59,706,2.462,736,3.384,1008,2.249,1086,2.462,1595,3.884,2253,3.384,2301,4.645,2302,4.645,2303,4.645,2304,4.645,2305,4.645,2306,4.645,2307,4.645,2308,5.541,2309,5.541,2310,4.645,2311,4.645,2312,4.645,2313,4.645,2314,4.645,2315,4.645,2316,4.645,2317,5.541,2318,4.645,2319,4.645,2320,4.645,2321,4.645,2322,5.922,2323,4.645,2324,4.645,2325,4.645]],["title/modules.html",[2326,3.647]],["body/modules.html",[39,0.028,389,0.025,390,0.028,391,0.025,2326,4.38]],["title/overview.html",[2327,3.647]],["body/overview.html",[2,0.416,39,0.028,389,0.025,390,0.028,391,0.025,431,2.13,621,3.797,2327,4.359,2328,5.213]],["title/miscellaneous/variables.html",[2329,2.232,2330,3.214]],["body/miscellaneous/variables.html",[17,0.29,39,0.029,41,0.29,51,1.781,389,0.024,390,0.028,391,0.024,501,2.278,623,2.608,1018,3.694,1734,3.735,1738,4.288,2078,4.288,2276,4.288,2329,4.288,2330,4.288,2331,5.127,2332,5.127]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["0.0002",{"_index":841,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1463,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["0.1",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.120.0",{"_index":2300,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1430,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":843,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2295,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["05",{"_index":2250,"title":{},"body":{"changelog.html":{}}}],["0x000fff",{"_index":2145,"title":{},"body":{"interfaces/Window.html":{}}}],["0x2194ce",{"_index":1429,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0x2fd691",{"_index":983,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x41a6f4",{"_index":934,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x8c8c8c",{"_index":2321,"title":{},"body":{"index.html":{}}}],["0xff0000",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Window.html":{}}}],["0xffd166",{"_index":1465,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0xffffff",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["1.0.1",{"_index":2248,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1/1",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1170,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["1000000",{"_index":2053,"title":{},"body":{"classes/VRManager.html":{}}}],["11/11",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1407,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["1100.0",{"_index":1458,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["12/12",{"_index":2261,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":2275,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2294,"title":{},"body":{"dependencies.html":{}}}],["18/18",{"_index":2290,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["1].oncomplete",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"overview.html":{}}}],["2/2",{"_index":2260,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2065,"title":{},"body":{"classes/VRManager.html":{}}}],["200",{"_index":1171,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2020",{"_index":2249,"title":{},"body":{"changelog.html":{}}}],["22/22",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["23/23",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["29/08/2020",{"_index":2022,"title":{},"body":{"classes/VRManager.html":{}}}],["29/29",{"_index":2269,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["3.3333",{"_index":1943,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2297,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2265,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["30/30",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["300).start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["31",{"_index":2328,"title":{},"body":{"overview.html":{}}}],["32",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["32/32",{"_index":2286,"title":{},"body":{"coverage.html":{}}}],["3200.0",{"_index":1461,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33/33",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":650,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["4",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["4/4",{"_index":2264,"title":{},"body":{"coverage.html":{}}}],["4000.0",{"_index":1472,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["48/48",{"_index":2259,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{}}}],["5/5",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1427,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["50/50",{"_index":2289,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2284,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":2258,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7/7",{"_index":2263,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["9/9",{"_index":2262,"title":{},"body":{"coverage.html":{}}}],["ability",{"_index":2219,"title":{},"body":{"interfaces/Window.html":{}}}],["access",{"_index":2204,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["activeobject",{"_index":1793,"title":{},"body":{"classes/SelectionManager.html":{}}}],["actual",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":993,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["add(data",{"_index":1002,"title":{},"body":{"classes/InfoLogger.html":{}}}],["addchild",{"_index":1309,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1328,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1025,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":1063,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1310,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig(type",{"_index":1330,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1187,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["adding",{"_index":643,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addjetssizeoption",{"_index":1182,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addobjecttype",{"_index":1027,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":1075,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":567,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addrenderer",{"_index":1630,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1650,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":1067,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["again",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["alleventdata",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":2102,"title":{},"body":{"interfaces/Window.html":{}}}],["allowcustomvalue",{"_index":1178,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":546,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":697,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2216,"title":{},"body":{"interfaces/Window.html":{}}}],["allscripts",{"_index":1757,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["alongaxisposition",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":1716,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1787,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":1583,"title":{},"body":{"classes/RKHelper.html":{}}}],["ambientlight",{"_index":1856,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1863,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{}}}],["angular",{"_index":2324,"title":{},"body":{"index.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationclipplane",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["antialias",{"_index":1715,"title":{},"body":{"classes/RendererManager.html":{}}}],["any).geometry",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2031,"title":{},"body":{"classes/VRManager.html":{}}}],["any)?.xr?.requestsession(vrmanager.session_type",{"_index":2038,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":1080,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["anypresetview",{"_index":481,"title":{},"body":{"classes/Configuration.html":{}}}],["api",{"_index":2303,"title":{},"body":{"index.html":{}}}],["appended",{"_index":1751,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":2307,"title":{},"body":{"index.html":{}}}],["applied",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["apply",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["around",{"_index":2015,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from(eventobject.geometry.attributes['position'].array",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1441,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arrays",{"_index":1902,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2090,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1511,"title":{},"body":{"classes/PresetView.html":{}}}],["associated",{"_index":672,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":1756,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["atlas",{"_index":1594,"title":{},"body":{"classes/RKHelper.html":{}}}],["attribute",{"_index":534,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{}}}],["attributename",{"_index":1898,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":917,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1899,"title":{},"body":{"classes/SelectionManager.html":{}}}],["automatic",{"_index":1166,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["available",{"_index":1049,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/RendererManager.html":{}}}],["available/created",{"_index":1649,"title":{},"body":{"classes/RendererManager.html":{}}}],["await",{"_index":1767,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1857,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1865,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1692,"title":{},"body":{"classes/RendererManager.html":{}}}],["b_first",{"_index":807,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":802,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":801,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["being",{"_index":920,"title":{},"body":{"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["blob",{"_index":708,"title":{},"body":{"classes/ExportManager.html":{}}}],["blob([text",{"_index":762,"title":{},"body":{"classes/ExportManager.html":{}}}],["bloom",{"_index":564,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":488,"title":{},"body":{"classes/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["both",{"_index":905,"title":{},"body":{"classes/ImportManager.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2035,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":865,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1394,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(30",{"_index":1464,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["break",{"_index":1289,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["browsers",{"_index":1694,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["bufferattribute(pointpos",{"_index":1449,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["build",{"_index":1907,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["buildeventdata",{"_index":627,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":632,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2121,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2120,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2252,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1608,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":866,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(eventdata",{"_index":968,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2119,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":972,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":937,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(uuid",{"_index":1812,"title":{},"body":{"classes/SelectionManager.html":{}}}],["callbacks",{"_index":1809,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":898,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":2201,"title":{},"body":{"interfaces/Window.html":{}}}],["caloclusters",{"_index":1083,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["camera())?.getworlddirection(direction",{"_index":2072,"title":{},"body":{"classes/VRManager.html":{}}}],["camera().copy(camera",{"_index":2049,"title":{},"body":{"classes/VRManager.html":{}}}],["cameragroup",{"_index":1982,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1501,"title":{},"body":{"classes/PresetView.html":{}}}],["cameras",{"_index":2174,"title":{},"body":{"interfaces/Window.html":{}}}],["cancelanimationframe(this.frameid",{"_index":2096,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1648,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1877,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1875,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('touchstart",{"_index":1879,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1882,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1881,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('touchstart",{"_index":1883,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1712,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":642,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["case",{"_index":1409,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["casting",{"_index":957,"title":{},"body":{"classes/ImportManager.html":{}}}],["catmullromcurve3",{"_index":1388,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["chamber",{"_index":406,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changelog",{"_index":2239,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":1818,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["charge",{"_index":787,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checked",{"_index":1654,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":836,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1524,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":950,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["child.castshadow",{"_index":959,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material",{"_index":955,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":987,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":986,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":988,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color",{"_index":961,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.dispose",{"_index":956,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['color",{"_index":982,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['side",{"_index":984,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":951,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.nodelevel",{"_index":1351,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1350,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.receiveshadow",{"_index":960,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1367,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.userdata",{"_index":953,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata.name",{"_index":981,"title":{},"body":{"classes/ImportManager.html":{}}}],["childindex",{"_index":1354,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1230,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["childrenactive",{"_index":1301,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["clearing",{"_index":2124,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2068,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1825,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1911,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2221,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":940,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipintersection",{"_index":947,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingplanes",{"_index":946,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipplanes",{"_index":877,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipshadows",{"_index":948,"title":{},"body":{"classes/ImportManager.html":{}}}],["cloned",{"_index":2009,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1246,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clustercoll",{"_index":1238,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1236,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1239,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1241,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1240,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1244,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1462,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1469,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1483,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1097,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":397,"title":{},"body":{"classes/CMSObjects.html":{}}}],["cmsloader",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["cmsobjects",{"_index":392,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["collected",{"_index":1293,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":659,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":756,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectionname",{"_index":660,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":665,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collectionslist",{"_index":1210,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1233,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1221,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1225,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.children.length",{"_index":1229,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1222,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["color).set(color",{"_index":962,"title":{},"body":{"classes/ImportManager.html":{}}}],["colour",{"_index":2207,"title":{},"body":{"interfaces/Window.html":{}}}],["combined",{"_index":1294,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1279,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1288,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["commit",{"_index":2246,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2245,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2180,"title":{},"body":{"interfaces/Window.html":{}}}],["completes",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["components",{"_index":2087,"title":{},"body":{"interfaces/Window.html":{}}}],["composer",{"_index":565,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":785,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":1428,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1332,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1302,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configoptions",{"_index":1362,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1303,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":1164,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":470,"title":{"classes/Configuration.html":{}},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["configuration('wrapper_element_id",{"_index":2313,"title":{},"body":{"index.html":{}}}],["configure",{"_index":2018,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2103,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('cannot",{"_index":1358,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('error",{"_index":1785,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":1227,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["console.log(\"track",{"_index":1400,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('event",{"_index":1974,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":1133,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log(typename",{"_index":1213,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["const",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constituents",{"_index":1215,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constructor(camera",{"_index":570,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(clipplanes",{"_index":888,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(elementid",{"_index":486,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["constructor(field",{"_index":541,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(jsroot",{"_index":1031,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["constructor(name",{"_index":1314,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2184,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1655,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":682,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1631,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1652,"title":{},"body":{"classes/RendererManager.html":{}}}],["containspoint(new",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["content",{"_index":2142,"title":{},"body":{"interfaces/Window.html":{}}}],["controller",{"_index":1983,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":646,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["controlsmanager",{"_index":1668,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["controlsmanager.getoverlaycamera",{"_index":1702,"title":{},"body":{"classes/RendererManager.html":{}}}],["conventional",{"_index":2244,"title":{},"body":{"changelog.html":{}}}],["copy",{"_index":1545,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["count",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["coverage",{"_index":2254,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1415,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"index.html":{}}}],["created",{"_index":2021,"title":{},"body":{"classes/VRManager.html":{}}}],["creating",{"_index":2122,"title":{},"body":{"interfaces/Window.html":{}}}],["ctheta",{"_index":1419,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1466,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1480,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1482,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1474,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1475,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1476,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1481,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1484,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":720,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":1984,"title":{},"body":{"classes/VRManager.html":{}}}],["custom",{"_index":977,"title":{},"body":{"classes/ImportManager.html":{}}}],["customize",{"_index":2089,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":530,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["cut('energy",{"_index":1191,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1190,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1188,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":1077,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":1217,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cylinderbuffergeometry",{"_index":1391,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cylinderbuffergeometry(width",{"_index":1426,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1598,"title":{},"body":{"classes/RKHelper.html":{}}}],["d3.min.js",{"_index":1762,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["dat.gui",{"_index":495,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["data.json",{"_index":2316,"title":{},"body":{"index.html":{}}}],["data.length",{"_index":1976,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":921,"title":{},"body":{"classes/ImportManager.html":{}}}],["declare",{"_index":1755,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["defaultmaxvalue",{"_index":535,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":536,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":566,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1752,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["define",{"_index":774,"title":{},"body":{"classes/Field.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2203,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1606,"title":{},"body":{"classes/RKHelper.html":{}}}],["definitions",{"_index":1611,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1359,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{}}}],["dependencies",{"_index":2293,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descendants",{"_index":1340,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1505,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":663,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["dflt_colors",{"_index":2167,"title":{},"body":{"interfaces/Window.html":{}}}],["different",{"_index":625,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":867,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":856,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["directionallight",{"_index":1855,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1864,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disable",{"_index":1833,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":1658,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1800,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":509,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["display.ts",{"_index":2076,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":669,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayto",{"_index":2310,"title":{},"body":{"index.html":{}}}],["disposing",{"_index":985,"title":{},"body":{"classes/ImportManager.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividing",{"_index":1267,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1773,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.body",{"_index":1711,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":767,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":764,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('script",{"_index":1777,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('three",{"_index":1874,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1710,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1750,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2255,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2242,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1527,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["don't",{"_index":1546,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":413,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["doublesided",{"_index":900,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":723,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":712,"title":{},"body":{"classes/ExportManager.html":{}}}],["dparams",{"_index":1560,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1599,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1601,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1602,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1603,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1604,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":649,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":2304,"title":{},"body":{"index.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":1736,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e.g",{"_index":1044,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1498,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":410,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["effect",{"_index":580,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":578,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":602,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":560,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["effectsmanager",{"_index":558,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["element",{"_index":492,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{}}}],["elementid",{"_index":476,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["elements",{"_index":588,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":494,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1657,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["enabledatguimenu",{"_index":477,"title":{},"body":{"classes/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2202,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2233,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2200,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1801,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2223,"title":{},"body":{"interfaces/Window.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2110,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":1990,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1528,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["entries",{"_index":998,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1005,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":837,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["error_estimate",{"_index":839,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":838,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1529,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":1525,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["etc",{"_index":1100,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["event.clientx",{"_index":1918,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1921,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1913,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_id",{"_index":878,"title":{},"body":{"classes/ImportManager.html":{}}}],["eventdata",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1186,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":752,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.electrons",{"_index":1201,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.hits",{"_index":1183,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1194,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.photons",{"_index":1198,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdata.vertices",{"_index":1203,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":747,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":754,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":757,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1275,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1286,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":478,"title":{"interfaces/EventDataLoader.html":{}},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["eventdataprop",{"_index":1281,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1285,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1278,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1272,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1284,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":523,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":2314,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":2320,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":2319,"title":{},"body":{"index.html":{}}}],["eventkey",{"_index":2128,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2112,"title":{},"body":{"interfaces/Window.html":{}}}],["eventnum",{"_index":1963,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":1134,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.dividescalar(previousscale",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals(new",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":679,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":681,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["example",{"_index":1270,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["examples",{"_index":2323,"title":{},"body":{"index.html":{}}}],["existing",{"_index":1615,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":673,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["export",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":702,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":730,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":741,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":731,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":685,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2157,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":687,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":694,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":695,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":688,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":704,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2146,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":1105,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":1078,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extends",{"_index":1016,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1737,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extracted",{"_index":1048,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["extrapolate",{"_index":1581,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1402,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1577,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1579,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1411,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration.model",{"_index":2077,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1157,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["face3",{"_index":409,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":421,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2069,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2175,"title":{},"body":{"interfaces/Window.html":{}}}],["false",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["fetch('path/to/event",{"_index":2315,"title":{},"body":{"index.html":{}}}],["few",{"_index":1401,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":2192,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":844,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":845,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":537,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":820,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":827,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":808,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["file.readobject(objectname",{"_index":1112,"title":{},"body":{"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["fileeventdata",{"_index":1017,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["filename",{"_index":709,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["files",{"_index":1060,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["filter",{"_index":543,"title":{},"body":{"classes/Cut.html":{}}}],["filter(hitposition",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["filter(val",{"_index":1905,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":544,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":533,"title":{},"body":{"classes/Cut.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["find(symbol",{"_index":1543,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["finding",{"_index":1843,"title":{},"body":{"classes/SelectionManager.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"index.html":{}}}],["fixed",{"_index":1646,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1626,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2225,"title":{},"body":{"interfaces/Window.html":{}}}],["fixoverlayview(fixed",{"_index":2226,"title":{},"body":{"interfaces/Window.html":{}}}],["flatten",{"_index":923,"title":{},"body":{"classes/ImportManager.html":{}}}],["float32array([].concat(...reachedhits",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1444,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2034,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":1087,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["form",{"_index":1062,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["format",{"_index":696,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["frame",{"_index":2079,"title":{},"body":{"interfaces/Window.html":{}}}],["frameid",{"_index":2080,"title":{},"body":{"interfaces/Window.html":{}}}],["front",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["frontside",{"_index":926,"title":{},"body":{"classes/ImportManager.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":648,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":738,"title":{},"body":{"classes/ExportManager.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["geom",{"_index":2189,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":654,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":758,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2220,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":879,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":749,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":760,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.name",{"_index":976,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.scale.set(scale",{"_index":979,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.setattribute('position",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.traverse((child",{"_index":980,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":2215,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(field",{"_index":775,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1802,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcameragroup",{"_index":1991,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2006,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1369,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1374,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":628,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":657,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":629,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":1020,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":1959,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventdata(objects",{"_index":1041,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["geteventdataloader",{"_index":482,"title":{},"body":{"classes/Configuration.html":{}}}],["geteventmetadata",{"_index":630,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":631,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":676,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethit",{"_index":1021,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gethit(hit",{"_index":1050,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gethits",{"_index":1370,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1376,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1503,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2135,"title":{},"body":{"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":994,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getjet",{"_index":1371,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1379,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlocalclipping",{"_index":1632,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1633,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":1028,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":1094,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":401,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":402,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getobject",{"_index":1064,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1224,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":1029,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1098,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1634,"title":{},"body":{"classes/RendererManager.html":{}}}],["getphoenixmenuroot",{"_index":483,"title":{},"body":{"classes/Configuration.html":{}}}],["getprettyparams",{"_index":1519,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1532,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1520,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1537,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1635,"title":{},"body":{"classes/RendererManager.html":{}}}],["gettevetrack",{"_index":1022,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettevetrack(track",{"_index":1052,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettgeotrack",{"_index":1023,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["gettgeotrack(track",{"_index":1055,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["getthreemanager",{"_index":2132,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2238,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gettrack",{"_index":1372,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1382,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1578,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1584,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2133,"title":{},"body":{"interfaces/Window.html":{}}}],["getvertex",{"_index":1373,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1384,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":1992,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":407,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["giving",{"_index":1841,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2078,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1609,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1619,"title":{},"body":{"classes/RKHelper.html":{}}}],["gltf",{"_index":739,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":970,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":966,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":967,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":727,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":929,"title":{},"body":{"classes/ImportManager.html":{}}}],["go",{"_index":1549,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":644,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":633,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2176,"title":{},"body":{"interfaces/Window.html":{}}}],["group",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1269,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guidelines",{"_index":2247,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":813,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":828,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":799,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":800,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":821,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2036,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1613,"title":{},"body":{"classes/RKHelper.html":{}}}],["handles",{"_index":1072,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["hasposition",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":1397,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["helper.ts",{"_index":1576,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":1585,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:33",{"_index":1580,"title":{},"body":{"classes/RKHelper.html":{}}}],["helpers/pretty",{"_index":1859,"title":{},"body":{"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1396,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hide",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["highlight",{"_index":1840,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":586,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1803,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1837,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2301,"title":{},"body":{"index.html":{}}}],["hit",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1446,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1447,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1448,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":1978,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":1949,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["hits.split('\\n",{"_index":1973,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits;1",{"_index":1046,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["hitsparams",{"_index":1378,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1442,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1455,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1439,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hovered",{"_index":587,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1821,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2212,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1677,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1747,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["icon",{"_index":1304,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["id",{"_index":490,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["identifier",{"_index":2256,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1071,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["identifying",{"_index":1047,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["ignored",{"_index":1820,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1794,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2003,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":624,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1143,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["importmanager",{"_index":875,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["inbounds",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["including",{"_index":719,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":2305,"title":{},"body":{"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["infinity",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["infologger",{"_index":637,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":991,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1000,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":1035,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1804,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(camera",{"_index":1844,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2091,"title":{},"body":{"interfaces/Window.html":{}}}],["initial",{"_index":1683,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":585,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["initialized",{"_index":1822,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2086,"title":{},"body":{"interfaces/Window.html":{}}}],["initially",{"_index":2137,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2136,"title":{},"body":{"interfaces/Window.html":{}}}],["initvr(onsessionended",{"_index":2107,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":737,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["inside",{"_index":575,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2308,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2134,"title":{},"body":{"interfaces/Window.html":{}}}],["instanceof",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["instantiate",{"_index":729,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["instead",{"_index":1361,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":1956,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["integrator",{"_index":798,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":620,"title":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":621,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1849,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1885,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1890,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1904,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1805,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1846,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1848,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1926,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2057,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2058,"title":{},"body":{"classes/VRManager.html":{}}}],["invisible",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["isfixedoverlay",{"_index":1636,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1795,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1410,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["it's",{"_index":1555,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1300,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["items",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{}}}],["iterating",{"_index":1277,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1339,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1141,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["jet",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1381,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1437,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1082,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["jetsscale",{"_index":1169,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexmlloader",{"_index":2271,"title":{},"body":{"coverage.html":{}}}],["joining",{"_index":1291,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2299,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":902,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["json.parse(input",{"_index":2152,"title":{},"body":{"interfaces/Window.html":{}}}],["json.stringify(geometry",{"_index":964,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":744,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsonresult",{"_index":742,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1018,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.newhttprequest(url",{"_index":2165,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url",{"_index":2172,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot3dpainter.js",{"_index":1764,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootcore.js",{"_index":1758,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":1014,"title":{"classes/JSRootEventLoader.html":{}},"body":{"classes/JSRootEventLoader.html":{},"coverage.html":{}}}],["jsrootgeobase.js",{"_index":1765,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootgeopainter.js",{"_index":1766,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootpainter.js",{"_index":1763,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2296,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":810,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":831,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":803,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":804,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":805,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":832,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1478,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":661,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2105,"title":{},"body":{"interfaces/Window.html":{}}}],["keys",{"_index":680,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":780,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":773,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:13",{"_index":1732,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:132",{"_index":1940,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:134",{"_index":1936,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:136",{"_index":1938,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:138",{"_index":1941,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:140",{"_index":1944,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:142",{"_index":1942,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:144",{"_index":1937,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:146",{"_index":1939,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:156",{"_index":776,"title":{},"body":{"classes/Field.html":{}}}],["kutta.ts:93",{"_index":1731,"title":{},"body":{"classes/RungeKutta.html":{}}}],["label",{"_index":1003,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["later",{"_index":699,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["left",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["length",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1323,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":1126,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":1124,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":645,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["line",{"_index":411,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["linebasicmaterial",{"_index":412,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":414,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["linesegments(boxedges",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{}}}],["link.click",{"_index":771,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":770,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":768,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":765,"title":{},"body":{"classes/ExportManager.html":{}}}],["linkedclusters",{"_index":1235,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["linkedtracks",{"_index":1249,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["list",{"_index":667,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2195,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2197,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":1533,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{}}}],["load",{"_index":698,"title":{},"body":{"classes/ExportManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["loaded",{"_index":703,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":474,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loader.load(json",{"_index":974,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.load(sceneurl",{"_index":969,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(json",{"_index":975,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":965,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.ts",{"_index":623,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":1957,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:109",{"_index":1056,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:11",{"_index":1033,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:112",{"_index":1156,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":1955,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:13",{"_index":1032,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/ScriptLoader.html":{}}}],["loader.ts:132",{"_index":1053,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:15",{"_index":1145,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:163",{"_index":1051,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:17",{"_index":1146,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:18",{"_index":638,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:19",{"_index":1144,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:200",{"_index":1148,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":1131,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:229",{"_index":1147,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:25",{"_index":677,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:251",{"_index":1155,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:268",{"_index":1154,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":1965,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:30",{"_index":1149,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:309",{"_index":1152,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":664,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["loader.ts:35",{"_index":1748,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:38",{"_index":658,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:40",{"_index":1043,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:44",{"_index":670,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:54",{"_index":1153,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:62",{"_index":1128,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:65",{"_index":1969,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:66",{"_index":1059,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:70",{"_index":1151,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:8",{"_index":1127,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":1960,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:9",{"_index":1034,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["loader.ts:91",{"_index":1150,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loaders",{"_index":626,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/phoenix",{"_index":520,"title":{},"body":{"classes/Configuration.html":{}}}],["loadevent(eventkey",{"_index":2129,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":880,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":892,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadgltfgeometry(url",{"_index":2161,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":501,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["loadjsongeometry",{"_index":881,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsongeometry(json",{"_index":899,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":1739,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(onscriptsloaded",{"_index":1741,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":1030,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1101,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":882,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":907,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadobjgeometry(filename",{"_index":2138,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry(jsroot",{"_index":2170,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry(jsroot",{"_index":2164,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":894,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2185,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1740,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1744,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["local",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["log",{"_index":1006,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":655,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":990,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":1004,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:27",{"_index":1007,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:7",{"_index":995,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:9",{"_index":997,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":656,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["logs",{"_index":996,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1556,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2229,"title":{},"body":{"interfaces/Window.html":{}}}],["lookatobject(uuid",{"_index":2230,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2097,"title":{},"body":{"interfaces/Window.html":{}}}],["ls",{"_index":1271,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["lumiblock",{"_index":1273,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1341,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["main",{"_index":576,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1627,"title":{},"body":{"classes/RendererManager.html":{}}}],["make",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["making",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:102",{"_index":1685,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:103",{"_index":2014,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:104",{"_index":1853,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:108",{"_index":710,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:11",{"_index":890,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:110",{"_index":1659,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:114",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:117",{"_index":1835,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":1660,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":579,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:126",{"_index":1661,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:129",{"_index":1832,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:13",{"_index":891,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:130",{"_index":2012,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:137",{"_index":1651,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:139",{"_index":911,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:14",{"_index":577,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:143",{"_index":1828,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":1665,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:15",{"_index":889,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:154",{"_index":1823,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:156",{"_index":893,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:159",{"_index":1688,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:16",{"_index":583,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:17",{"_index":2000,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:171",{"_index":1653,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:173",{"_index":901,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:18",{"_index":572,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:184",{"_index":1673,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":1996,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:190",{"_index":1826,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:194",{"_index":1656,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:196",{"_index":916,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:20",{"_index":705,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:201",{"_index":1847,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:204",{"_index":1663,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":2004,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:212",{"_index":1671,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":1830,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:224",{"_index":1839,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":1997,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":1831,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":1815,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:265",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:30",{"_index":2017,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:32",{"_index":1669,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:33",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{}}}],["manager.ts:335",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:37",{"_index":908,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:385",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":594,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:424",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:434",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:44",{"_index":1829,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:444",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:46",{"_index":1819,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:49",{"_index":1808,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:52",{"_index":584,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:53",{"_index":1682,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:54",{"_index":718,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:55",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:58",{"_index":2001,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:60",{"_index":914,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:65",{"_index":714,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:67",{"_index":2005,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:69",{"_index":591,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:71",{"_index":1845,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:76",{"_index":2007,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:79",{"_index":1675,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:8",{"_index":693,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:80",{"_index":919,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:84",{"_index":716,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:87",{"_index":1678,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:88",{"_index":1851,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:9",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:96",{"_index":1836,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:99",{"_index":722,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["manages",{"_index":573,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["manipulate",{"_index":653,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manually",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":1975,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["matching",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.color.set('#ff0000",{"_index":1450,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material.opacity",{"_index":1431,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material2",{"_index":943,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.abs(1",{"_index":1566,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(returnvec.x",{"_index":833,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":834,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":835,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1468,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1471,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1416,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1420,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.max(math.min(pos.z",{"_index":1477,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["math.pow(fh",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1605,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1569,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(clusterparams.phi",{"_index":1473,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1414,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1418,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(pos.x",{"_index":1404,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":858,"title":{},"body":{"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":992,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":547,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1457,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":1932,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":538,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1460,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":496,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["menu/phoenix",{"_index":522,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["menus",{"_index":652,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(boxbuffer",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh(geometry",{"_index":1432,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1436,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1433,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1434,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1435,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1438,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":924,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1389,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meta",{"_index":1268,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":671,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1295,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["mev",{"_index":1597,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1177,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["minimum",{"_index":545,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":539,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2329,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1596,"title":{},"body":{"classes/RKHelper.html":{}}}],["modular",{"_index":2302,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2326,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1530,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["momentum",{"_index":789,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":1085,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mouse",{"_index":1824,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1917,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1920,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":1993,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2010,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":1998,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":857,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":678,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":405,"title":{},"body":{"classes/CMSObjects.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":408,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonparams",{"_index":1096,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1237,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1251,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1264,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1197,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1234,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1248,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1261,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1266,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1265,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["n",{"_index":1123,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["name('jets",{"_index":1172,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["names",{"_index":1091,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["naming",{"_index":1084,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navigator",{"_index":2030,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1526,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["need",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["needed",{"_index":1557,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["needs",{"_index":1459,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["node",{"_index":505,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["node.ts",{"_index":1299,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1324,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:104",{"_index":1331,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1337,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1326,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1317,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1319,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1322,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1325,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1318,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1315,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:6",{"_index":1321,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:62",{"_index":1329,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:75",{"_index":1335,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1320,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:84",{"_index":1333,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:95",{"_index":1342,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2059,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1305,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1338,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":766,"title":{},"body":{"classes/ExportManager.html":{}}}],["normalblending",{"_index":597,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2240,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2020,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nowdisplayingevent",{"_index":2083,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":2309,"title":{},"body":{"index.html":{}}}],["null",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":1903,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":706,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["obj._typename",{"_index":1119,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["obj.arr",{"_index":1122,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["obj.eventobject",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":733,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["object.assign",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1363,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1296,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1290,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":1901,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1232,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(paramscopy",{"_index":1551,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":1896,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols",{"_index":1542,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2186,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1276,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.fileeventdata[objecttype]).length",{"_index":1115,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["object.keys(trackscollections",{"_index":1589,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":759,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":941,"title":{},"body":{"classes/ImportManager.html":{}}}],["object.uuid",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.values(combinedprops).join",{"_index":1297,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":910,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":952,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse((child",{"_index":949,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":954,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":1212,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection",{"_index":1068,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection.length",{"_index":1214,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection[0][cut.field",{"_index":1218,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":1065,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1226,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup.name",{"_index":1231,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectloader",{"_index":925,"title":{},"body":{"classes/ImportManager.html":{}}}],["objectname",{"_index":1111,"title":{},"body":{"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["objectparams",{"_index":1223,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.length",{"_index":1114,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["objects.ts",{"_index":394,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:107",{"_index":1380,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:14",{"_index":403,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:15",{"_index":1383,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:155",{"_index":1377,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:200",{"_index":1375,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:235",{"_index":1385,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1158,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectsgroup",{"_index":1838,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.traverse((object",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":751,"title":{},"body":{"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":755,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":753,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":725,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":927,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":935,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":938,"title":{},"body":{"classes/ImportManager.html":{}}}],["observable",{"_index":1817,"title":{},"body":{"classes/SelectionManager.html":{}}}],["olddrawrangecount",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1179,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["ondisplayedeventchange",{"_index":2082,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1796,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":641,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventdata",{"_index":1042,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["oneventdata(this.fileeventdata",{"_index":1118,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["oneventschange",{"_index":2081,"title":{},"body":{"interfaces/Window.html":{}}}],["onscriptsloaded",{"_index":1743,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onscriptsloaded(jsroot",{"_index":1769,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onsessionended",{"_index":1985,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["ontoggle",{"_index":1306,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1797,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1798,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":1813,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":1986,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":1987,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["optionalfeatures",{"_index":2033,"title":{},"body":{"classes/VRManager.html":{}}}],["options",{"_index":1086,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2023,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":561,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":589,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":613,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":615,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":614,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":740,"title":{},"body":{"classes/ExportManager.html":{}}}],["over",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1645,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlaycanvas",{"_index":1679,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2211,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1628,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":2327,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1547,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":790,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2253,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["panel",{"_index":1001,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["param",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameter",{"_index":1540,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["parameterss",{"_index":1536,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramkey",{"_index":1550,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":1069,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{}}}],["paramscopy",{"_index":1548,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1574,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1571,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1573,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1564,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1563,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1567,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1561,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1558,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1554,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1553,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1307,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1746,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1786,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":736,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsegltfgeometry",{"_index":883,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(geometry",{"_index":909,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":2159,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":884,"title":{},"body":{"classes/ImportManager.html":{}}}],["parseobjgeometry(content",{"_index":2143,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":913,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":2150,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2114,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":912,"title":{},"body":{"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":398,"title":{},"body":{"classes/CMSObjects.html":{}}}],["part_list",{"_index":1138,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":1950,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":562,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":864,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["passes",{"_index":574,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":617,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":860,"title":{},"body":{"classes/Field.html":{},"classes/ImportManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":1933,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1139,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["perform",{"_index":782,"title":{},"body":{"classes/Field.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["performed",{"_index":784,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":778,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["perspectivecamera",{"_index":2019,"title":{},"body":{"classes/VRManager.html":{}}}],["perspectivecamera).far",{"_index":2052,"title":{},"body":{"classes/VRManager.html":{}}}],["phi",{"_index":1521,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["phnx",{"_index":2149,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["phoenixloader",{"_index":519,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixloader:112",{"_index":1102,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:15",{"_index":1037,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":1039,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":1036,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:200",{"_index":1081,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:229",{"_index":1066,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:251",{"_index":1099,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:268",{"_index":1095,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:30",{"_index":1088,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:309",{"_index":1092,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:54",{"_index":1093,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:70",{"_index":1090,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:91",{"_index":1089,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenunode",{"_index":502,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1349,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":479,"title":{},"body":{"classes/Configuration.html":{}}}],["phoenixobjects",{"_index":399,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1193,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1247,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getelectrons",{"_index":1202,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1185,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1181,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getphotons",{"_index":1200,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1260,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getvertex",{"_index":1205,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2151,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2154,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2153,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":395,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pi",{"_index":1189,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["plane(vertice",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":859,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":806,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1443,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1445,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1393,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points(geometry",{"_index":1452,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1392,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1451,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1454,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1453,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1456,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1405,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1406,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":818,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":825,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1624,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1403,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length==0",{"_index":1399,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1616,"title":{},"body":{"classes/RKHelper.html":{}}}],["possible",{"_index":1282,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["possibly",{"_index":1165,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1860,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":2306,"title":{},"body":{"index.html":{}}}],["preset",{"_index":472,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":506,"title":{"classes/PresetView.html":{}},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":480,"title":{},"body":{"classes/Configuration.html":{}}}],["pretty",{"_index":1516,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1562,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1570,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1568,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1572,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1565,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":1894,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":1900,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1541,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1513,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams(intersectedobject.userdata",{"_index":1895,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1552,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1544,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["previousscale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["print",{"_index":1559,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1535,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1607,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":404,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":1130,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":903,"title":{},"body":{"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2183,"title":{},"body":{"interfaces/Window.html":{}}}],["processgeometry",{"_index":885,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgeometry(geometry",{"_index":915,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":1952,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":1964,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":500,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["processitemslist",{"_index":1024,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["processitemslist(obj",{"_index":1058,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["processobj",{"_index":886,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":918,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":1953,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":1967,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":1954,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":1968,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["progress",{"_index":2027,"title":{},"body":{"classes/VRManager.html":{}}}],["project",{"_index":2241,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":1754,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promise((resolve",{"_index":1770,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1283,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["propagate",{"_index":851,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1730,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1582,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":475,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1280,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1909,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1908,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1026,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provided",{"_index":978,"title":{},"body":{"classes/ImportManager.html":{}}}],["pt",{"_index":1522,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushing",{"_index":1292,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":788,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":794,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1390,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1425,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queryselectorall('script[src",{"_index":1774,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["radius",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1479,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ratio",{"_index":791,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1854,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1925,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1924,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1923,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":2325,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":1518,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["receives",{"_index":1103,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":1104,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":1073,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1274,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":700,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reject",{"_index":1771,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["relevant",{"_index":1061,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["remaining",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["removechild",{"_index":1311,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1334,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1637,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1664,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":592,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removepass",{"_index":568,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":590,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":569,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["render(camera",{"_index":593,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render(scene",{"_index":1667,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1680,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1726,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1690,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1687,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":1915,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":1922,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":1919,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1629,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":582,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":2213,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":581,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":606,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":904,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replacing",{"_index":1162,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["represent",{"_index":2088,"title":{},"body":{"interfaces/Window.html":{}}}],["representing",{"_index":647,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":640,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["requestanimationframe(animate",{"_index":2098,"title":{},"body":{"interfaces/Window.html":{}}}],["required",{"_index":2312,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2318,"title":{},"body":{"index.html":{}}}],["reset",{"_index":540,"title":{},"body":{"classes/Cut.html":{}}}],["resolve",{"_index":1783,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["responsible",{"_index":499,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restoring",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":662,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["right",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{},"classes/RKHelper.html":{}}}],["rkhelper",{"_index":1395,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1592,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1408,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":868,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":870,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":873,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":871,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":874,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":869,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":872,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["root",{"_index":504,"title":{},"body":{"classes/Configuration.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["rootfileurl",{"_index":1019,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["rotate.chain(end",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotationpositions",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["run",{"_index":675,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["runge",{"_index":779,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":781,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1136,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["same",{"_index":1074,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["save",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{}}}],["save(blob",{"_index":707,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":701,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":689,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":713,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":690,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":715,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2113,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":691,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":717,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring",{"_index":692,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":721,"title":{},"body":{"classes/ExportManager.html":{}}}],["scale",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["scene.background",{"_index":1699,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":746,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":895,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1698,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":734,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":743,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2188,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2190,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["scenestring",{"_index":963,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":897,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":2222,"title":{},"body":{"interfaces/Window.html":{}}}],["script",{"_index":1735,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1776,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1782,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1784,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1781,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1780,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1778,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1772,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1775,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1790,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1789,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1745,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1733,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript('assets/jsroot",{"_index":1768,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1738,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1749,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["second",{"_index":815,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1647,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":2243,"title":{},"body":{"changelog.html":{}}}],["selected",{"_index":1816,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1799,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1834,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1263,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["selectionmanager",{"_index":1791,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["send",{"_index":2169,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1008,"title":{},"body":{"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["session",{"_index":1999,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["session.addeventlistener('end",{"_index":2041,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":1988,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2032,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["set/get",{"_index":1713,"title":{},"body":{"classes/RendererManager.html":{}}}],["seteventdataloader",{"_index":484,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdataloader(eventdataloader",{"_index":513,"title":{},"body":{"classes/Configuration.html":{}}}],["setfixoverlay",{"_index":1638,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1670,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfromsphericalcoordinates",{"_index":1610,"title":{},"body":{"classes/RKHelper.html":{}}}],["setinterval",{"_index":2063,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1639,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1672,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1640,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1674,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":887,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":922,"title":{},"body":{"classes/ImportManager.html":{}}}],["setoverlayrenderer",{"_index":1641,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1676,"title":{},"body":{"classes/RendererManager.html":{}}}],["setphoenixmenuroot",{"_index":485,"title":{},"body":{"classes/Configuration.html":{}}}],["setphoenixmenuroot(phoenixmenunode",{"_index":516,"title":{},"body":{"classes/Configuration.html":{}}}],["setrenderer",{"_index":1642,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderer(elementid",{"_index":1681,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers",{"_index":1643,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1684,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2210,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1806,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1850,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1807,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1852,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2109,"title":{},"body":{"interfaces/Window.html":{}}}],["setupvrcontrols",{"_index":1994,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1502,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":1995,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2016,"title":{},"body":{"classes/VRManager.html":{}}}],["shadows",{"_index":958,"title":{},"body":{"classes/ImportManager.html":{}}}],["shininess",{"_index":944,"title":{},"body":{"classes/ImportManager.html":{}}}],["show",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":651,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["shown",{"_index":999,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":792,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["sides",{"_index":906,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":2311,"title":{},"body":{"index.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["sizemenu",{"_index":1167,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1173,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["smaller",{"_index":2177,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["space",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["specific",{"_index":1129,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1500,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":532,"title":{},"body":{"classes/Cut.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1492,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1486,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1488,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1490,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1491,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1494,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.vertices",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(3",{"_index":1485,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1413,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../script",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":622,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.model.ts",{"_index":471,"title":{},"body":{"classes/Configuration.html":{},"coverage.html":{}}}],["src/extras/configuration.model.ts:11",{"_index":507,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:13",{"_index":498,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:15",{"_index":503,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:17",{"_index":497,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:19",{"_index":489,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:40",{"_index":510,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:49",{"_index":514,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:57",{"_index":511,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:65",{"_index":517,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/configuration.model.ts:73",{"_index":512,"title":{},"body":{"classes/Configuration.html":{}}}],["src/extras/cut.model.ts",{"_index":531,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":549,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":551,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":550,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":552,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":553,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":548,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":542,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1495,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/pretty",{"_index":1514,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1575,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":772,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/info",{"_index":989,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":2267,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jivexml",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":1015,"title":{},"body":{"classes/JSRootEventLoader.html":{},"coverage.html":{}}}],["src/loaders/lhcb",{"_index":1125,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":393,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1368,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":1142,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/loaders/script",{"_index":1734,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":1947,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/three/controls",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["src/three/effects",{"_index":559,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/three/export",{"_index":686,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/three/import",{"_index":876,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/three/index.ts",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["src/three/renderer",{"_index":1625,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/three/scene",{"_index":2285,"title":{},"body":{"coverage.html":{}}}],["src/three/selection",{"_index":1792,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/three/vr",{"_index":1980,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/ui/index.ts",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["src/ui/phoenix",{"_index":1298,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["start.chain(startxaxis",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":855,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1620,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2002,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":853,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1617,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1618,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":783,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["state.dir",{"_index":817,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add(k1.clone().add(k2.clone().multiplyscalar(2)).add(k3.clone().multiplyscalar(2)).add(k4).multiplyscalar(fh",{"_index":849,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k1.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":822,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k2.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":824,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k3.clone().multiplyscalar(h)).cross(b_last).multiplyscalar(qop",{"_index":829,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":811,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":809,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":797,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":816,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add(k1.clone().add(k2).add(k3).multiplyscalar(fh2",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(h)).add(k3.clone().multiplyscalar(h2",{"_index":826,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(half_h)).add(k1.clone().multiplyscalar(h2",{"_index":819,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":795,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":842,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":796,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statements",{"_index":2257,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":400,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2298,"title":{},"body":{"dependencies.html":{}}}],["step",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":786,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2011,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":852,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":1934,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1417,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2025,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2067,"title":{},"body":{"classes/VRManager.html":{}}}],["store",{"_index":1966,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":666,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2084,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":487,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":668,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":1961,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["super",{"_index":1106,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["svg",{"_index":1512,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1689,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1691,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1644,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1686,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":508,"title":{},"body":{"classes/Configuration.html":{}}}],["symbol",{"_index":1539,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1517,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1515,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:26",{"_index":1538,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:38",{"_index":1534,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:8",{"_index":1531,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":1742,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["table",{"_index":2292,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1753,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1440,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["takes",{"_index":639,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["temp",{"_index":1725,"title":{},"body":{"classes/RendererManager.html":{}}}],["temporary",{"_index":711,"title":{},"body":{"classes/ExportManager.html":{}}}],["tesla",{"_index":777,"title":{},"body":{"classes/Field.html":{}}}],["tevetrack",{"_index":1054,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["text",{"_index":724,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["text/javascript",{"_index":1779,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":763,"title":{},"body":{"classes/ExportManager.html":{}}}],["tgeotrack",{"_index":1057,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["then((res",{"_index":2317,"title":{},"body":{"index.html":{}}}],["then(this.onvrsessionstarted",{"_index":2039,"title":{},"body":{"classes/VRManager.html":{}}}],["theta",{"_index":1467,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["third",{"_index":823,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera.position",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.activeobject",{"_index":1871,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":1893,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":1216,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":1192,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1184,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":1180,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1195,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.photons",{"_index":1199,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.vertices",{"_index":1204,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1718,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1703,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateeventwithclipping",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2131,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks",{"_index":1811,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.callbacks.push(callback",{"_index":1814,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camera",{"_index":603,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2047,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2055,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2073,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2054,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1510,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1346,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1355,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1353,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1356,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipplanes",{"_index":931,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.collideparticles(1500",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":601,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":616,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":607,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":618,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":619,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":610,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1347,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1364,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2092,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().buildeventdata(eventdata",{"_index":2126,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollection(collectionname",{"_index":2193,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollections",{"_index":2194,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventmetadata",{"_index":2199,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventslist(eventsdata",{"_index":2116,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1721,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller",{"_index":2060,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectend",{"_index":2066,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectstart",{"_index":2062,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2070,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2044,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2046,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2045,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1132,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1135,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1140,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1137,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":555,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":554,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":605,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":608,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":609,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":1873,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1867,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1869,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":1916,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.elementid",{"_index":524,"title":{},"body":{"classes/Configuration.html":{}}}],["this.enabledatguimenu",{"_index":527,"title":{},"body":{"classes/Configuration.html":{}}}],["this.enableeventdisplayconsole",{"_index":2104,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2106,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1872,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":932,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":1161,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1242,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1243,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":1245,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1256,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1257,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1259,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1287,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdataloader",{"_index":526,"title":{},"body":{"classes/Configuration.html":{}}}],["this.eventsdata",{"_index":2115,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2130,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fileeventdata",{"_index":1109,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.fileeventdata[objecttype",{"_index":1116,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.fixedoverlay",{"_index":1729,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.frameid",{"_index":2095,"title":{},"body":{"interfaces/Window.html":{}}}],["this.geometries_id",{"_index":933,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer().domelement.classname",{"_index":1708,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().domelement.id",{"_index":1709,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setpixelratio(window.devicepixelratio",{"_index":1707,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setsize",{"_index":1705,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1196,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1211,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1696,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1697,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render",{"_index":1701,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1159,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1209,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2237,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2236,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2125,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2235,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2224,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2111,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2158,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2147,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2227,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2228,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1174,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2232,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2093,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2108,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":2162,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":2163,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":2139,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2231,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":2156,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":2160,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2144,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.render",{"_index":2101,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2214,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2217,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.updatecontrols",{"_index":2099,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2182,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":1970,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.icon",{"_index":1344,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1862,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1887,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1866,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2148,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1910,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2141,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1013,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1009,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1011,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1012,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.intersectobject(event",{"_index":1886,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1700,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1861,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.jsroot",{"_index":1107,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.jsroot.openfile(this.rootfileurl",{"_index":1110,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2117,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2206,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(json",{"_index":2209,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(jsroot.geo.build(obj",{"_index":2166,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2208,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2155,"title":{},"body":{"interfaces/Window.html":{}}}],["this.mainrenderer",{"_index":1714,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1010,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":557,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":556,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2064,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1343,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1352,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2127,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2196,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1878,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":2118,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2198,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onsessionended",{"_index":2029,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1345,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1365,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":1880,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":1876,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":1914,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2042,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1868,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1884,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1888,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1719,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1348,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1357,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.particledata",{"_index":1971,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":529,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews",{"_index":525,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews.length",{"_index":528,"title":{},"body":{"classes/Configuration.html":{}}}],["this.processgeometry(geometry",{"_index":971,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processitemslist(object",{"_index":1113,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.processobj",{"_index":939,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":936,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.renderer",{"_index":2028,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcamera(new",{"_index":2071,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2061,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2043,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1720,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1723,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1727,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1722,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1724,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1728,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.rootfileurl",{"_index":1108,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["this.save(new",{"_index":761,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":748,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":750,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":735,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(output",{"_index":745,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":732,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":604,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1870,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1892,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1897,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1891,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1889,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1704,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":942,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setrenderer(elementid",{"_index":1695,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2040,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1366,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.truthdata",{"_index":1972,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1160,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1219,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1220,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatafolder",{"_index":2123,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2187,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1207,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1208,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2191,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2140,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2234,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.showui(configuration",{"_index":2094,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2100,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uuid",{"_index":1810,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.vrcamera",{"_index":2048,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2050,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2074,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1612,"title":{},"body":{"classes/RKHelper.html":{}}}],["three",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1666,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":1760,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.min.js",{"_index":1759,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":728,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":726,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":930,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":928,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":595,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":599,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1858,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":600,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":598,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/index",{"_index":683,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["threecsg.js",{"_index":1761,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["threejs",{"_index":1228,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":634,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threeservice",{"_index":1038,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["time",{"_index":674,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["tlist",{"_index":1121,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["tobjarray",{"_index":1120,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["todo",{"_index":1163,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":1327,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggles",{"_index":2218,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1312,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1336,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1308,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1316,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["tojson",{"_index":2168,"title":{},"body":{"interfaces/Window.html":{}}}],["top",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["touch",{"_index":1827,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":1912,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2013,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.children[0",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1593,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1591,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcoll",{"_index":1252,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["trackid",{"_index":1250,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1253,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1255,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1254,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2037,"title":{},"body":{"classes/VRManager.html":{}}}],["trackml",{"_index":1948,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["trackmlloader",{"_index":1946,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1258,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1398,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{}}}],["tracks;1",{"_index":1045,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["trackscollection",{"_index":1588,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1587,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1590,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1586,"title":{},"body":{"classes/RKHelper.html":{}}}],["transforming/changing",{"_index":1499,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1842,"title":{},"body":{"classes/SelectionManager.html":{}}}],["true",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1313,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":1962,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":1951,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":1958,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep",{"_index":814,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":840,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material).to",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position).to",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenduration).start",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenjs/tween.js",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typefolder",{"_index":1079,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolder.add",{"_index":1168,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm",{"_index":1175,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1176,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":1076,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":973,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["ui",{"_index":635,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["ui/index",{"_index":684,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["ui/phoenix",{"_index":521,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{}}}],["uimanager",{"_index":636,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2085,"title":{},"body":{"interfaces/Window.html":{}}}],["uiservice",{"_index":1040,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["undefined",{"_index":1117,"title":{},"body":{"classes/JSRootEventLoader.html":{}}}],["undefined/null",{"_index":1360,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniquely",{"_index":1070,"title":{},"body":{"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":1945,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":1935,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":793,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":563,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":863,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":396,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["update",{"_index":847,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["updateanimationsphere",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":896,"title":{},"body":{"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["url.createobjecturl(blob",{"_index":769,"title":{},"body":{"classes/ExportManager.html":{}}}],["url.indexof('.root",{"_index":2171,"title":{},"body":{"interfaces/Window.html":{}}}],["usage",{"_index":2322,"title":{},"body":{"index.html":{}}}],["use",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/JSRootEventLoader.html":{},"classes/RKHelper.html":{},"classes/VRManager.html":{},"index.html":{}}}],["used",{"_index":515,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["uses",{"_index":1595,"title":{},"body":{"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1262,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["v1",{"_index":1422,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1423,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1906,"title":{},"body":{"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1621,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1622,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1623,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["values",{"_index":1977,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["variable",{"_index":2276,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2330,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":2056,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":596,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":611,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{}}}],["vector3(0.5",{"_index":1421,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(4000.0",{"_index":1470,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1424,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2251,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":1386,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1387,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1493,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1487,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1489,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertice",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vertices",{"_index":1206,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["verticies",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["view",{"_index":1497,"title":{},"body":{"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["view.model",{"_index":518,"title":{},"body":{"classes/Configuration.html":{}}}],["view.model.ts",{"_index":1496,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1508,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1504,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1509,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1507,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1506,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":473,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr",{"_index":1981,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr_camera",{"_index":2051,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":1989,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":1979,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["wait",{"_index":1788,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":571,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderer(parameters",{"_index":1717,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1693,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1662,"title":{},"body":{"classes/RendererManager.html":{}}}],["webxr",{"_index":2024,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":493,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{}}}],["width",{"_index":1412,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2075,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.eventdisplay",{"_index":2205,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":612,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1706,"title":{},"body":{"classes/RendererManager.html":{}}}],["wipe",{"_index":1614,"title":{},"body":{"classes/RKHelper.html":{}}}],["wireframe",{"_index":945,"title":{},"body":{"classes/ImportManager.html":{}}}],["without",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["work",{"_index":2026,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["works",{"_index":2008,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":491,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{}}}],["x",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["x1d6d8;2",{"_index":1523,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["y",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/InfoLogger.html":{},"classes/JSRootEventLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1600,"title":{},"body":{"classes/RKHelper.html":{}}}],["zoom",{"_index":2173,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomfactor",{"_index":2178,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2179,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2181,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/three/animations-manager.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:434\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:114\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:265\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:424\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:55\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:385\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:335\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:33\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:444\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from \"./scene-manager\";\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, Object3D, BufferAttribute, Scene, Camera, SphereGeometry, Plane, Group } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport { RendererManager } from \"./renderer-manager\";\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(\n      this.activeCamera.position\n    ).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: { eventObject: Object3D, position: any }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount = eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to({\n                count: geometryPosCount\n              }, tweenDuration);\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01\n          }).to({\n            x: eventObject.scale.x,\n            y: eventObject.scale.y,\n            z: eventObject.scale.z\n          }, tweenDuration);\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position.divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(eventObject.geometry.attributes['position'].array);\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere)\n      .to({ radius: 3000 }, tweenDuration);\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions\n            .filter(hitPosition => updateAnimationSphere\n              .containsPoint(new Vector3().fromArray(hitPosition))\n            );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute('position', new BufferAttribute(\n              new Float32Array([].concat(...reachedHits)), 3\n            ));\n            geometry.computeBoundingSphere();\n          }\n\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere)\n      .to({ radius: 10000 }, extraAnimationSphereDuration);\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane)\n        .to({ constant: clippingConstant }, tweenDuration);\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material).to({\n        opacity: 1\n      }, 300).start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position).to({\n        z: 0\n      }, tweenDuration).start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:14\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, Line, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\nimport { PhoenixObjects } from \"./phoenix-objects\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n    /**\n     * Process the Muon Chamber from the given parameters.\n     * and get it as a geometry.\n     * @param muonChamberParams Parameters of the Muon Chamber.\n     * @returns Muon Chamber object.\n     */\n    public static getMuonChamber(muonChamberParams: any): Object3D {\n        let faces = [];\n        let backs = [];\n\n        for (const param of Object.keys(muonChamberParams)) {\n            if (param.startsWith('front')) {\n                faces.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            } else if (param.startsWith('back')) {\n                backs.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            }\n        }\n\n        let box = new Geometry();\n        box.vertices = faces.concat(backs);\n\n        // front\n        box.faces.push(new Face3(0, 1, 2));\n        box.faces.push(new Face3(2, 3, 0));\n\n        // back\n        box.faces.push(new Face3(4, 5, 6));\n        box.faces.push(new Face3(6, 7, 4));\n\n        // top\n        box.faces.push(new Face3(4, 5, 1));\n        box.faces.push(new Face3(1, 0, 4));\n\n        // bottom\n        box.faces.push(new Face3(7, 6, 2));\n        box.faces.push(new Face3(2, 3, 7));\n\n        // left\n        box.faces.push(new Face3(0, 3, 7));\n        box.faces.push(new Face3(7, 4, 0));\n\n        // right\n        box.faces.push(new Face3(1, 5, 6));\n        box.faces.push(new Face3(6, 2, 1));\n\n        box.computeFaceNormals();\n        box.computeVertexNormals();\n\n        const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n        const boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\n            color: 0xff0000,\n            transparent: true,\n            opacity: 0.1,\n            side: DoubleSide\n        }));\n\n        boxObject.userData = Object.assign({}, muonChamberParams);\n        boxObject.name = 'MuonChamber';\n\n        // These are the lines along the box edges\n\n        const boxEdges = new EdgesGeometry(boxBuffer);\n        const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n            color: 0xffffff,\n            transparent: true,\n            opacity: 0.7\n        }));\n\n        const muonChamber = new Group();\n        muonChamber.add(boxObject);\n        muonChamber.add(lineBoxObject);\n\n        muonChamberParams.uuid = boxObject.uuid;\n\n        return muonChamber;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Configuration.html":{"url":"classes/Configuration.html","title":"class - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for preset views and event data loader.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                elementId\n                            \n                            \n                                enableDatGUIMenu\n                            \n                            \n                                eventDataLoader\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                presetViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                anyPresetView\n                            \n                            \n                                    Public\n                                getEventDataLoader\n                            \n                            \n                                    Public\n                                getPhoenixMenuRoot\n                            \n                            \n                                    Public\n                                setEventDataLoader\n                            \n                            \n                                    Public\n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, enableDatGUIMenu: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/extras/configuration.model.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for the Configuration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        enableDatGUIMenu\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether to enable dat.GUI menu or not.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:19\n                            \n                        \n\n                \n                    \n                        ID of the wrapper element. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enableDatGUIMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:17\n                            \n                        \n\n                \n                    \n                        Whether to enable dat.GUI menu or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDataLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDataLoader\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:13\n                            \n                        \n\n                \n                    \n                        Event data loader responsible for processing and loading event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:15\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            presetViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PresetView[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/configuration.model.ts:11\n                            \n                        \n\n                \n                    \n                        Preset views for switching event display camera. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            anyPresetView\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    anyPresetView()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:40\n                \n            \n\n\n            \n                \n                    Get if there are any preset views.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If there are any preset views.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataLoader()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:57\n                \n            \n\n\n            \n                \n                    Get the event data loader responsible for processing and loading event data.\n\n\n                    \n                    \n                    \n                        Returns :         EventDataLoader\n\n                    \n                    \n                        The event data loader.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPhoenixMenuRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:73\n                \n            \n\n\n            \n                \n                    Get he root node for phoenix menu.\n\n\n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The root node of phoenix menu.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEventDataLoader(eventDataLoader: EventDataLoader)\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:49\n                \n            \n\n\n            \n                \n                    Set the event data loader to be used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataLoader\n                                    \n                                                EventDataLoader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data loader responsible for\nprocessing and loading event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/extras/configuration.model.ts:65\n                \n            \n\n\n            \n                \n                    Set he root node for phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The phoenix menu node to be set as the root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration for preset views and event data loader.\n */\nexport class Configuration {\n  /** Preset views for switching event display camera. */\n  presetViews: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu: boolean;\n  /** ID of the wrapper element. */\n  elementId: string;\n\n  /**\n   * Constructor for the Configuration.\n   * @param elementId ID of the wrapper element.\n   * @param enableDatGUIMenu Whether to enable dat.GUI menu or not.\n   */\n  constructor(\n    elementId: string = 'eventDisplay',\n    enableDatGUIMenu: boolean = false\n  ) {\n    this.elementId = elementId;\n    this.presetViews = [];\n    this.eventDataLoader = new PhoenixLoader();\n    this.enableDatGUIMenu = enableDatGUIMenu;\n  }\n\n  /**\n   * Get if there are any preset views.\n   * @returns If there are any preset views.\n   */\n  public anyPresetView(): boolean {\n    return this.presetViews.length > 0;\n  }\n\n  /**\n   * Set the event data loader to be used.\n   * @param eventDataLoader Event data loader responsible for\n   * processing and loading event data.\n   */\n  public setEventDataLoader(eventDataLoader: EventDataLoader) {\n    this.eventDataLoader = eventDataLoader;\n  }\n\n  /**\n   * Get the event data loader responsible for processing and loading event data.\n   * @returns The event data loader.\n   */\n  public getEventDataLoader(): EventDataLoader {\n    return this.eventDataLoader;\n  }\n\n  /**\n   * Set he root node for phoenix menu.\n   * @param phoenixMenuNode The phoenix menu node to be set as the root node.\n   */\n  public setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuNode;\n  }\n\n  /**\n   * Get he root node for phoenix menu.\n   * @return The root node of phoenix menu.\n   */\n  public getPhoenixMenuRoot(): PhoenixMenuNode {\n    return this.phoenixMenuRoot;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:52\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(camera: Camera, scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:40\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from \"three\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n  }\n\n  /**\n   * Render the effects composer.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   */\n  public render(camera: Camera, scene: Scene) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:18\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:38\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:31\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:44\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:25\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n  /**\n   * Constructor for the export manager.\n   */\n  constructor() {\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    this.saveString(result, 'phoenix-obj.obj');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      result => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        this.saveString(output, 'phoenix-scene.phnx');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n\n  /**\n   * Save string in the file and download it.\n   * @param text Text to be stored.\n   * @param filename Name of the file.\n   */\n  private saveString(text: string, filename: string) {\n    this.save(new Blob([text], { type: 'text/plain' }), filename);\n  }\n\n  /**\n   * Create a temporary link and download/save the data (blob) in a file.\n   * @param blob Blob containing exported data.\n   * @param filename Name of the export file.\n   */\n  private save(blob: Blob, filename: string) {\n    const link = document.createElement('a');\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:156\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadJSONGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:156\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadJSONGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSONGeometry(json: string | object, name: string, callback: (Geometry: Object3D) => void, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:173\n                \n            \n\n\n            \n                \n                    Loads geometries from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON or URL to JSON file of the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry or group of geometries.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometries are processed and loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Object3D) => void, filename: string, name: string, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:37\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:139\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:60\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:196\n                \n            \n\n\n            \n                \n                    Process the geometry by setting up material and clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:80\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: Object3D, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/import-manager.ts:99\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Plane, Material, ObjectLoader, Color, FrontSide } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n  /** Planes for clipping geometry. */\n  private clipPlanes: Plane[];\n  /** Object group ID containing event data. */\n  private EVENT_DATA_ID: string;\n  /** Object group ID containing detector geometries. */\n  private GEOMETRIES_ID: string;\n\n  /**\n   * Constructor for the import manager.\n   * @param clipPlanes Planes for clipping geometry.\n   * @param EVENT_DATA_ID Object group ID containing event data.\n   * @param GEOMETRIES_ID Object group ID containing detector geometries.\n   */\n  constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n    this.clipPlanes = clipPlanes;\n    this.EVENT_DATA_ID = EVENT_DATA_ID;\n    this.GEOMETRIES_ID = GEOMETRIES_ID;\n  }\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename.\n   * @param callback Callback when geometry is processed.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadOBJGeometry(\n    callback: (object: Object3D) => any,\n    filename: string,\n    name: string,\n    color: any,\n    doubleSided: boolean\n  ) {\n    if (color == null) {\n      color = 0x41a6f4;\n    }\n    const objLoader = new OBJLoader();\n    objLoader.load(filename, object => {\n      const processed = this.processOBJ(object, name, color, doubleSided, 'OBJ file');\n      callback(processed);\n    });\n  }\n\n  /**\n   * Parses and loads a geometry in OBJ (.obj) format.\n   * @param geometry Geometry in OBJ (.obj) format.\n   * @param name Name given to the geometry.\n   * @returns The processed object.\n   */\n  public parseOBJGeometry(geometry: string, name: string): Object3D {\n    const objLoader = new OBJLoader();\n    const object = objLoader.parse(geometry);\n    return this.processOBJ(\n      object,\n      name,\n      0x41a6f4,\n      false,\n      'OBJ file loaded from the client.'\n    );\n  }\n\n  /**\n   * Process the geometry object being loaded from OBJ (.obj) format.\n   * @param object 3D object.\n   * @param name Name of the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @param data Data/description to be associated with the object.\n   */\n  private processOBJ(\n    object: Object3D,\n    name: string,\n    color: any,\n    doubleSided: boolean,\n    data?: string\n  ): Object3D {\n    object.name = name;\n    object.userData = { info: data };\n    return this.setObjFlat(object, color, doubleSided);\n  }\n\n  /**\n   * Process the 3D object and flatten it.\n   * @param object3d Group of geometries that make up the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @returns The processed object.\n   */\n  private setObjFlat(object3d: Object3D, color: any, doubleSided: boolean): Object3D {\n    const material2 = new MeshPhongMaterial({\n      color: color,\n      shininess: 0,\n      wireframe: false,\n      clippingPlanes: this.clipPlanes,\n      clipIntersection: true,\n      clipShadows: false,\n      side: doubleSided ? DoubleSide : FrontSide\n    });\n\n    object3d.traverse((child: Object3D) => {\n      if (child instanceof Mesh) {\n        child.name = object3d.name;\n        child.userData = object3d.userData;\n        // Use the new material\n        if (child.material instanceof Material) {\n          child.material.dispose();\n          child.material = material2;\n        }\n        // enable casting shadows\n        child.castShadow = false;\n        child.receiveShadow = false;\n      } else {\n        if (\n          child instanceof LineSegments &&\n          child.material instanceof LineBasicMaterial\n        ) {\n          (child.material.color as Color).set(color);\n        }\n      }\n    });\n    return object3d;\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param geometry Geometry in GLTF (.gltf) format.\n   * @param callback Callback called after the geometry is loaded.\n   */\n  public parseGLTFGeometry(geometry: any, callback: (geometries: Object3D, eventData: Object3D) => any) {\n    const loader = new GLTFLoader();\n    const sceneString = JSON.stringify(geometry, null, 2);\n    loader.parse(sceneString, '', gltf => {\n      const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n      const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n      callback(eventData, geometries);\n    });\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * @param sceneUrl URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param callback Callback called after the scene/geometry is loaded.\n   * @param scale Scale of the geometry.\n   */\n  public loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => any, scale?: number) {\n    const loader = new GLTFLoader();\n    loader.load(sceneUrl, gltf => {\n      const geometry = gltf.scene;\n      this.processGeometry(geometry, name, scale);\n      callback(geometry);\n    });\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param callback Callback called after the geometries are processed and loaded.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    callback: (Geometry: Object3D) => any,\n    scale?: number, doubleSided?: boolean) {\n    const loader = new ObjectLoader();\n    if (typeof json === 'string') {\n      loader.load(json, (geometry: Object3D) => {\n        this.processGeometry(geometry, name, scale, doubleSided);\n        callback(geometry);\n      });\n    } else if (typeof json === 'object') {\n      const geometry = loader.parse(json);\n      this.processGeometry(geometry, name, scale, doubleSided);\n      callback(geometry);\n    }\n  }\n\n  /**\n   * Process the geometry by setting up material and clipping attributes.\n   * @param geometry Geometry to be processed.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  private processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean) {\n    geometry.name = name;\n    // Set a custom scale if provided\n    if (scale) {\n      geometry.scale.set(scale, scale, scale);\n    }\n    geometry.traverse((child) => {\n      if (child instanceof Mesh) {\n        child.name ? child.userData.name = child.name : child.name = child.userData.name = name;\n        if (child.material instanceof Material) {\n          const color = child.material['color'] ? child.material['color'] : 0x2fd691;\n          const side = doubleSided ? DoubleSide : child.material['side'];\n          // Disposing of the default material\n          child.material.dispose();\n          // Changing to a material with 0 shininess\n          child.material = new MeshPhongMaterial({\n            color: color,\n            shininess: 0,\n            side: side\n          });\n          // Setting up the clipping planes\n          child.material.clippingPlanes = this.clipPlanes;\n          child.material.clipIntersection = true;\n          child.material.clipShadows = false;\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:7\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:9\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:16\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:27\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JSRootEventLoader.html":{"url":"classes/JSRootEventLoader.html","title":"class - JSRootEventLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JSRootEventLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/jsroot-event-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from \".root\".\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileEventData\n                            \n                            \n                                    Private\n                                JSROOT\n                            \n                            \n                                    Private\n                                rootFileURL\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Private\n                                getHit\n                            \n                            \n                                    Private\n                                getTEveTrack\n                            \n                            \n                                    Private\n                                getTGeoTrack\n                            \n                            \n                                    Private\n                                processItemsList\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(JSROOT: any, rootFileURL: string)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/jsroot-event-loader.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the JSRoot event loader.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        JSROOT\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JSROOT object containing all JSROOT functions.\n\n                                                        \n                                                \n                                                \n                                                        rootFileURL\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                URL of the \".root\" file to be processed.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fileEventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:11\n                            \n                        \n\n                \n                    \n                        Event data inside the file. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:9\n                            \n                        \n\n                \n                    \n                        JSROOT object containing all JSROOT functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rootFileURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/jsroot-event-loader.ts:13\n                            \n                        \n\n                \n                    \n                        URL of the \".root\" file to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:15\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(objects: string[], onEventData: (eventData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:40\n                \n            \n\n\n            \n                \n                    Get event data of the given objects (e.g ['tracks;1', 'hits;1'])\nfrom the currently loaded \".root\" file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objects\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array identifying objects inside the \".root\" file.\n\n                                    \n                                \n                                \n                                    onEventData\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when event data is extracted and available for use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHit(hit: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:163\n                \n            \n\n\n            \n                \n                    Process and get the Hit in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hit\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hit object containing the hit information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Hit in phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTEveTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTEveTrack(track: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:132\n                \n            \n\n\n            \n                \n                    Process and get the TEveTrack in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Track object containing the track information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Track object in the phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTGeoTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTGeoTrack(track: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:109\n                \n            \n\n\n            \n                \n                    Process and get the TGeoTrack in phoenix format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Track object containing the track information.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Track object in the phoenix format.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processItemsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processItemsList(obj: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/jsroot-event-loader.ts:66\n                \n            \n\n\n            \n                \n                    Process the list of items inside the JSROOT files for relevant event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing the event data in the form of JSROOT classes.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:229\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:200\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:30\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:91\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:70\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:309\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:54\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:268\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:251\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:112\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from \"./phoenix-loader\";\n\n/**\n * PhoenixLoader for processing and loading an event from \".root\".\n */\nexport class JSRootEventLoader extends PhoenixLoader {\n\n  /** JSROOT object containing all JSROOT functions. */\n  private JSROOT: any;\n  /** Event data inside the file. */\n  private fileEventData: any;\n  /** URL of the \".root\" file to be processed. */\n  private rootFileURL: any;\n\n  /**\n   * Constructor for the JSRoot event loader.\n   * @param JSROOT JSROOT object containing all JSROOT functions.\n   * @param rootFileURL URL of the \".root\" file to be processed.\n   */\n  constructor(JSROOT: any, rootFileURL: string) {\n    super();\n\n    this.JSROOT = JSROOT;\n    this.rootFileURL = rootFileURL;\n\n    this.fileEventData = {\n      Hits: {},\n      Tracks: {},\n      Jets: {},\n      CaloClusters: {}\n    };\n  }\n\n  /**\n   * Get event data of the given objects (e.g ['tracks;1', 'hits;1'])\n   * from the currently loaded \".root\" file.\n   * @param objects An array identifying objects inside the \".root\" file.\n   * @param onEventData Callback when event data is extracted and available for use.\n   */\n  public getEventData(objects: string[], onEventData: (eventData: any) => void) {\n    this.JSROOT.OpenFile(this.rootFileURL, (file: any) => {\n      let i = 0;\n      for (const objectName of objects) {\n        file.ReadObject(objectName, (object: any) => {\n          i++;\n          if (object) {\n            this.processItemsList(object);\n          }\n          if (i === objects.length) {\n            for (let objectType of ['Hits', 'Tracks', 'Jets', 'CaloClusters']) {\n              if (Object.keys(this.fileEventData[objectType]).length === 0) {\n                this.fileEventData[objectType] = undefined;\n              }\n            }\n            onEventData(this.fileEventData);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Process the list of items inside the JSROOT files for relevant event data.\n   * @param obj Object containing the event data in the form of JSROOT classes.\n   */\n  private processItemsList(obj: any) {\n    if ((obj._typename === 'TObjArray') || obj._typename === 'TList') {\n      if (!obj.arr) return;\n      for (let n = 0; n \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:15\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:229\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:200\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:30\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:91\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:70\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:309\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:54\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:268\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:251\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:112\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:15\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:229\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:200\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:30\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:91\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:70\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:309\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:54\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:268\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:251\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:112\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Group, Object3D } from 'three';\nimport { UIManager } from '../ui';\nimport { ThreeManager } from '../three';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLogger } from '../info-logger';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeManager;\n  /** UIService to perform UI related functions. */\n  private ui: UIManager;\n  /** Event data processed by the loader. */\n  private eventData: any;\n\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeManager,\n    ui: UIManager, infoLogger: InfoLogger): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibly automatic if tracks have  {\n        if (typeFolder) {\n          const sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            min: 1, max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            }\n          });\n        }\n      };\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\n    }\n\n    if (eventData.Hits) {\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons');\n    }\n\n    // if (eventData.Photons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getPhotons, 'Muons');\n    // }\n\n    // if (eventData.Electrons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getElectrons, 'Muons');\n    // }\n\n    if (eventData.Vertices) {\n      this.addObjectType(eventData.Vertices, PhoenixObjects.getVertex, 'Vertices');\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string,\n    cuts?: Cut[], extendEventDataTypeUI?: (typeFolder: any, typeFolderPM?: PhoenixMenuNode) => void) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName, extendEventDataTypeUI);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName, extendEventDataTypeUI);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n      console.log(typeName+\" collection \"+collectionName+\" has \"+objectCollection.length+\" constituents.\")\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      cuts = cuts?.filter(cut => objectCollection[0][cut.field]);\n      this.ui.addCollection(typeFolder, collectionName, cuts);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n    // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n    if ('LinkedClusters' in muonParams) {\n      for (const clusterID of muonParams.LinkedClusters) {\n        const clusterColl = clusterID.split(':')[0];\n        const clusterIndex = clusterID.split(':')[1];\n\n        if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n          const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n          if (clusterParams) {\n            const cluster = PhoenixObjects.getCluster(clusterParams);\n            muonScene.add(cluster);\n          }\n        }\n      }\n    }\n    if ('LinkedTracks' in muonParams) {\n      for (const trackID of muonParams.LinkedTracks) {\n        const trackColl = trackID.split(':')[0];\n        const trackIndex = trackID.split(':')[1];\n\n        if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n          const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n          if (trackParams) {\n            const track = PhoenixObjects.getTrack(trackParams);\n            muonScene.add(track);\n          }\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label\n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' },\n        { keys: ['lumiBlock'], label: 'LumiBlock' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ui/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:14\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:16\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:8\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:18\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:10\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:20\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:12\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:62\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: string, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:104\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:84\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:75\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:95\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children)\n      this.children = children;\n    if (configs)\n      this.configs = configs;\n    if (parent)\n      this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(name: string, onToggle?: (value: boolean) => void, icon?: string): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: string, options: any): PhoenixMenuNode {\n    let configOptions = { type: type };\n    Object.assign(configOptions, options);\n    this.configs.push(configOptions);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      child.toggleSelfAndDescendants(value);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:200\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:155\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:107\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:15\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:235\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Object3D, CatmullRomCurve3, TubeBufferGeometry, MeshToonMaterial, Mesh, BufferGeometry, LineBasicMaterial, Line, Group, Quaternion, CylinderBufferGeometry, MeshBasicMaterial, BufferAttribute, PointsMaterial, Points, BoxBufferGeometry, MeshPhongMaterial, SphereBufferGeometry } from 'three';\nimport { RKHelper } from '../../helpers/rk-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    // Track with no points\n    // if (positions.length==0) {\n    //   console.log(\"Track with no positions.\")\n    //   return;\n    // }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000)\n            return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100)\n            return false;\n\n          return true\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new MeshBasicMaterial({ color: 0x2194CE, opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new PointsMaterial({ size: 10 });\n    material.color.set('#ff0000');\n    // object\n    const pointsObj = new Points(geometry, material);\n    pointsObj.userData = Object.assign({}, hitsParamsClone);\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0; // This needs to be configurable. \n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new MeshPhongMaterial({ color: 0xFFD166 });\n    // object\n    const cube = new Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({ color: 0xFFD166 });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:8\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:38\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:26\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n\n  /** Pretty symbols for object params. */\n  public static readonly symbols: object = {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols)\n      .find(symbol => PrettySymbols.symbols[symbol].includes(param));\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:33\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:13\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from \"./runge-kutta\";\nimport { Vector3 } from \"three\";\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(\n      -d0 * Math.sin(phi),\n      d0 * Math.cos(phi),\n      z0\n    );\n\n    // Wipe existing positions\n    let positions: number[][] = []\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [val.pos.x, val.pos.y, val.pos.z]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                    Private\n                                setRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string)\n                    \n                \n                        \n                            \n                                Defined in src/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate the renderer manager by setting up the main renderer.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:13\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:137\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:171\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:194\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:110\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:118\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:126\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:204\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:147\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:32\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:212\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:184\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:79\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:87\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:53\n                \n            \n\n\n            \n                \n                    Set the initial renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:159\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters } from 'three';\nimport { ControlsManager } from './controls-manager';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n\n  /**\n   * Instantiate the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  constructor(elementId: string) {\n    // Main renderer for current browsers\n    this.setRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene.\n   * @param controlsManager Manager for managing controls.\n   */\n  public render(scene: Scene, controlsManager: ControlsManager) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(\n            scene,\n            controlsManager.getOverlayCamera()\n          );\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set the initial renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  private setRenderer(elementId: string) {\n    const renderer: WebGLRenderer = new WebGLRenderer();\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n    this.getMainRenderer().setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    this.getMainRenderer().setPixelRatio(window.devicePixelRatio)\n    this.getMainRenderer().domElement.className = 'ui-element';\n    this.getMainRenderer().domElement.id = 'three-canvas';\n    let canvas = document.getElementById(elementId);\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:93\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:13\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:13\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onScriptsLoaded\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when all the JSRoot scripts have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:35\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        declare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\n   */\n  public static loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void) {\n    (async () => {\n      const allScripts = [\n        'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\n        'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\n        'JSRootGeoBase.js', 'JSRootGeoPainter.js'\n      ];\n      for (const script of allScripts) {\n        await ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT');\n      }\n      onScriptsLoaded(JSROOT);\n    })();\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(scriptURL: string, scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]): Promise {\n    return new Promise((resolve, reject) => {\n      const scriptExists = document\n        .querySelectorAll('script[src=\"' + scriptURL + '\"]');\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n        }\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n          });\n        }\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:46\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:154\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:190\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:143\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:44\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:129\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:117\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:96\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:224\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:71\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:201\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:88\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:104\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../helpers/pretty-symbols';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[]; };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  };\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera, scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      if (enable) {\n        this.enableSelecting();\n      } else {\n        this.disableSelecting();\n      }\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document.getElementById('three-canvas').addEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').addEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').addEventListener('touchstart',\n      this.onTouchDown);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document.getElementById('three-canvas').removeEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').removeEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').removeEventListener('touchstart',\n      this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n  }\n\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) { return; }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  }\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(intersectedObject.userData);\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key]\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData).map((key) => {\n        // Only take properties that are a string or number (no arrays or objects)\n        if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n          return key + '=' + intersectedObject.userData[key];\n        }\n      }).filter(val => val);\n      // Build the log text and add to the logger\n      const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  }\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  }\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    objectsGroup.traverse((object: any) => {\n      if (object.uuid === uuid) {\n        this.outlinePass.selectedObjects = [object];\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:134\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:144\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:136\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:146\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:132\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:138\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:142\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:140\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:15\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:229\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:200\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:30\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:91\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:70\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:309\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:54\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:268\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:251\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:112\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:23\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:17\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:58\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:21\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:67\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:76\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:96\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:130\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:103\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:30\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Group, Camera, Vector3, PerspectiveCamera } from \"three\";\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n  /** The VR controller for movement. */\n  private controller: any;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    if ((navigator as any)?.xr) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n      };\n      (navigator as any)?.xr?.requestSession(VRManager.SESSION_TYPE, sessionInit)\n        .then(this.onVRSessionStarted);\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  }\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   */\n  public getCameraGroup(camera?: Camera) {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera) {\n      this.vrCamera = new Camera().copy(camera);\n      this.vrCamera.name = 'VR_CAMERA';\n      (this.vrCamera as PerspectiveCamera).far = 1000000;\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    // Get the controller\n    this.controller = this.renderer.xr.getController(0);\n    this.controller.addEventListener('selectstart', () => {\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    });\n    this.controller.addEventListener('selectend', () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    });\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.renderer.xr.getCamera(new Camera())?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\nimport { Configuration } from './extras/configuration.model';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Frame ID of the current animation frame. */\n  private frameID: number;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n\n  /**\n   * Constructor for the phoenix event display.\n   */\n  constructor() {\n    this.graphicsLibrary = new ThreeManager();\n    this.infoLogger = new InfoLogger();\n    this.ui = new UIManager(this.graphicsLibrary);\n  }\n\n  /**\n   * Initializes the components needed to later represent the geometries.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration, this.infoLogger);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    if (this.frameID) {\n      cancelAnimationFrame(this.frameID);\n    }\n    // Animate loop\n    const animate = () => {\n      this.frameID = requestAnimationFrame(animate);\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    animate();\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadOBJGeometry(filename: string, name: string, color: any,\n    doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, color, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(content: string, name: string, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   */\n  public parsePhoenixDisplay(input: any) {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n      this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   */\n  public parseGLTFGeometry(input: any) {\n    const scene = JSON.parse(input);\n    this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadGLTFGeometry(url: any, name: string,\n    scale?: number, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\n    this.ui.addGeometry(name, 0xff0000, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, 0xff0000, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(JSROOT: any, url: string, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name, scale, doubleSided, initiallyVisible);\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(JSROOT: any, url: string, objectName: string,\n    name: string, scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.OpenFile(url, (file: any) => {\n        file.ReadObject(objectName, (obj: any) => {\n          this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name, scale, doubleSided, initiallyVisible);\n        });\n      });\n    }\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.getEventDataLoader().getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.getEventDataLoader().getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.getEventDataLoader().getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, doubleSided);\n      },\n      loadJSONGeometry: (json: string | object, name: string,\n        scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) => {\n        this.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n      }\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void) {\n    this.graphicsLibrary\n      .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (48/48)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.model.ts\n            \n            class\n            Configuration\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/three/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                src/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/ui/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (50/50)\n            \n        \n        \n            \n                \n                src/ui/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (18/18)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.120.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application. First, install the npm package.\nnpm install phoenix-event-displayTo create a simple event display.\n// Import required classes\nimport { EventDisplay, Configuration } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Create the configuration\nconst configuration = new Configuration('wrapper_element_id');\n\n// ... other configuration options\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);Usage examples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
