var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.227,1,2.369]],["body/classes/AnimationsManager.html",[0,0.118,1,1.978,2,0.26,3,0.169,4,0.129,5,0.129,6,4.523,7,0.755,8,0.477,9,2.438,10,2.08,11,5.376,12,1.488,13,1.59,14,2.229,15,1.611,16,2.706,17,0.169,18,0.38,19,1.464,20,2.706,21,3.396,22,3.396,23,2.706,24,3.396,25,3.396,26,3.396,27,3.396,28,1.379,29,2.706,30,1.177,31,1.681,32,2.471,33,3.892,34,2.836,35,3.246,36,0.598,37,1.409,38,0.741,39,0.031,40,0.598,41,0.466,42,0.741,43,0.757,44,1.766,45,1.025,46,1.514,47,1.59,48,1.978,49,1.59,50,2.507,51,1.216,52,2.267,53,1.676,54,5.29,55,1.377,56,1.681,57,4.747,58,4.425,59,4.425,60,3.69,61,4.02,62,3.946,63,3.819,64,5.29,65,5.055,66,5.318,67,2.132,68,2.019,69,3.329,70,4.425,71,4.425,72,0.683,73,1.681,74,5.499,75,1.681,76,2.373,77,2.086,78,4.266,79,1.681,80,4.266,81,1.681,82,1.027,83,1.177,84,2.706,85,3.396,86,3.261,87,3.261,88,2.267,89,1.681,90,1.409,91,3.574,92,1.681,93,1.323,94,1.995,95,2.968,96,2.836,97,2.535,98,1.59,99,1.995,100,2.845,101,1.681,102,1.681,103,1.681,104,1.681,105,3.396,106,5.145,107,1.681,108,3.892,109,4.266,110,4.266,111,2.816,112,1.681,113,2.267,114,4.523,115,1.762,116,1.446,117,3.396,118,2.483,119,3.819,120,2.706,121,1.288,122,2.706,123,1.681,124,4.793,125,1.409,126,2.706,127,1.995,128,1.762,129,2.212,130,1.177,131,2.706,132,1.681,133,4.176,134,2.816,135,3.892,136,2.664,137,2.845,138,3.892,139,0.546,140,1.409,141,3.396,142,2.267,143,1.904,144,2.267,145,1.095,146,1.681,147,4.985,148,1.12,149,2.706,150,1.681,151,2.267,152,0.47,153,1.409,154,0.169,155,0.708,156,1.681,157,1.681,158,1.681,159,1.681,160,1.203,161,3.396,162,1.681,163,2.845,164,1.681,165,2.845,166,1.681,167,1.681,168,1.681,169,0.286,170,1.762,171,1.681,172,1.681,173,1.095,174,1.681,175,1.681,176,1.538,177,1.681,178,1.681,179,1.681,180,3.396,181,1.409,182,2.706,183,1.681,184,2.267,185,1.59,186,1.409,187,0.988,188,1.681,189,0.646,190,1.681,191,1.681,192,1.681,193,1.681,194,1.681,195,1.681,196,2.706,197,1.681,198,1.681,199,0.755,200,3.396,201,1.681,202,2.706,203,1.681,204,3.396,205,3.892,206,1.681,207,1.229,208,1.681,209,4.266,210,1.681,211,1.762,212,2.267,213,2.267,214,1.978,215,3.396,216,1.229,217,1.229,218,1.661,219,2.706,220,3.892,221,1.409,222,3.892,223,1.681,224,1.681,225,1.409,226,2.706,227,2.267,228,0.988,229,2.706,230,2.706,231,1.681,232,1.681,233,1.681,234,1.681,235,1.681,236,1.681,237,0.899,238,1.409,239,1.681,240,3.396,241,2.706,242,1.681,243,1.681,244,1.681,245,1.681,246,1.409,247,1.229,248,1.681,249,1.681,250,1.681,251,1.681,252,1.409,253,1.409,254,1.681,255,0.696,256,1.681,257,1.681,258,1.681,259,2.706,260,1.681,261,1.409,262,1.681,263,1.681,264,1.681,265,2.267,266,1.681,267,1.681,268,1.681,269,1.229,270,1.681,271,0.899,272,1.409,273,1.095,274,1.681,275,1.681,276,1.661,277,1.681,278,1.681,279,2.706,280,1.409,281,1.681,282,2.706,283,1.681,284,1.681,285,1.681,286,1.681,287,3.396,288,1.681,289,1.681,290,1.681,291,1.681,292,1.681,293,1.681,294,1.409,295,1.681,296,1.409,297,1.681,298,1.681,299,1.298,300,1.681,301,1.681,302,1.681,303,1.409,304,1.681,305,1.681,306,1.681,307,2.706,308,3.396,309,1.681,310,1.681,311,1.681,312,1.681,313,1.681,314,1.681,315,1.681,316,3.892,317,1.681,318,0.594,319,1.681,320,1.762,321,3.396,322,1.681,323,1.681,324,1.681,325,1.681,326,1.681,327,1.409,328,1.681,329,1.095,330,3.892,331,2.706,332,1.681,333,1.409,334,1.095,335,2.706,336,2.706,337,2.706,338,0.988,339,1.681,340,1.681,341,1.681,342,1.681,343,1.681,344,1.681,345,1.681,346,1.681,347,1.095,348,0.899,349,1.095,350,0.899,351,1.681,352,1.681,353,2.706,354,2.706,355,1.229,356,1.978,357,2.706,358,1.681,359,2.706,360,1.681,361,1.681,362,1.681,363,1.681,364,1.681,365,1.681,366,1.681,367,1.681,368,1.681,369,1.681,370,1.681,371,1.681,372,1.681,373,2.706,374,1.681,375,1.681,376,1.681,377,1.409,378,2.706,379,1.681,380,1.229,381,1.681,382,1.681,383,1.681,384,0.008,385,0.012,386,0.008]],["title/modules/AppModule.html",[387,2.369,388,2.11]],["body/modules/AppModule.html",[0,0.222,3,0.499,4,0.242,5,0.242,39,0.031,139,0.951,154,0.318,160,0.587,218,1.546,237,1.69,384,0.014,385,0.02,386,0.014,387,2.311,388,3.765,389,2.311,390,2.059,391,2.649,392,4.155,393,3.638,394,2.649,395,2.059,396,2.649,397,2.649,398,3.397,399,3.174,400,2.649,401,3.162,402,4.342,403,5.339,404,5.339,405,5.339,406,5.339,407,4.342,408,3.638,409,2.059,410,4.342,411,1.858,412,4.342,413,2.649,414,4.96,415,3.162,416,5.339,417,3.162,418,4.96,419,3.162,420,4.96,421,3.162,422,4.96,423,3.162,424,4.96,425,3.162,426,4.96,427,3.162,428,4.342,429,3.162,430,3.162,431,3.625,432,2.649,433,4.96,434,3.162,435,3.162,436,4.342,437,3.162,438,3.162,439,4.342,440,6.626,441,3.162,442,4.96,443,4.342,444,3.162,445,4.342,446,3.162,447,4.342,448,3.162,449,4.342,450,3.162,451,4.342,452,3.162,453,4.342,454,3.162,455,4.342,456,3.162,457,2.649,458,4.342,459,4.342,460,4.342,461,4.342,462,4.342,463,3.162,464,4.342,465,3.162,466,3.162,467,4.96,468,3.162,469,4.96,470,4.342,471,4.342,472,4.342,473,4.342,474,2.551,475,3.162,476,3.162,477,4.342,478,4.342,479,4.342,480,3.162,481,4.342,482,4.96,483,4.342,484,3.162,485,2.828,486,3.162,487,4.342,488,3.162,489,3.162,490,3.162,491,4.342,492,3.162,493,3.162,494,4.342,495,3.162,496,4.342,497,3.162,498,3.162,499,3.162,500,4.342,501,3.162,502,3.162,503,3.162,504,4.342,505,3.162,506,3.162,507,4.342,508,3.477,509,3.162,510,3.162,511,4.342,512,3.162,513,3.162,514,4.342,515,4.342,516,4.342,517,3.162,518,1.951,519,3.162,520,4.342,521,3.162,522,4.342,523,3.162,524,3.162,525,4.342,526,3.162,527,3.162,528,3.162,529,4.342,530,5.339,531,4.342,532,3.162,533,4.342,534,2.611,535,3.162,536,4.342,537,4.342,538,3.625,539,1.858,540,4.342,541,3.162,542,3.162,543,4.342,544,3.162,545,3.162,546,3.162,547,4.342,548,4.342,549,3.162,550,3.162,551,4.342,552,3.162,553,3.162,554,4.342,555,3.162,556,3.162,557,3.224,558,6.031,559,3.162,560,3.162,561,2.649,562,2.649,563,2.649,564,3.162,565,3.162,566,3.162]],["title/pipes/AttributePipe.html",[398,1.904,567,2.11]],["body/pipes/AttributePipe.html",[0,0.323,3,0.464,4,0.353,5,0.353,8,0.489,18,0.647,36,0.522,38,0.647,39,0.031,40,0.672,41,0.407,42,0.647,68,1.762,72,0.7,83,1.934,130,1.675,139,0.647,154,0.464,155,0.627,169,0.783,384,0.021,385,0.025,386,0.021,398,3.617,411,2.709,567,4.009,568,4.61,569,3.863,570,5.537,571,4.048,572,3.253,573,6.156,574,2.548,575,2.464,576,5.935,577,5.537,578,6.156,579,4.61,580,4.048,581,5.537,582,6.156,583,4.639,584,5.537,585,5.537,586,3.863,587,6.296,588,4.61,589,5.537,590,4.61,591,4.61,592,4.61]],["title/classes/CMSObjects.html",[0,0.227,593,2.369]],["body/classes/CMSObjects.html",[0,0.279,2,0.615,3,0.4,4,0.304,5,0.304,8,0.446,17,0.4,18,0.709,19,0.949,36,0.45,38,0.846,39,0.031,40,0.45,41,0.351,42,0.558,44,2.091,45,0.858,72,0.639,111,2.968,118,2.906,121,1.419,130,1.528,139,0.558,142,3.33,143,1.944,144,4.233,145,2.588,148,2.299,152,1.112,154,0.4,155,0.572,160,1.145,169,0.675,176,1.554,185,3.263,189,1.326,218,2.858,228,3.263,271,2.7,299,1.931,355,3.693,356,3.693,384,0.018,385,0.023,386,0.018,562,4.233,593,3.693,594,4.233,595,2.906,596,2.471,597,2.7,598,4.233,599,2.968,600,2.716,601,5.052,602,5.052,603,3.975,604,2.471,605,4.015,606,6.166,607,1.651,608,5.554,609,3.975,610,2.091,611,3.975,612,2.906,613,4.233,614,4.233,615,3.33,616,2.906,617,3.975,618,3.975,619,3.975,620,3.975,621,3.975,622,5.052,623,3.975,624,3.975,625,5.052,626,3.975,627,3.975,628,3.975,629,6.525,630,5.052,631,2.123,632,5.052,633,3.975,634,5.052,635,5.554,636,5.052,637,5.554,638,4.653,639,3.975,640,5.052,641,3.975,642,5.052,643,3.975,644,3.975,645,3.975,646,3.975,647,3.975,648,3.975,649,3.975,650,3.975,651,3.33,652,3.33,653,3.33,654,3.975,655,3.975,656,5.554,657,3.975,658,3.975,659,3.975,660,3.975,661,3.975,662,3.975,663,3.975,664,3.975,665,3.975,666,3.975,667,3.975,668,3.975]],["title/classes/Configuration.html",[0,0.227,669,1.585]],["body/classes/Configuration.html",[0,0.243,2,0.536,3,0.348,4,0.265,5,0.265,8,0.49,17,0.348,18,0.648,19,1.551,30,1.572,34,2.259,36,0.713,38,0.729,39,0.031,40,0.589,41,0.536,42,0.729,45,1.123,46,1.702,55,1.017,72,0.767,121,0.762,139,0.778,154,0.348,155,0.589,169,0.941,176,0.969,276,1.694,318,2.099,384,0.016,385,0.021,386,0.016,534,3.19,538,2.533,539,2.036,669,2.905,670,2.903,671,4.559,672,4.503,673,2.906,674,1.017,675,5.94,676,3.8,677,5.197,678,5.197,679,5.544,680,5.544,681,5.544,682,4.62,683,4.62,684,4.62,685,3.241,686,4.62,687,4.052,688,3.61,689,3.61,690,3.465,691,4.976,692,3.49,693,2.905,694,3.107,695,3.465,696,4.103,697,4.19,698,2.608,699,3.385,700,3.465,701,4.62,702,1.766,703,3.465,704,3.465,705,3.465,706,4.62,707,3.465,708,2.259,709,4.62,710,3.465,711,3.465,712,2.469,713,3.465,714,2.256,715,3.465,716,5.197,717,3.465,718,3.465,719,4.62]],["title/classes/Cut.html",[0,0.227,720,1.732]],["body/classes/Cut.html",[0,0.302,2,0.666,3,0.433,4,0.33,5,0.33,8,0.469,17,0.433,30,1.303,36,0.681,38,0.604,39,0.031,40,0.7,41,0.531,42,0.604,45,1.131,46,1.722,53,1.689,83,1.948,154,0.433,155,0.652,338,3.121,384,0.02,385,0.024,386,0.02,580,4.868,674,1.169,720,3.302,721,3.609,722,4.308,723,2.805,724,4.097,725,6.44,726,6.44,727,5.313,728,1.728,729,5.313,730,5.313,731,6.015,732,6.015,733,6.44,734,6.015,735,4.308,736,4.308,737,4.308,738,4.308,739,4.308]],["title/classes/EffectsManager.html",[0,0.227,740,2.11]],["body/classes/EffectsManager.html",[0,0.236,2,0.52,3,0.338,4,0.258,5,0.258,7,1.511,8,0.484,9,2.679,10,2.421,15,2.268,17,0.338,18,0.635,19,1.52,28,1.875,30,1.549,32,3.025,34,3.246,36,0.693,38,0.718,39,0.031,40,0.58,41,0.532,42,0.718,45,1.094,50,3.46,55,0.997,72,0.693,82,1.851,121,1.205,139,0.802,152,0.941,154,0.338,155,0.667,160,0.841,169,0.571,189,0.803,207,4.004,348,2.421,384,0.015,385,0.021,386,0.015,674,0.997,702,2.462,708,2.992,740,2.949,741,5.194,742,5.127,743,4.004,744,5.445,745,3.795,746,3.795,747,6.321,748,5.12,749,5.478,750,4.529,751,4.305,752,4.529,753,3.567,754,3.795,755,4.529,756,5.478,757,2.646,758,3.795,759,3.364,760,5.12,761,3.364,762,6.265,763,5.12,764,3.795,765,3.364,766,3.364,767,2.949,768,4.59,769,4.59,770,4.004,771,5.127,772,4.529,773,3.364,774,3.311,775,4.529,776,3.364,777,3.364,778,2.818,779,4.529,780,3.364,781,3.364,782,3.364,783,3.364,784,4.529,785,3.364,786,4.29,787,3.795,788,3.364,789,3.364,790,3.364,791,3.364,792,3.364,793,3.364,794,3.364,795,2.818,796,3.364,797,3.364,798,3.364,799,3.364,800,3.364,801,3.364,802,3.364]],["title/interfaces/EventDataLoader.html",[676,1.904,803,1.904]],["body/interfaces/EventDataLoader.html",[3,0.538,4,0.282,5,0.282,8,0.501,17,0.37,18,0.674,36,0.667,38,0.751,39,0.031,40,0.606,41,0.473,42,0.751,43,1.69,44,2.584,45,1.115,46,1.647,55,1.058,72,0.811,98,2.824,130,1.926,139,0.751,154,0.37,155,0.684,199,2.16,255,1.99,384,0.017,385,0.022,386,0.017,518,2.16,575,3.034,596,2.351,673,2.16,676,2.824,728,1.721,757,2.16,803,2.162,804,2.396,805,5.061,806,1.8,807,3.13,808,3.13,809,3.335,810,3.335,811,3.13,812,3.13,813,3.335,814,3.034,815,3.229,816,3.034,817,3.034,818,2.35,819,3.083,820,3.549,821,2.824,822,2.16,823,3.13,824,2.569,825,3.336,826,3.13,827,3.13,828,2.776,829,3.335,830,2.714,831,2.351,832,3.13,833,1.837,834,2.824,835,3.13,836,3.13,837,2.351,838,2.351,839,1.99,840,2.824,841,3.68,842,3.336,843,2.824,844,3.13,845,4.028,846,4.028,847,3.68,848,2.569,849,3.514,850,2.776,851,4.028,852,5.061,853,3.68,854,2.351,855,2.824,856,2.824,857,2.569,858,3.13,859,3.68,860,4.807,861,4.562,862,4.15,863,2.824,864,2.569,865,2.69,866,2.69,867,2.396]],["title/classes/ExportManager.html",[0,0.227,868,2.369]],["body/classes/ExportManager.html",[0,0.208,2,0.458,3,0.298,4,0.227,5,0.473,7,1.33,8,0.524,9,2.538,10,2.217,12,1.586,17,0.298,18,0.582,19,1.352,28,1.924,30,1.653,32,2.942,36,0.672,38,0.816,39,0.031,40,0.699,41,0.524,42,0.816,43,1.16,45,1.059,46,1.635,47,3.756,49,2.437,55,1.142,72,0.735,121,0.913,125,2.48,139,0.672,148,2.647,152,0.828,154,0.585,155,0.706,160,1.174,169,0.813,199,2.775,327,5.119,338,2.437,350,2.217,384,0.024,385,0.019,386,0.014,395,3.38,574,2.149,610,1.225,616,3.501,631,1.131,669,2.902,698,2.149,728,1.728,831,2.029,837,3.202,842,1.582,849,3.032,868,3.032,869,5.053,870,4.148,871,4.148,872,4.148,873,4.148,874,4.148,875,4.148,876,2.96,877,4.148,878,3.475,879,3.032,880,3.475,881,3.475,882,3.475,883,5.664,884,4.2,885,4.148,886,2.48,887,2.701,888,4.148,889,6.031,890,4.467,891,2.48,892,4.148,893,4.148,894,4.148,895,2.96,896,4.148,897,2.48,898,4.148,899,2.96,900,3.475,901,4.148,902,4.148,903,2.48,904,4.148,905,3.38,906,4.148,907,2.96,908,4.148,909,2.96,910,2.48,911,4.789,912,2.96,913,2.96,914,2.96,915,5.19,916,2.96,917,2.48,918,2.48,919,2.96,920,2.164,921,4.148,922,2.96,923,2.96,924,2.48,925,2.96,926,2.96,927,2.96,928,5.19,929,2.96,930,5.19,931,2.96,932,2.164,933,2.96,934,2.96,935,2.96,936,2.96,937,2.96,938,2.96,939,2.96,940,2.48,941,2.96,942,2.96,943,2.96,944,2.96,945,2.96,946,2.96,947,2.96,948,2.96,949,2.96,950,2.96,951,2.96,952,2.96]],["title/classes/Field.html",[0,0.227,724,2.11]],["body/classes/Field.html",[0,0.359,2,0.519,3,0.337,4,0.257,5,0.257,8,0.296,13,1.972,14,1.641,17,0.337,18,0.634,36,0.38,38,0.471,39,0.031,40,0.38,41,0.296,42,0.471,43,0.939,53,1.646,72,0.692,77,1.641,82,1.015,93,1.641,94,2.657,96,2.794,99,1.972,116,2.733,121,0.738,127,2.657,129,2.185,136,1.794,139,0.471,143,3.218,152,0.939,154,0.337,155,0.681,160,1.117,169,0.768,187,3.458,189,0.801,228,3.215,255,1.389,320,2.945,384,0.021,385,0.021,386,0.015,557,1.794,600,2.676,607,1.478,631,2.249,674,0.738,724,3.564,833,1.728,953,2.945,954,2.185,955,3.356,956,3.356,957,3.356,958,3.356,959,3.305,960,4.078,961,4.078,962,1.794,963,1.641,964,2.941,965,2.453,966,2.453,967,2.453,968,2.945,969,4.001,970,3.738,971,4.001,972,2.453,973,2.453,974,2.453,975,4.176,976,2.453,977,2.453,978,2.453,979,2.453,980,4.001,981,3.738,982,3.305,983,3.305,984,4.397,985,4.471,986,4.001,987,4.001,988,2.453,989,2.453,990,2.453,991,4.397,992,2.453,993,2.453,994,4.471,995,2.453,996,2.453,997,3.738,998,4.397,999,2.453,1000,2.453,1001,2.453,1002,3.305,1003,2.453,1004,2.185,1005,2.453,1006,2.453,1007,2.453,1008,2.453,1009,2.453,1010,2.453,1011,2.453,1012,2.453,1013,2.453,1014,2.453,1015,2.453,1016,2.453,1017,2.453,1018,2.453,1019,2.453,1020,3.738,1021,3.305,1022,2.453,1023,3.738,1024,2.185,1025,3.738,1026,3.305,1027,2.453,1028,2.453,1029,2.453,1030,2.453,1031,2.453,1032,2.453,1033,3.305,1034,3.305,1035,3.305,1036,3.738,1037,2.657,1038,3.738,1039,1.972,1040,3.305,1041,2.185,1042,2.453,1043,2.453,1044,3.305,1045,2.453,1046,2.453,1047,2.453,1048,2.453,1049,2.453,1050,2.453,1051,2.453]],["title/classes/ImportManager.html",[0,0.227,1052,2.369]],["body/classes/ImportManager.html",[0,0.142,2,0.312,3,0.314,4,0.155,5,0.394,7,0.907,8,0.492,9,2.108,10,1.672,12,1.196,17,0.203,18,0.439,19,1.424,28,1.846,30,1.158,36,0.652,38,0.765,39,0.031,40,0.75,41,0.509,42,0.765,43,1.487,45,0.837,46,1.411,49,1.838,53,1.411,55,1.201,60,3.35,61,3.408,67,1.523,68,1.885,72,0.705,76,2.816,82,0.611,111,3.746,121,1.17,130,1.976,139,0.721,145,2.493,148,2.654,151,4.132,152,0.565,154,0.203,155,0.731,160,1.107,169,0.65,173,2.807,176,1.071,199,1.405,213,1.692,214,4.617,218,3.25,227,4.132,271,1.672,276,2.412,299,1.196,318,0.714,329,2.493,334,3.976,350,1.672,384,0.009,385,0.014,386,0.009,557,1.672,572,1.838,574,2.308,597,2.492,604,2.412,607,1.737,610,2.386,613,2.621,614,3.207,615,2.621,631,0.772,653,3.611,673,1.72,674,0.688,685,3.187,688,1.315,728,1.83,767,2.037,831,1.53,833,1.647,837,2.942,854,1.53,884,3.696,887,3.976,890,3.605,903,1.692,920,4.463,940,1.692,1052,2.286,1053,4.891,1054,4.932,1055,5.315,1056,5.315,1057,2.621,1058,2.621,1059,3.207,1060,2.621,1061,2.621,1062,3.128,1063,3.828,1064,3.128,1065,3.128,1066,2.286,1067,3.885,1068,1.476,1069,1.476,1070,3.128,1071,2.02,1072,4.67,1073,4.132,1074,3.212,1075,2.621,1076,4.132,1077,2.621,1078,5.309,1079,2.02,1080,3.63,1081,3.696,1082,4.67,1083,4.67,1084,4.67,1085,2.02,1086,1.692,1087,3.128,1088,2.02,1089,2.02,1090,2.532,1091,3.128,1092,2.02,1093,3.128,1094,2.02,1095,2.02,1096,2.02,1097,2.621,1098,3.128,1099,3.128,1100,3.128,1101,3.828,1102,3.128,1103,3.128,1104,4.663,1105,2.02,1106,3.828,1107,2.02,1108,3.828,1109,2.02,1110,2.02,1111,3.128,1112,2.02,1113,2.02,1114,2.02,1115,2.02,1116,2.02,1117,2.02,1118,2.02,1119,2.02,1120,3.128,1121,3.828,1122,2.02,1123,2.02,1124,2.02,1125,2.02,1126,2.02,1127,3.207,1128,4.31,1129,2.02,1130,2.02,1131,2.02,1132,1.476,1133,4.663,1134,3.128,1135,2.02,1136,2.02,1137,2.02,1138,2.02,1139,2.02,1140,2.02,1141,2.02,1142,2.02,1143,2.02,1144,2.02,1145,2.02,1146,1.692,1147,2.02,1148,2.02,1149,3.828,1150,3.828,1151,2.286,1152,2.02,1153,2.02,1154,2.02,1155,2.02,1156,1.692,1157,2.02,1158,2.02,1159,3.128,1160,3.128,1161,2.02,1162,2.02,1163,2.02,1164,2.02,1165,2.02,1166,2.02]],["title/injectables/InfoLoggerService.html",[818,1.342,1167,2.11]],["body/injectables/InfoLoggerService.html",[0,0.293,3,0.667,4,0.32,5,0.32,8,0.46,17,0.42,18,0.731,28,1.888,36,0.674,38,0.586,39,0.031,40,0.473,41,0.502,42,0.586,43,1.458,46,1.681,53,1.348,55,0.919,68,1.597,72,0.719,82,1.576,83,1.576,115,3.394,139,0.586,154,0.42,155,0.59,169,0.709,384,0.019,385,0.024,386,0.019,411,2.454,518,2.673,674,1.147,696,2.72,708,2.549,728,1.747,757,2.342,818,2.158,830,2.673,838,2.549,839,2.463,850,3.054,864,2.786,1039,3.062,1097,4.367,1167,3.394,1168,3.5,1169,3.5,1170,5.682,1171,5.682,1172,2.274,1173,5.95,1174,5.212,1175,4.125,1176,4.177,1177,5.212,1178,5.364,1179,5.231,1180,4.177,1181,4.177,1182,5.212,1183,4.177,1184,5.212,1185,5.212,1186,3.5,1187,4.177,1188,4.177,1189,4.177,1190,4.177,1191,4.177]],["title/classes/LHCbLoader.html",[0,0.227,1192,2.369]],["body/classes/LHCbLoader.html",[0,0.202,2,0.446,3,0.475,4,0.221,5,0.221,8,0.537,12,1.558,15,1.195,17,0.29,18,0.572,19,1.504,28,1.892,30,1.637,36,0.731,38,0.87,39,0.031,40,0.703,41,0.577,42,0.853,43,1.572,44,2.441,45,1.129,46,1.697,51,1.831,55,1.271,67,1.669,68,1.558,72,0.801,76,1.297,130,1.905,134,1.695,139,0.405,148,1.195,154,0.29,155,0.327,160,0.757,176,0.807,199,2.432,211,3.525,318,1.44,349,1.879,384,0.013,385,0.019,386,0.013,474,1.695,518,1.297,561,4.535,574,1.195,575,2.743,596,1.411,604,2.647,605,3.076,607,1.887,610,2.241,673,2.524,674,0.897,692,2.394,693,1.993,694,1.411,698,1.687,702,1.558,712,3.449,720,2.178,723,1.879,728,1.677,757,1.297,806,1.411,807,2.654,808,2.654,809,2.775,810,3.301,811,2.654,812,1.879,813,3.015,814,2.743,815,3.086,816,2.743,817,2.178,818,1.687,820,2.394,821,1.695,822,1.831,823,1.879,824,1.542,825,2.178,826,1.879,827,1.879,828,1.993,829,2.394,830,2.122,831,1.411,832,1.879,833,1.103,834,1.695,835,1.879,836,1.879,837,1.411,838,1.411,839,1.195,840,1.695,842,3.285,843,2.775,848,3.003,850,2.647,854,1.993,855,2.394,856,2.394,857,2.178,858,1.879,863,1.695,864,2.525,963,1.993,1080,2.654,1081,3.525,1090,1.695,1172,1.103,1175,2.654,1192,2.979,1193,4.707,1194,3.414,1195,4.3,1196,2.979,1197,4.107,1198,2.979,1199,2.979,1200,2.979,1201,2.979,1202,2.979,1203,3.414,1204,5.278,1205,2.418,1206,2.418,1207,2.418,1208,2.886,1209,2.886,1210,2.11,1211,4.075,1212,2.886,1213,2.11,1214,3.751,1215,2.979,1216,2.418,1217,2.654,1218,2.11,1219,2.11,1220,2.11,1221,1.879,1222,2.979,1223,2.979,1224,1.879,1225,2.11,1226,2.979,1227,2.979,1228,2.979,1229,1.879,1230,2.11,1231,2.418,1232,3.453,1233,3.453,1234,2.11,1235,1.695,1236,1.879,1237,2.418,1238,2.418,1239,2.418,1240,3.525,1241,2.418,1242,2.418,1243,2.11,1244,2.418,1245,2.11,1246,2.11,1247,2.11,1248,2.418,1249,2.979,1250,2.11,1251,2.418,1252,2.11,1253,2.11,1254,2.418,1255,1.879,1256,2.11,1257,2.11,1258,2.418,1259,4.075,1260,2.886,1261,2.418,1262,2.886,1263,2.418,1264,2.886,1265,2.886,1266,4.075,1267,2.886,1268,4.075]],["title/classes/PhoenixLoader.html",[0,0.227,712,1.732]],["body/classes/PhoenixLoader.html",[0,0.129,2,0.285,3,0.412,4,0.141,5,0.141,8,0.469,12,1.568,15,1.206,17,0.185,18,0.409,19,1.345,28,1.77,32,0.829,36,0.656,38,0.802,39,0.031,40,0.647,41,0.561,42,0.79,43,1.576,44,2.469,45,1.103,46,1.565,51,1.843,53,1.061,55,1.134,67,1.449,68,1.113,72,0.754,76,1.309,77,0.902,83,0.881,93,0.902,98,1.084,116,1.557,121,1.219,130,1.939,134,1.084,136,0.986,139,0.762,143,0.902,148,1.698,152,1.01,154,0.185,155,0.68,160,1.202,169,0.901,176,1.328,181,1.545,186,3.437,189,0.695,199,2.315,211,3.723,216,1.348,225,1.545,271,0.986,299,0.705,303,2.441,349,1.897,350,2.192,384,0.008,385,0.013,386,0.008,474,1.712,485,1.201,518,1.622,534,1.766,538,1.348,539,1.084,574,1.206,575,2.657,586,2.441,596,2.184,599,1.084,604,1.425,605,3.237,607,1.892,610,2.397,673,2.007,674,0.795,676,2.121,692,1.712,693,1.425,694,2.006,697,1.201,698,1.495,702,1.568,712,1.557,714,1.201,720,2.387,723,1.897,728,1.681,757,1.622,806,0.902,807,1.897,808,1.897,809,2.41,810,2.41,811,1.897,812,1.897,813,3.028,814,2.754,815,3.094,816,2.754,817,2.192,818,1.698,819,1.545,820,2.41,821,1.712,822,1.843,823,1.897,824,1.557,825,2.192,826,1.897,827,1.897,828,2.006,829,2.41,830,2.133,831,1.425,832,1.897,833,1.113,834,1.712,835,1.897,836,1.897,837,1.425,838,1.425,839,1.206,840,1.712,842,3.336,843,3.359,844,1.201,848,3.129,850,2.656,854,1.425,855,1.712,856,2.121,857,2.387,858,1.897,862,3.265,863,1.712,864,2.538,865,1.348,866,1.348,867,1.201,932,2.13,960,1.201,961,1.897,962,0.986,963,2.006,1039,1.084,1081,1.897,1090,1.712,1151,1.348,1172,1.38,1175,3.608,1196,2.64,1197,3.878,1198,2.13,1199,2.13,1200,2.13,1201,2.13,1202,2.13,1213,1.348,1214,3.878,1215,3.471,1217,2.671,1218,3.265,1219,2.13,1220,2.13,1221,1.897,1222,2.999,1223,2.999,1224,1.897,1225,2.13,1226,2.999,1227,4.321,1228,3.471,1229,2.909,1230,1.348,1232,3.767,1233,3.634,1234,2.13,1235,1.712,1236,1.897,1240,3.537,1243,2.13,1245,2.13,1246,2.13,1247,2.13,1249,2.999,1250,1.348,1252,1.348,1253,2.13,1255,1.897,1256,2.13,1257,2.13,1261,1.545,1263,1.545,1269,4.904,1270,1.844,1271,1.844,1272,1.844,1273,1.844,1274,1.844,1275,1.844,1276,1.844,1277,1.844,1278,1.844,1279,1.844,1280,1.844,1281,1.844,1282,1.844,1283,1.844,1284,1.844,1285,1.844,1286,1.545,1287,1.545,1288,3.611,1289,1.844,1290,1.844,1291,1.844,1292,1.844,1293,1.844,1294,1.844,1295,1.844,1296,1.844,1297,1.844,1298,1.844,1299,1.844,1300,3.611,1301,1.844,1302,2.913,1303,1.844,1304,1.844,1305,1.844,1306,1.844,1307,3.611,1308,3.611,1309,2.913,1310,1.844,1311,1.844,1312,1.844,1313,2.64,1314,1.844,1315,1.348,1316,1.844,1317,3.437,1318,1.844,1319,1.844,1320,1.844,1321,1.844,1322,2.913,1323,2.913,1324,2.913,1325,2.913,1326,2.913,1327,4.102,1328,1.844,1329,1.844,1330,2.913,1331,2.913,1332,1.844,1333,1.844,1334,2.913,1335,1.844,1336,1.844,1337,1.844,1338,1.844,1339,1.844,1340,1.844,1341,1.844,1342,1.844,1343,1.844,1344,1.844,1345,1.844,1346,1.844,1347,1.844,1348,1.844,1349,1.844,1350,2.913,1351,1.844,1352,1.844,1353,1.844,1354,4.102,1355,1.844,1356,2.913,1357,1.844,1358,1.844,1359,1.844,1360,1.545,1361,1.844,1362,1.844,1363,1.844,1364,1.844,1365,1.844,1366,1.844,1367,1.844,1368,1.844,1369,1.844,1370,1.844,1371,1.844,1372,2.913,1373,1.844,1374,1.844,1375,2.913,1376,1.844,1377,2.913,1378,1.844,1379,1.844,1380,1.844,1381,2.441,1382,1.844,1383,1.545,1384,1.844,1385,1.844,1386,1.844,1387,1.844,1388,2.913,1389,1.844,1390,2.913,1391,1.844,1392,1.844,1393,1.844,1394,2.441,1395,1.844,1396,1.844,1397,1.844,1398,1.201,1399,1.844,1400,1.844,1401,1.844,1402,1.844,1403,1.844,1404,1.844,1405,1.545,1406,3.611,1407,2.913,1408,1.844,1409,1.844,1410,3.611,1411,2.913,1412,1.844,1413,1.545,1414,1.844,1415,1.545,1416,1.844,1417,1.844,1418,1.844,1419,1.844,1420,2.913,1421,1.844,1422,1.844,1423,1.844,1424,1.844,1425,1.844,1426,1.844,1427,1.844,1428,1.844,1429,1.844]],["title/classes/PhoenixMenuNode.html",[0,0.227,694,1.585]],["body/classes/PhoenixMenuNode.html",[0,0.189,2,0.416,3,0.27,4,0.206,5,0.206,8,0.485,17,0.27,18,0.543,28,1.373,30,0.813,36,0.718,38,0.739,39,0.031,40,0.725,41,0.563,42,0.739,48,3.632,53,1.002,55,1.274,67,2.141,68,2.161,72,0.746,82,1.659,83,1.884,121,0.591,137,1.965,154,0.27,155,0.693,160,0.843,169,0.771,176,1.084,189,0.925,255,2.396,276,2.831,299,2.097,318,0.95,338,2.276,348,3.199,384,0.012,385,0.018,386,0.012,457,3.245,474,3.631,534,3.272,539,3.743,669,2.683,674,0.852,685,3.329,694,3.152,696,1.75,697,4.375,698,2.396,714,4.149,728,1.79,774,2.831,964,1.894,1127,5.4,1172,1.899,1430,5.338,1431,2.252,1432,5.267,1433,6.341,1434,4.541,1435,4.541,1436,5.896,1437,5.361,1438,4.541,1439,6.179,1440,5.177,1441,4.541,1442,3.873,1443,3.873,1444,3.873,1445,3.873,1446,4.969,1447,3.245,1448,3.873,1449,5.788,1450,2.688,1451,2.688,1452,2.688,1453,2.688,1454,2.688,1455,2.688,1456,3.873,1457,2.688,1458,2.688,1459,2.688,1460,3.873,1461,2.688,1462,3.873,1463,2.688,1464,4.969,1465,2.688,1466,3.873,1467,2.688,1468,3.873,1469,2.688,1470,3.873,1471,3.873,1472,3.873,1473,3.245,1474,2.688,1475,2.252,1476,2.252,1477,2.688,1478,4.541,1479,2.688,1480,3.873,1481,2.688,1482,2.688,1483,2.688,1484,2.688,1485,2.688,1486,2.688,1487,2.688,1488,2.688,1489,2.688,1490,2.688,1491,2.688,1492,2.688,1493,2.688,1494,2.688,1495,2.688,1496,2.688,1497,2.688,1498,2.688,1499,2.688]],["title/classes/PhoenixObjects.html",[0,0.227,599,1.904]],["body/classes/PhoenixObjects.html",[0,0.21,2,0.462,3,0.524,4,0.229,5,0.229,8,0.484,17,0.3,18,0.586,19,1.149,36,0.59,38,0.909,39,0.031,40,0.59,41,0.46,42,0.731,44,1.728,45,0.709,72,0.737,97,1.945,111,2.453,115,1.945,116,1.596,119,3.497,121,1.409,127,2.827,130,1.871,133,5.063,134,3.425,139,0.586,145,2.719,148,2.463,152,1.346,154,0.3,155,0.545,160,1.233,163,2.502,165,3.497,169,0.885,176,1.458,185,2.827,189,1.149,216,4.348,218,3.053,237,1.596,238,4.365,265,3.497,271,2.231,276,1.461,280,3.497,294,2.502,296,2.502,299,1.142,329,3.134,334,3.874,355,2.183,356,2.183,380,2.183,384,0.014,385,0.019,386,0.014,485,3.134,572,1.755,595,2.183,596,2.042,597,2.231,599,2.453,600,3.026,604,2.851,607,1.906,631,1.596,652,2.502,698,1.728,848,2.572,1024,3.134,1041,3.874,1151,2.183,1315,3.052,1381,4.032,1383,4.885,1394,3.497,1398,3.134,1500,4.593,1501,4.174,1502,4.174,1503,4.174,1504,4.174,1505,4.174,1506,2.987,1507,4.174,1508,2.987,1509,5.68,1510,2.987,1511,2.987,1512,4.174,1513,4.174,1514,2.987,1515,2.987,1516,4.174,1517,4.174,1518,2.987,1519,2.987,1520,2.987,1521,4.812,1522,2.987,1523,4.812,1524,2.987,1525,5.482,1526,4.812,1527,4.812,1528,4.174,1529,2.987,1530,2.987,1531,4.174,1532,4.174,1533,2.987,1534,2.987,1535,2.987,1536,2.987,1537,2.987,1538,2.987,1539,2.987,1540,2.987,1541,2.987,1542,2.987,1543,4.174,1544,2.987,1545,2.987,1546,2.987,1547,2.987,1548,2.987,1549,2.987,1550,5.21,1551,2.183,1552,2.987,1553,2.987,1554,2.987,1555,2.987,1556,4.812,1557,2.987,1558,2.987,1559,2.987,1560,2.987,1561,2.987,1562,2.987,1563,2.987,1564,4.174,1565,2.987,1566,2.987,1567,2.987,1568,4.174,1569,2.987,1570,2.987,1571,5.482,1572,2.987,1573,5.21,1574,2.987,1575,2.987,1576,2.987,1577,2.987,1578,2.987,1579,2.987,1580,4.174,1581,2.987,1582,2.987,1583,2.987,1584,2.987,1585,4.174,1586,4.174,1587,4.174,1588,4.174,1589,4.812,1590,4.174,1591,4.812,1592,2.987,1593,2.987,1594,2.987,1595,2.987,1596,2.987,1597,2.987,1598,2.987,1599,2.987,1600,2.987]],["title/classes/PresetView.html",[0,0.227,699,2.11]],["body/classes/PresetView.html",[0,0.287,2,0.633,3,0.411,4,0.313,5,0.313,8,0.455,17,0.411,18,0.722,19,1.536,30,1.238,34,2.976,36,0.703,38,0.574,39,0.031,40,0.738,41,0.538,42,0.574,53,1.574,55,0.901,67,1.446,72,0.651,96,3.038,154,0.411,155,0.637,169,0.695,184,4.949,318,2.195,338,3.024,384,0.019,385,0.024,386,0.019,508,4.354,671,4.842,672,2.992,674,1.132,699,3.351,728,1.833,1074,3.846,1437,5.565,1447,4.312,1475,3.429,1476,4.716,1601,5.283,1602,3.429,1603,3.429,1604,4.093,1605,3.429,1606,6.377,1607,5.629,1608,5.906,1609,5.146,1610,5.906,1611,4.093,1612,4.093,1613,4.093,1614,4.093,1615,4.093,1616,4.093,1617,3.429]],["title/classes/RendererManager.html",[0,0.227,35,2.11]],["body/classes/RendererManager.html",[0,0.163,2,0.36,3,0.234,4,0.178,5,0.178,7,1.047,8,0.519,9,2.643,10,2.48,12,1.333,15,2.301,17,0.42,18,0.489,19,1.512,28,1.889,30,1.264,32,2.553,35,2.271,36,0.717,37,1.952,38,0.824,39,0.031,40,0.655,41,0.536,42,0.812,45,0.944,49,2.049,50,3.933,51,1.878,53,0.602,55,1.293,60,3.619,72,0.804,77,1.705,82,1.264,83,1.719,113,2.921,121,0.767,130,1.055,139,0.489,152,0.976,154,0.234,155,0.681,160,1.032,169,0.918,176,0.652,189,0.832,217,3.391,255,0.964,276,2.044,299,1.333,318,2.103,329,2.271,347,3.619,348,1.864,350,2.787,384,0.011,385,0.016,386,0.011,508,2.271,597,1.864,674,0.767,685,3.18,702,1.993,708,2.269,751,3.391,753,4.331,758,4.922,764,2.921,774,2.549,795,1.952,815,1.245,828,2.044,850,3.098,864,2.48,887,2.721,891,1.952,910,2.921,1066,2.549,1068,1.703,1069,1.703,1172,1.333,1313,2.549,1618,5.328,1619,4.179,1620,4.179,1621,4.968,1622,6.403,1623,3.487,1624,3.487,1625,4.639,1626,4.639,1627,4.639,1628,4.639,1629,4.639,1630,3.487,1631,3.487,1632,3.487,1633,3.487,1634,3.487,1635,4.639,1636,3.487,1637,3.487,1638,5.365,1639,4.849,1640,3.487,1641,4.761,1642,3.487,1643,3.487,1644,2.33,1645,5.088,1646,3.487,1647,2.33,1648,3.487,1649,3.487,1650,2.33,1651,4.657,1652,4.657,1653,2.33,1654,2.33,1655,4.639,1656,2.33,1657,3.487,1658,2.33,1659,3.487,1660,3.487,1661,4.657,1662,2.33,1663,3.487,1664,1.952,1665,3.487,1666,2.33,1667,3.487,1668,2.33,1669,3.487,1670,3.501,1671,2.33,1672,3.501,1673,3.487,1674,2.33,1675,3.487,1676,3.487,1677,2.33,1678,3.487,1679,5.214,1680,2.33,1681,3.487,1682,4.639,1683,4.639,1684,4.639,1685,3.487,1686,2.33,1687,2.33,1688,2.33,1689,2.33,1690,3.487,1691,4.179,1692,2.33,1693,2.33,1694,2.33,1695,2.33,1696,2.33,1697,2.33,1698,2.33,1699,2.33,1700,2.33,1701,1.703,1702,2.33,1703,2.33,1704,2.33,1705,2.33,1706,2.33,1707,3.487,1708,2.33,1709,2.33,1710,2.33,1711,2.33,1712,3.487,1713,4.639,1714,2.33,1715,2.33,1716,2.33,1717,2.33,1718,3.487,1719,2.33,1720,2.33,1721,2.33,1722,3.487]],["title/classes/RungeKutta.html",[0,0.227,962,1.732]],["body/classes/RungeKutta.html",[0,0.346,2,0.485,3,0.315,4,0.24,5,0.24,8,0.436,13,2.536,14,2.111,17,0.315,18,0.605,36,0.489,38,0.605,39,0.031,40,0.489,41,0.436,42,0.605,43,1.207,53,1.694,72,0.673,77,1.533,82,0.948,83,0.948,93,2.111,94,2.9,96,2.943,99,1.841,116,2.982,121,0.69,127,2.536,129,2.811,136,2.307,139,0.44,143,3.195,152,0.877,154,0.315,155,0.669,160,1.097,169,0.733,187,3.698,189,1.03,228,3.125,255,1.297,320,2.811,384,0.02,385,0.02,386,0.014,557,2.307,600,2.82,607,1.739,631,2.204,674,0.95,833,2.033,953,3.215,954,2.041,959,3.888,960,4.153,961,4.153,962,2.307,963,2.111,964,3.078,965,3.155,966,3.155,967,3.155,968,3.215,969,4.215,970,3.888,971,4.215,972,2.291,973,2.291,974,2.291,975,4.078,976,2.291,977,2.291,978,2.291,979,2.291,980,3.888,981,3.609,982,3.155,983,3.155,984,4.318,985,4.4,986,3.888,987,3.888,988,2.291,989,2.291,990,2.291,991,4.318,992,2.291,993,2.291,994,4.4,995,2.291,996,2.291,997,3.609,998,4.318,999,2.291,1000,2.291,1001,2.291,1002,3.155,1003,2.291,1004,2.041,1005,2.291,1006,2.291,1007,2.291,1008,2.291,1009,2.291,1010,2.291,1011,2.291,1012,2.291,1013,2.291,1014,2.291,1015,2.291,1016,2.291,1017,2.291,1018,2.291,1019,2.291,1020,3.609,1021,3.155,1022,2.291,1023,3.609,1024,2.041,1025,3.609,1026,3.155,1027,2.291,1028,2.291,1029,2.291,1030,2.291,1031,2.291,1032,3.888,1033,3.888,1034,3.888,1035,3.888,1036,4.078,1037,3.125,1038,4.078,1039,2.536,1040,3.888,1041,2.811,1042,3.155,1043,3.155,1044,3.155,1045,2.291,1046,2.291,1047,2.291,1048,2.291,1049,2.291,1050,2.291,1051,2.291,1723,3.134,1724,2.626,1725,3.134]],["title/classes/ScriptLoader.html",[0,0.227,1726,2.369]],["body/classes/ScriptLoader.html",[0,0.267,2,0.589,3,0.383,4,0.292,5,0.292,8,0.481,17,0.383,18,0.689,19,1.173,36,0.557,38,0.689,39,0.031,40,0.557,41,0.434,42,0.807,45,0.835,46,1.487,55,1.198,67,1.346,68,1.456,69,2.888,72,0.688,76,2.208,82,1.152,83,1.152,121,0.838,154,0.383,155,0.651,160,1.106,169,0.647,176,1.065,221,3.19,273,3.201,299,1.879,384,0.017,385,0.022,386,0.017,580,3.593,600,2.982,673,2.208,693,2.662,728,1.706,806,1.862,822,1.711,879,4.535,884,3.97,1074,3.745,1172,1.456,1221,3.201,1440,4.118,1701,3.593,1726,3.593,1727,3.979,1728,6.611,1729,5.751,1730,4.915,1731,5.108,1732,4.915,1733,4.915,1734,4.915,1735,4.093,1736,3.808,1737,4.915,1738,4.915,1739,4.915,1740,6.351,1741,5.751,1742,5.443,1743,3.808,1744,5.751,1745,4.915,1746,4.915,1747,4.915,1748,4.915,1749,5.751,1750,3.19,1751,3.808,1752,4.915,1753,3.808,1754,3.808,1755,3.808,1756,3.808,1757,3.808,1758,3.808,1759,3.808,1760,3.808,1761,3.808,1762,3.808,1763,3.808,1764,3.808,1765,3.808,1766,4.915,1767,3.808,1768,3.19,1769,3.808,1770,3.808,1771,3.808,1772,3.808,1773,3.808,1774,3.808,1775,3.808,1776,4.915,1777,3.808,1778,5.751,1779,3.808,1780,3.808,1781,3.808,1782,3.19,1783,3.808,1784,3.808,1785,3.808]],["title/classes/SelectionManager.html",[0,0.227,1786,2.369]],["body/classes/SelectionManager.html",[0,0.154,2,0.34,3,0.221,4,0.168,5,0.168,7,0.986,8,0.468,9,2.833,10,2.725,12,1.274,15,1.864,17,0.221,18,0.468,19,1.446,28,2,30,1.464,32,2.857,34,3.007,36,0.712,38,0.715,39,0.031,40,0.618,41,0.539,42,0.679,43,1.26,44,2.004,45,1.087,46,1.411,47,3.349,49,1.959,51,1.498,53,0.568,55,1.122,67,1.801,69,2.995,72,0.721,82,1.362,83,1.362,121,1.166,130,1.964,139,0.679,148,2.11,152,0.614,154,0.221,155,0.645,160,1.038,169,0.765,170,3.712,176,0.933,185,1.29,189,0.796,207,3.726,217,2.437,276,1.074,299,1.948,318,1.801,348,1.782,384,0.01,385,0.015,386,0.01,485,3.825,518,2.023,571,4.345,572,1.959,604,1.074,607,1.472,610,1.38,631,1.274,674,0.991,685,2.588,688,3.153,692,1.29,702,2.334,708,2.493,728,1.564,740,3.91,742,4.056,743,3.99,744,4.271,745,3.772,746,3.772,753,1.43,754,1.839,757,2.023,767,2.171,768,2.794,769,3.772,770,3.726,771,4.271,778,2.794,786,2.794,787,1.839,817,2.917,818,2.11,822,0.986,830,2.023,833,1.274,838,2.202,839,2.11,844,2.625,861,3.291,867,1.43,886,1.839,897,1.839,905,1.43,1086,2.794,1172,0.839,1178,1.839,1179,3.378,1398,3.871,1413,1.839,1551,1.605,1651,4.776,1652,3.772,1664,1.839,1724,3.378,1786,2.437,1787,5.288,1788,4.032,1789,4.032,1790,4.032,1791,4.032,1792,4.032,1793,4.032,1794,4.271,1795,4.502,1796,4.502,1797,3.772,1798,3.334,1799,4.032,1800,3.334,1801,3.334,1802,3.334,1803,4.842,1804,2.195,1805,2.195,1806,2.195,1807,3.334,1808,3.334,1809,3.334,1810,2.195,1811,5.944,1812,5.098,1813,2.195,1814,4.502,1815,2.195,1816,2.195,1817,2.195,1818,2.195,1819,2.195,1820,2.794,1821,4.573,1822,2.195,1823,2.794,1824,4.502,1825,2.794,1826,2.794,1827,3.334,1828,3.334,1829,2.195,1830,2.195,1831,3.334,1832,2.195,1833,4.032,1834,3.334,1835,3.334,1836,1.839,1837,3.334,1838,2.195,1839,4.032,1840,2.195,1841,2.195,1842,2.195,1843,2.195,1844,1.839,1845,2.195,1846,4.032,1847,2.195,1848,2.195,1849,2.195,1850,2.195,1851,1.839,1852,2.195,1853,2.195,1854,2.195,1855,2.195,1856,2.195,1857,2.195,1858,2.195,1859,5.098,1860,2.195,1861,3.334,1862,2.195,1863,4.032,1864,2.195,1865,3.334,1866,2.195,1867,2.195,1868,2.195,1869,4.032,1870,4.842,1871,2.195,1872,2.195,1873,2.195,1874,2.195,1875,3.334,1876,2.195,1877,2.195,1878,2.195,1879,2.195,1880,2.195,1881,2.195,1882,2.195,1883,4.032,1884,2.195,1885,2.195,1886,2.195,1887,2.195,1888,2.195,1889,1.605,1890,2.195,1891,2.195,1892,2.195,1893,2.195,1894,2.195,1895,3.334,1896,2.195,1897,2.195,1898,2.195,1899,2.195,1900,2.195,1901,2.195,1902,2.195,1903,2.195,1904,2.195,1905,2.195,1906,2.195,1907,2.195,1908,2.195,1909,1.839,1910,2.195,1911,2.195,1912,2.195,1913,2.195]],["title/classes/State.html",[0,0.227,964,1.585]],["body/classes/State.html",[0,0.303,2,0.484,3,0.315,4,0.24,5,0.24,8,0.277,13,1.84,14,1.531,17,0.315,36,0.681,39,0.031,41,0.531,43,0.876,53,1.679,62,2.289,72,0.546,77,1.531,82,1.82,83,1.82,93,1.531,94,2.534,96,2.819,99,1.84,115,2.039,116,2.981,121,1.086,127,3.124,129,2.809,136,1.674,139,0.439,143,3.175,152,0.876,154,0.315,155,0.669,160,1.097,169,0.733,176,1.613,187,3.535,189,1.03,228,3.124,255,1.296,261,3.614,320,2.809,384,0.02,385,0.02,386,0.014,557,2.306,600,2.11,607,1.41,631,2.203,674,1.086,833,1.649,953,3.977,954,2.039,959,3.153,960,4.025,961,4.025,962,1.674,963,1.531,964,2.987,965,2.289,966,2.289,967,2.289,968,3.214,969,4.214,970,3.887,971,4.214,972,2.289,973,2.289,974,2.289,975,4.077,976,2.289,977,2.289,978,2.289,979,2.289,980,3.887,981,3.607,982,3.153,983,3.153,984,4.318,985,4.399,986,3.887,987,3.887,988,2.289,989,2.289,990,2.289,991,4.318,992,2.289,993,2.289,994,4.399,995,2.289,996,2.289,997,3.607,998,4.318,999,2.289,1000,2.289,1001,2.289,1002,3.153,1003,2.289,1004,2.039,1005,2.289,1006,2.289,1007,2.289,1008,2.289,1009,2.289,1010,2.289,1011,2.289,1012,2.289,1013,2.289,1014,2.289,1015,2.289,1016,2.289,1017,2.289,1018,2.289,1019,2.289,1020,3.607,1021,3.153,1022,2.289,1023,3.607,1024,2.039,1025,3.607,1026,3.153,1027,2.289,1028,2.289,1029,2.289,1030,2.289,1031,2.289,1032,2.289,1033,3.153,1034,3.153,1035,3.153,1036,3.607,1037,2.899,1038,3.607,1039,2.534,1040,3.153,1041,2.809,1042,2.289,1043,2.289,1044,3.887,1045,2.289,1046,2.289,1047,2.289,1048,2.289,1049,2.289,1050,2.289,1051,2.289,1914,4.314,1915,4.314,1916,4.314,1917,4.314,1918,3.132,1919,3.132,1920,3.132,1921,3.132,1922,3.132,1923,3.132,1924,3.132,1925,3.132,1926,3.132,1927,2.624]],["title/classes/TrackmlLoader.html",[0,0.227,1928,2.369]],["body/classes/TrackmlLoader.html",[0,0.195,2,0.43,3,0.399,4,0.213,5,0.213,8,0.549,12,1.517,15,1.151,17,0.28,18,0.557,19,1.521,28,1.943,30,1.4,36,0.735,38,0.884,39,0.031,40,0.714,41,0.581,42,0.872,43,1.724,44,2.418,45,1.099,46,1.661,51,1.783,53,0.719,55,1.308,67,1.635,68,1.517,72,0.797,76,1.249,114,4.893,130,1.894,134,3.543,139,0.39,148,1.151,154,0.28,155,0.315,160,0.516,189,0.664,199,2.268,211,3.287,349,1.811,384,0.013,385,0.018,386,0.013,474,1.634,518,1.249,563,4.228,574,2.298,575,2.121,596,1.36,604,2.61,605,3.014,607,1.867,610,2.21,612,2.901,673,2.268,674,0.873,692,2.332,693,1.941,694,1.36,698,1.643,702,1.517,712,3.434,720,2.121,723,1.811,728,1.707,757,1.249,806,1.36,807,2.584,808,2.584,809,2.719,810,2.719,811,2.584,812,1.811,813,2.965,814,2.697,815,3.053,816,2.697,817,2.121,818,1.643,820,2.332,821,1.634,822,1.783,823,1.811,824,1.486,825,2.121,826,1.811,827,1.811,828,1.941,829,2.332,830,2.079,831,1.36,832,1.811,833,1.063,834,1.634,835,1.811,836,1.811,837,1.36,838,1.36,839,1.151,840,1.634,842,3.261,843,2.719,848,2.966,850,2.61,854,1.36,855,1.634,856,1.634,857,1.486,858,1.811,863,1.634,864,2.473,963,1.941,1081,3.614,1090,1.634,1172,1.063,1175,2.584,1194,3.325,1195,3.325,1196,2.901,1197,4.057,1198,2.901,1199,2.901,1200,2.901,1201,2.901,1202,2.901,1203,2.33,1204,5.247,1205,2.33,1206,2.33,1207,2.33,1213,2.033,1214,3.689,1215,2.901,1216,2.33,1217,2.584,1218,2.033,1219,2.033,1220,2.033,1221,1.811,1222,2.901,1223,2.901,1224,1.811,1225,2.033,1226,2.901,1227,2.901,1228,2.901,1229,1.811,1230,2.033,1231,2.33,1232,3.383,1233,3.383,1234,2.033,1235,1.634,1236,1.811,1237,2.33,1238,2.33,1239,2.33,1240,3.476,1241,2.33,1242,2.33,1243,2.033,1244,2.33,1245,2.033,1246,2.033,1247,2.033,1248,2.33,1249,2.901,1250,2.033,1251,2.33,1252,2.033,1253,2.033,1254,2.33,1255,1.811,1256,2.033,1257,2.033,1258,2.33,1928,2.901,1929,4.98,1930,4.628,1931,4.628,1932,4.628,1933,3.969,1934,3.969,1935,3.969,1936,3.969,1937,3.969,1938,2.781,1939,3.969,1940,2.781,1941,2.781,1942,2.781,1943,5.047,1944,2.781,1945,3.969,1946,2.781,1947,5.047,1948,2.781,1949,2.781,1950,2.781,1951,2.781,1952,2.781,1953,2.781,1954,2.781,1955,2.781,1956,2.781,1957,2.781,1958,2.781,1959,2.781,1960,2.781]],["title/classes/VRManager.html",[0,0.227,1961,2.369]],["body/classes/VRManager.html",[0,0.194,2,0.428,3,0.278,4,0.212,5,0.212,7,1.243,8,0.47,9,1.934,12,1.511,13,2.323,17,0.278,18,0.555,19,1.527,28,1.972,32,1.777,34,3.241,36,0.713,38,0.706,39,0.031,40,0.57,41,0.544,42,0.647,43,1.409,45,0.671,47,2.323,48,2.89,50,3.539,53,1.193,55,1.255,67,1.397,68,1.511,69,2.958,72,0.721,76,2.621,82,1.523,83,1.523,86,3.866,95,1.801,96,1.353,100,4.05,121,1.015,128,2.575,137,2.022,139,0.388,143,2.605,152,0.774,154,0.278,155,0.627,160,0.857,169,0.671,170,3.714,187,1.625,253,3.313,255,1.637,318,2.098,347,1.801,350,2.466,380,2.022,384,0.013,385,0.018,386,0.013,597,2.466,600,2.257,607,1.646,610,2.524,674,0.87,702,1.511,708,2.709,728,1.106,753,3.608,824,2.466,828,1.934,1037,3.618,1066,2.022,1067,2.022,1068,2.022,1069,2.022,1132,3.681,1836,2.318,1927,2.318,1961,2.89,1962,5.307,1963,5.626,1964,4.614,1965,5.703,1966,4.614,1967,4.887,1968,4.614,1969,4.614,1970,4.614,1971,4.614,1972,4.614,1973,5.035,1974,3.954,1975,5.035,1976,3.954,1977,5.035,1978,3.954,1979,2.766,1980,2.766,1981,5.326,1982,5.488,1983,2.766,1984,2.766,1985,2.766,1986,2.575,1987,3.954,1988,2.766,1989,2.766,1990,3.954,1991,3.313,1992,3.954,1993,2.766,1994,3.954,1995,5.832,1996,2.766,1997,3.954,1998,2.766,1999,3.954,2000,3.954,2001,2.766,2002,3.954,2003,2.766,2004,2.766,2005,2.766,2006,2.766,2007,2.766,2008,2.766,2009,2.318,2010,2.022,2011,2.318,2012,2.766,2013,3.954,2014,3.954,2015,2.766,2016,3.954,2017,2.766,2018,3.954,2019,2.766,2020,2.766,2021,2.022,2022,2.766,2023,2.766,2024,2.766,2025,2.766,2026,3.954,2027,2.766,2028,3.954,2029,2.766,2030,2.766,2031,4.614,2032,4.614,2033,2.766,2034,2.766,2035,2.766,2036,2.766,2037,2.766,2038,2.766,2039,2.766,2040,2.766,2041,3.954,2042,3.954,2043,2.766,2044,2.766,2045,2.766,2046,2.766,2047,2.766,2048,2.766,2049,2.766,2050,2.766,2051,2.766,2052,2.766,2053,3.954,2054,2.766,2055,2.766,2056,2.766,2057,2.766,2058,2.766]],["title/interfaces/Window.html",[803,1.904,2059,2.369]],["body/interfaces/Window.html",[0,0.124,3,0.283,4,0.135,5,0.411,8,0.156,11,4.096,12,1.672,14,0.864,15,0.731,17,0.178,18,0.395,19,1.523,28,1.622,30,0.851,32,2.409,34,1.716,39,0.031,40,0.723,41,0.156,43,1.622,44,1.81,45,1.084,46,1.515,47,1.654,50,1.654,51,2.196,52,1.48,53,1.441,54,3.904,55,1.025,57,3.904,58,2.359,59,2.359,60,1.15,61,1.291,62,2.058,63,2.359,64,3.664,65,2.941,66,2.941,67,0.995,69,2.352,70,2.359,71,2.359,72,0.553,76,2.409,77,0.864,82,0.534,83,0.534,88,1.48,90,2.359,91,2.941,93,1.716,94,1.038,95,1.15,96,1.377,97,1.833,98,1.654,99,1.038,100,2.058,111,2.569,128,1.15,130,1.891,136,2.613,139,0.654,154,0.178,155,0.748,160,0.996,169,0.743,170,1.15,173,1.15,176,0.494,189,0.422,199,1.265,214,4.358,218,3.088,237,0.944,247,1.291,255,1.165,269,1.291,272,3.904,299,1.999,318,0.624,334,2.607,348,0.944,377,1.48,384,0.008,385,0.013,386,0.008,395,1.833,399,3.406,411,1.038,413,1.48,508,1.833,518,0.794,534,1.716,557,0.944,571,2.566,572,1.038,574,1.929,575,1.505,596,1.377,607,1.598,610,0.731,651,2.359,669,2.677,671,1.291,672,1.291,673,0.794,674,0.619,685,3.1,687,3.573,688,2.286,689,2.286,693,1.377,696,2.286,698,1.453,702,1.94,708,1.377,728,1.755,743,1.291,751,1.291,757,1.265,767,1.833,770,2.058,803,2.062,804,1.15,809,1.038,810,1.038,813,1.654,814,1.876,815,2.49,816,1.876,817,1.505,818,1.165,820,1.038,821,1.038,822,0.794,824,1.876,825,1.876,828,1.377,829,1.654,830,1.577,831,0.864,834,1.038,837,2.139,838,0.864,839,1.165,840,1.038,842,2.49,843,1.038,844,2.286,845,1.48,846,1.48,848,2.14,849,1.291,850,0.864,851,2.359,852,3.664,854,1.377,855,1.038,856,1.654,857,0.944,861,2.927,862,1.291,863,2.569,865,1.291,866,1.291,867,1.15,878,1.48,879,2.927,880,2.359,881,1.48,882,1.48,884,2.607,887,3.406,890,2.566,905,1.833,917,1.48,918,2.359,920,3.824,924,1.48,932,1.291,1057,1.48,1058,1.48,1059,1.48,1060,1.48,1061,1.48,1067,1.291,1072,4.096,1073,2.359,1074,3.492,1075,1.48,1076,2.359,1077,1.48,1078,4.909,1080,3.406,1082,3.354,1083,3.354,1084,3.354,1090,1.654,1146,1.48,1167,1.833,1172,1.53,1186,1.48,1210,1.291,1217,2.286,1229,1.15,1236,1.833,1255,2.286,1286,2.359,1287,1.48,1313,2.058,1360,1.48,1398,3.305,1605,1.48,1638,2.941,1639,2.359,1641,2.359,1670,1.48,1672,1.48,1735,3.492,1750,1.48,1794,1.48,1797,1.48,1820,1.48,1821,1.48,1823,1.48,1825,2.359,1826,1.48,1851,2.359,1889,1.291,1963,3.354,1967,1.48,1982,1.48,2059,3.573,2060,1.48,2061,4.888,2062,1.766,2063,3.51,2064,1.48,2065,1.48,2066,2.815,2067,1.766,2068,2.815,2069,3.51,2070,3.51,2071,3.51,2072,1.766,2073,3.51,2074,1.48,2075,2.815,2076,1.766,2077,1.766,2078,1.48,2079,1.766,2080,1.766,2081,1.766,2082,1.766,2083,1.766,2084,1.766,2085,2.815,2086,1.766,2087,1.766,2088,1.766,2089,1.766,2090,1.766,2091,1.766,2092,2.815,2093,3.51,2094,1.766,2095,2.815,2096,1.766,2097,1.766,2098,1.766,2099,1.766,2100,1.766,2101,1.766,2102,3.51,2103,1.766,2104,1.766,2105,1.766,2106,1.766,2107,1.766,2108,1.766,2109,1.766,2110,1.766,2111,1.766,2112,2.359,2113,2.815,2114,2.815,2115,2.815,2116,2.815,2117,1.766,2118,1.766,2119,1.766,2120,1.766,2121,1.766,2122,1.766,2123,6.177,2124,4.66,2125,1.766,2126,1.766,2127,4.004,2128,3.51,2129,3.664,2130,1.766,2131,1.766,2132,1.766,2133,1.766,2134,1.766,2135,1.766,2136,2.815,2137,1.766,2138,1.766,2139,2.815,2140,1.766,2141,1.766,2142,1.766,2143,1.766,2144,1.766,2145,1.766,2146,1.766,2147,1.766,2148,1.766,2149,1.766,2150,1.766,2151,1.766,2152,1.766,2153,2.815,2154,2.815,2155,2.815,2156,1.766,2157,2.815,2158,1.766,2159,1.766,2160,1.766,2161,1.766,2162,1.766,2163,3.51,2164,1.766,2165,1.766,2166,1.766,2167,3.51,2168,1.766,2169,1.766,2170,1.766,2171,1.766,2172,1.766,2173,1.766,2174,1.766,2175,1.766,2176,1.766,2177,1.766,2178,1.766,2179,1.766,2180,1.766,2181,1.766,2182,1.766,2183,1.766,2184,1.766,2185,1.766,2186,1.766,2187,1.766,2188,1.766,2189,1.766,2190,1.766,2191,1.766,2192,1.766,2193,1.766,2194,1.766,2195,2.815,2196,1.766,2197,1.766,2198,1.766,2199,1.766,2200,1.766,2201,2.815,2202,1.766,2203,2.815,2204,2.815,2205,1.766,2206,1.766,2207,1.766,2208,1.766,2209,1.766,2210,1.766,2211,1.766,2212,1.766,2213,1.766,2214,1.766,2215,1.766,2216,1.766,2217,1.766,2218,1.766,2219,1.766,2220,1.766,2221,1.766,2222,1.766,2223,1.766,2224,1.766,2225,1.766,2226,1.766,2227,1.766,2228,1.48,2229,1.766,2230,1.766,2231,2.815,2232,1.766,2233,1.766,2234,1.766,2235,1.766,2236,1.766]],["title/contributing.html",[1986,1.765,2237,1.981,2238,2.27]],["body/contributing.html",[8,0.499,39,0.026,95,3.919,185,2.799,189,1.138,273,3.103,384,0.022,385,0.026,386,0.022,631,1.821,839,1.973,1551,3.483,1603,3.992,1782,3.992,1909,3.992,2021,3.483,2074,3.992,2112,3.992,2228,3.992,2238,5.042,2239,5.322,2240,4.765,2241,3.992,2242,4.765,2243,4.765,2244,4.765,2245,5.647,2246,4.765,2247,3.992,2248,4.765,2249,3.992,2250,4.765,2251,3.992,2252,5.647,2253,4.765,2254,4.765,2255,4.731,2256,4.765,2257,4.765,2258,4.765,2259,4.731,2260,4.765,2261,4.765,2262,4.765,2263,4.765,2264,3.992,2265,4.765,2266,4.765,2267,4.765,2268,4.765,2269,3.992,2270,3.992,2271,4.765,2272,4.765,2273,6.018,2274,5.647,2275,4.765,2276,4.765,2277,4.765,2278,3.992,2279,4.765,2280,4.765,2281,4.765,2282,3.992,2283,4.765,2284,4.765,2285,4.765,2286,4.765,2287,4.765,2288,4.765,2289,3.992,2290,4.765,2291,4.765,2292,3.992,2293,3.992,2294,4.765,2295,4.765]],["title/coverage.html",[2296,3.7]],["body/coverage.html",[0,0.473,1,2.986,5,0.313,6,3.423,7,2.89,35,2.66,39,0.031,41,0.361,45,0.694,46,1.056,121,0.899,140,3.423,384,0.019,385,0.023,386,0.019,398,2.4,534,2.514,539,2.4,567,2.66,569,3.423,593,2.986,594,3.423,595,3.757,599,2.4,669,1.998,670,3.423,676,2.4,694,1.998,699,2.66,712,2.183,714,2.66,720,2.183,721,3.423,724,2.66,740,2.66,741,3.423,803,3.02,805,3.423,806,3.146,814,2.183,816,2.183,818,1.691,868,2.986,869,3.423,953,3.663,954,3.663,962,2.183,964,1.998,1052,2.986,1053,3.423,1167,3.844,1169,3.423,1192,2.986,1193,3.423,1269,3.423,1317,5.66,1430,3.423,1431,3.423,1500,3.423,1601,3.423,1602,3.423,1618,3.423,1661,3.423,1726,2.986,1727,3.757,1735,2.66,1786,2.986,1787,3.423,1928,2.986,1929,3.423,1961,2.986,1962,3.423,2059,2.986,2060,4.307,2065,3.423,2296,3.423,2297,2.986,2298,4.085,2299,4.085,2300,4.085,2301,4.085,2302,4.085,2303,5.624,2304,5.14,2305,5.14,2306,5.624,2307,4.085,2308,5.14,2309,5.624,2310,4.085,2311,4.085,2312,5.14,2313,4.085,2314,4.085,2315,4.085,2316,4.085,2317,4.085,2318,4.085,2319,5.624,2320,4.085,2321,4.085,2322,4.085,2323,4.085,2324,3.423,2325,4.085,2326,4.085,2327,4.085,2328,4.085,2329,4.085,2330,4.085,2331,5.14,2332,4.085,2333,4.085,2334,4.085,2335,4.085,2336,4.085,2337,4.085,2338,4.085]],["title/dependencies.html",[390,2.537,2339,2.71]],["body/dependencies.html",[39,0.031,152,1.36,153,4.074,384,0.022,385,0.026,386,0.022,390,3.167,408,4.788,409,3.722,411,2.857,432,4.074,689,3.167,1701,3.555,1844,4.074,2340,4.863,2341,6.58,2342,4.863,2343,5.715,2344,4.863,2345,4.863,2346,4.863,2347,4.863,2348,4.863,2349,4.863,2350,4.863,2351,4.788,2352,4.863,2353,4.863,2354,4.863,2355,4.863,2356,4.863,2357,4.863,2358,4.863,2359,4.863,2360,4.863,2361,4.863,2362,4.863,2363,4.863,2364,4.863,2365,4.863,2366,4.863,2367,4.863,2368,4.863]],["title/index.html",[17,0.272,1986,1.765,2237,1.981]],["body/index.html",[4,0.361,14,2.307,15,1.953,39,0.026,45,0.801,46,1.55,173,3.072,218,2.307,246,3.952,247,3.449,273,3.072,318,1.984,347,3.072,384,0.022,385,0.026,386,0.022,409,3.656,534,2.307,574,1.953,597,3,612,3.449,689,3.072,697,3.072,698,1.953,833,1.803,857,2.521,1080,3.072,1235,2.772,1415,3.952,1889,3.449,2009,3.952,2010,3.449,2011,3.952,2241,3.952,2247,3.952,2269,3.952,2270,4.703,2293,3.952,2297,3.449,2351,3.952,2369,6.203,2370,4.718,2371,4.718,2372,4.718,2373,3.952,2374,4.718,2375,4.718,2376,4.718,2377,4.718,2378,4.718,2379,4.718,2380,4.718,2381,3.952,2382,5.993,2383,5.614,2384,4.703,2385,4.718,2386,3.952,2387,4.718,2388,4.718,2389,4.718,2390,4.718,2391,4.718,2392,4.718,2393,4.718,2394,4.718,2395,4.718,2396,4.718,2397,4.718,2398,4.718,2399,4.718,2400,4.718,2401,4.718,2402,4.718,2403,4.718,2404,4.718,2405,4.718,2406,4.718,2407,3.952,2408,4.718,2409,4.718,2410,4.718,2411,4.718,2412,4.718,2413,4.718,2414,4.718,2415,3.952,2416,4.718,2417,4.718]],["title/license.html",[1986,1.765,2237,1.981,2418,2.27]],["body/license.html",[0,0.176,4,0.462,5,0.435,8,0.221,14,1.225,36,0.284,39,0.02,40,0.494,45,0.425,87,2.098,93,1.225,97,1.631,98,2.824,118,1.831,128,1.631,130,1.619,139,0.351,189,0.598,212,4.29,237,1.339,252,3.083,269,1.831,271,1.339,333,3.083,384,0.017,385,0.017,386,0.011,574,1.037,583,4.29,598,4.027,616,1.831,669,1.225,687,3.514,691,2.098,702,1.406,804,1.631,822,1.125,825,1.339,830,1.125,839,1.037,854,1.225,900,4.853,905,3.13,963,1.225,964,1.225,968,2.84,1004,2.396,1037,1.472,1132,4.305,1156,4.29,1172,1.406,1210,1.831,1224,1.631,1235,1.472,1240,2.396,1315,1.831,1405,2.098,1473,3.083,1645,2.098,1768,2.098,1991,5.312,2010,4.815,2021,1.831,2078,2.098,2129,2.098,2239,2.098,2249,3.083,2251,4.853,2255,3.654,2259,2.098,2264,2.098,2278,2.098,2282,3.654,2289,2.098,2292,4.29,2297,3.188,2373,2.098,2381,3.083,2384,3.654,2386,2.098,2407,3.654,2415,2.098,2418,5.511,2419,4.807,2420,4.361,2421,2.505,2422,2.505,2423,2.505,2424,5.793,2425,6.101,2426,4.807,2427,5.12,2428,2.505,2429,6.2,2430,5.889,2431,2.505,2432,2.505,2433,5.889,2434,6.101,2435,5.353,2436,5.889,2437,3.679,2438,2.505,2439,5.12,2440,2.505,2441,2.505,2442,2.505,2443,4.807,2444,2.505,2445,5.793,2446,2.505,2447,4.807,2448,3.679,2449,3.679,2450,2.505,2451,4.361,2452,3.679,2453,3.679,2454,2.505,2455,6.31,2456,3.679,2457,5.353,2458,2.505,2459,3.679,2460,2.505,2461,2.505,2462,2.505,2463,2.505,2464,2.505,2465,2.505,2466,4.361,2467,2.505,2468,4.361,2469,3.679,2470,6.101,2471,2.505,2472,5.353,2473,4.807,2474,3.679,2475,2.505,2476,2.505,2477,2.505,2478,2.505,2479,2.505,2480,2.505,2481,2.505,2482,4.361,2483,2.505,2484,3.679,2485,2.505,2486,3.679,2487,2.505,2488,6.31,2489,2.505,2490,2.505,2491,2.505,2492,2.505,2493,2.505,2494,2.505,2495,3.679,2496,2.505,2497,2.505,2498,2.505,2499,2.505,2500,4.807,2501,2.505,2502,3.679,2503,4.807,2504,3.679,2505,2.505,2506,5.12,2507,3.679,2508,2.505,2509,2.505,2510,4.361,2511,2.505,2512,2.505,2513,2.505,2514,2.505,2515,3.679,2516,2.505,2517,4.361,2518,2.505,2519,2.505,2520,4.361,2521,2.505,2522,2.505,2523,2.505,2524,4.807,2525,5.889,2526,2.505,2527,2.505,2528,3.679,2529,5.676,2530,4.361,2531,3.679,2532,3.679,2533,3.679,2534,3.679,2535,3.679,2536,4.361,2537,3.679,2538,3.679,2539,3.679,2540,3.679,2541,2.505,2542,3.679,2543,2.505,2544,5.12,2545,5.533,2546,4.361,2547,3.679,2548,2.505,2549,3.679,2550,3.679,2551,2.505,2552,2.505,2553,4.361,2554,3.679,2555,2.505,2556,2.505,2557,2.505,2558,4.361,2559,2.505,2560,2.505,2561,2.505,2562,3.679,2563,3.679,2564,2.505,2565,2.505,2566,2.505,2567,2.505,2568,2.505,2569,2.505,2570,2.505,2571,3.679,2572,2.505,2573,2.505,2574,2.505,2575,2.505,2576,2.505,2577,2.505,2578,2.505,2579,2.505,2580,4.361,2581,2.505,2582,4.361,2583,2.505,2584,2.505,2585,2.505,2586,2.505,2587,5.676,2588,2.505,2589,2.505,2590,2.505,2591,2.505,2592,4.807,2593,3.679,2594,2.505,2595,2.505,2596,2.505,2597,2.505,2598,2.505,2599,4.361,2600,2.505,2601,3.679,2602,2.505,2603,2.505,2604,2.505,2605,2.505,2606,3.679,2607,2.505,2608,2.505,2609,2.505,2610,2.505,2611,2.505,2612,2.505,2613,2.505,2614,2.505,2615,2.505,2616,4.361,2617,4.807,2618,2.505,2619,2.505,2620,2.505,2621,2.505,2622,2.505,2623,2.505,2624,2.505,2625,2.505,2626,2.505,2627,3.679,2628,2.505,2629,2.505,2630,2.505,2631,2.505,2632,4.807,2633,2.505,2634,2.505,2635,2.505,2636,2.505,2637,2.505,2638,4.807,2639,4.361,2640,4.361,2641,4.361,2642,3.679,2643,3.679,2644,4.361,2645,3.679,2646,3.679,2647,3.679,2648,3.679,2649,2.505,2650,2.505,2651,2.505,2652,2.505,2653,2.505,2654,2.505,2655,3.679,2656,2.505,2657,2.505,2658,2.505,2659,5.12,2660,2.505,2661,2.505,2662,2.505,2663,2.505,2664,2.505,2665,2.505,2666,2.505,2667,2.505,2668,5.12,2669,2.505,2670,2.505,2671,2.505,2672,2.505,2673,2.505,2674,2.505,2675,2.505,2676,2.505,2677,2.505,2678,2.505,2679,2.505,2680,2.505,2681,2.505,2682,2.505,2683,2.505,2684,2.505,2685,2.505,2686,4.361,2687,2.505,2688,2.505,2689,2.098,2690,2.505,2691,3.679,2692,2.505,2693,2.505,2694,2.505,2695,2.505,2696,2.505,2697,2.505,2698,2.505,2699,2.505,2700,2.505,2701,2.505,2702,2.505,2703,2.505,2704,2.505,2705,2.505,2706,2.505,2707,2.505,2708,2.505,2709,3.679,2710,3.679,2711,2.505,2712,2.505,2713,2.505,2714,2.505,2715,2.505,2716,2.505,2717,2.505,2718,2.505,2719,2.505,2720,2.505,2721,2.505,2722,2.505,2723,2.505,2724,2.505,2725,2.505,2726,2.505,2727,2.505,2728,2.505,2729,2.505]],["title/modules.html",[389,3.228]],["body/modules.html",[39,0.027,384,0.024,385,0.027,386,0.024,388,3.42,389,3.839,409,3.42,1617,4.4,2689,4.4,2730,5.252]],["title/overview.html",[2731,3.7]],["body/overview.html",[2,0.786,39,0.028,176,1.422,189,1.4,237,2.717,384,0.023,385,0.027,386,0.023,387,4.287,388,4.137,390,3.31,391,4.259,392,4.259,393,4.259,394,4.259,395,3.31,396,4.259,397,4.259,398,3.631,399,4.287,400,4.259,567,3.31,631,1.943,638,4.259,804,3.31,1168,4.259,2731,4.259,2732,5.083]],["title/routes.html",[431,3.228]],["body/routes.html",[39,0.027,384,0.024,385,0.027,386,0.024,431,3.863]],["title/miscellaneous/variables.html",[2733,2.27,2734,3.264]],["body/miscellaneous/variables.html",[17,0.52,39,0.028,41,0.457,51,2.323,384,0.024,385,0.027,386,0.024,693,2.528,806,2.896,1727,3.779,1731,4.331,1735,4.159,2064,4.331,2324,4.331,2733,4.331,2734,4.331,2735,5.169,2736,5.169]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["0.0002",{"_index":1022,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1576,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.1",{"_index":652,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.11.1",{"_index":2368,"title":{},"body":{"dependencies.html":{}}}],["0.120.0",{"_index":2364,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1541,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":1024,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":664,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2358,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0x000fff",{"_index":2132,"title":{},"body":{"interfaces/Window.html":{}}}],["0x2194ce",{"_index":1540,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0x2fd691",{"_index":1161,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x41a6f4",{"_index":1111,"title":{},"body":{"classes/ImportManager.html":{}}}],["0xff0000",{"_index":651,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Window.html":{}}}],["0xffd166",{"_index":1579,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0xffffff",{"_index":663,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{},"overview.html":{}}}],["1.0.1",{"_index":2363,"title":{},"body":{"dependencies.html":{}}}],["1.2.3",{"_index":2357,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2304,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{}}}],["10.0.14",{"_index":2341,"title":{},"body":{"dependencies.html":{}}}],["10.1.3",{"_index":2343,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1317,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["1000000",{"_index":2037,"title":{},"body":{"classes/VRManager.html":{}}}],["11/11",{"_index":2305,"title":{},"body":{"coverage.html":{}}}],["1100.0",{"_index":1572,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["13/13",{"_index":2330,"title":{},"body":{"coverage.html":{}}}],["14/15",{"_index":2323,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":2334,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2349,"title":{},"body":{"dependencies.html":{}}}],["18/18",{"_index":2300,"title":{},"body":{"coverage.html":{}}}],["19/20",{"_index":2321,"title":{},"body":{"coverage.html":{}}}],["1].oncomplete",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":631,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"contributing.html":{},"overview.html":{}}}],["2.0",{"_index":2420,"title":{},"body":{"license.html":{}}}],["2.0.1",{"_index":2366,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2303,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2049,"title":{},"body":{"classes/VRManager.html":{}}}],["200",{"_index":1331,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2000",{"_index":1325,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2004",{"_index":2422,"title":{},"body":{"license.html":{}}}],["22/22",{"_index":2331,"title":{},"body":{"coverage.html":{}}}],["22/23",{"_index":2325,"title":{},"body":{"coverage.html":{}}}],["23/24",{"_index":2320,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["24/25",{"_index":2316,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":2732,"title":{},"body":{"overview.html":{}}}],["29/08/2020",{"_index":2006,"title":{},"body":{"classes/VRManager.html":{}}}],["29/30",{"_index":2313,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"contributing.html":{}}}],["3.1.0",{"_index":2354,"title":{},"body":{"dependencies.html":{}}}],["3.3333",{"_index":1925,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2360,"title":{},"body":{"dependencies.html":{}}}],["3.6.5",{"_index":2352,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2308,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["300).start",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["32",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["32/32",{"_index":2333,"title":{},"body":{"coverage.html":{}}}],["3200.0",{"_index":1574,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33/33",{"_index":2329,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":833,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["4",{"_index":638,"title":{},"body":{"classes/CMSObjects.html":{},"overview.html":{}}}],["4000.0",{"_index":1586,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["43/43",{"_index":2302,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":635,"title":{},"body":{"classes/CMSObjects.html":{}}}],["5/5",{"_index":2306,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1315,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"license.html":{}}}],["50/50",{"_index":2336,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2327,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6.6.2",{"_index":2361,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":2301,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":637,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7.3.4",{"_index":2385,"title":{},"body":{"index.html":{}}}],["7/7",{"_index":2307,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["9",{"_index":2432,"title":{},"body":{"license.html":{}}}],["9/9",{"_index":2309,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":2322,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":2319,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["ability",{"_index":2218,"title":{},"body":{"interfaces/Window.html":{}}}],["above",{"_index":2620,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":2688,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":2686,"title":{},"body":{"license.html":{}}}],["access",{"_index":2192,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["act",{"_index":2695,"title":{},"body":{"license.html":{}}}],["acting",{"_index":2441,"title":{},"body":{"license.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["activeobject",{"_index":1788,"title":{},"body":{"classes/SelectionManager.html":{}}}],["acts",{"_index":2666,"title":{},"body":{"license.html":{}}}],["actual",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":1172,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["add(data",{"_index":1174,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["addchild",{"_index":1442,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1460,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1196,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":1213,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1443,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig(type",{"_index":1462,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1313,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addendum",{"_index":2608,"title":{},"body":{"license.html":{}}}],["adding",{"_index":824,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["additional",{"_index":583,"title":{},"body":{"pipes/AttributePipe.html":{},"license.html":{}}}],["additions",{"_index":2501,"title":{},"body":{"license.html":{}}}],["addjetssizeoption",{"_index":1326,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addobjecttype",{"_index":1198,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":1225,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":749,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addrenderer",{"_index":1623,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1643,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":1217,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["advised",{"_index":2684,"title":{},"body":{"license.html":{}}}],["again",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["against",{"_index":2563,"title":{},"body":{"license.html":{}}}],["agnostic",{"_index":2375,"title":{},"body":{"index.html":{}}}],["agree",{"_index":2698,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":2641,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":2624,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":2568,"title":{},"body":{"license.html":{}}}],["alleventdata",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":2092,"title":{},"body":{"interfaces/Window.html":{}}}],["allowcustomvalue",{"_index":1337,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":733,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":878,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2215,"title":{},"body":{"interfaces/Window.html":{}}}],["allscripts",{"_index":1752,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alone",{"_index":2559,"title":{},"body":{"license.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"license.html":{}}}],["alongaxisposition",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alongside",{"_index":2607,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":1709,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1782,"title":{},"body":{"classes/ScriptLoader.html":{},"contributing.html":{}}}],["ambientlight",{"_index":1841,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1848,"title":{},"body":{"classes/SelectionManager.html":{}}}],["and(b",{"_index":2583,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":2589,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":2594,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2692,"title":{},"body":{"license.html":{}}}],["angle",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{}}}],["angular",{"_index":2382,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":2340,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":2342,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/cdk/overlay",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/common",{"_index":2344,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{}}}],["angular/compiler",{"_index":2345,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":2346,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":2347,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/checkbox",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/dialog",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/icon",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/slide",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/slider",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/tooltip",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatecameracomponent",{"_index":547,"title":{},"body":{"modules/AppModule.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventcomponent",{"_index":551,"title":{},"body":{"modules/AppModule.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationclipplane",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["annotations",{"_index":2493,"title":{},"body":{"license.html":{}}}],["antialias",{"_index":1708,"title":{},"body":{"classes/RendererManager.html":{}}}],["any).geometry",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2015,"title":{},"body":{"classes/VRManager.html":{}}}],["any)?.xr?.requestsession(vrmanager.session_type",{"_index":2022,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":1230,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["anypresetview",{"_index":679,"title":{},"body":{"classes/Configuration.html":{}}}],["apache",{"_index":2419,"title":{},"body":{"license.html":{}}}],["app",{"_index":2404,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["appear",{"_index":2603,"title":{},"body":{"license.html":{}}}],["appended",{"_index":1746,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["appendix",{"_index":2486,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":2639,"title":{},"body":{"license.html":{}}}],["application",{"_index":2247,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["applied",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["applies",{"_index":2552,"title":{},"body":{"license.html":{}}}],["apply",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{},"license.html":{}}}],["appmodule",{"_index":388,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":2294,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":2713,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":2654,"title":{},"body":{"license.html":{}}}],["archives",{"_index":2721,"title":{},"body":{"license.html":{}}}],["args",{"_index":578,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arguments",{"_index":584,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arising",{"_index":2673,"title":{},"body":{"license.html":{}}}],["around",{"_index":1999,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from(eventobject.geometry.attributes['position'].array",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1552,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["array.isarray(value",{"_index":588,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arrays",{"_index":1885,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2080,"title":{},"body":{"interfaces/Window.html":{}}}],["asserted",{"_index":2704,"title":{},"body":{"license.html":{}}}],["assets/preset",{"_index":1616,"title":{},"body":{"classes/PresetView.html":{}}}],["associated",{"_index":854,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["assume",{"_index":2656,"title":{},"body":{"license.html":{}}}],["async",{"_index":1751,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["atlas",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["atlascomponent",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["attach",{"_index":2706,"title":{},"body":{"license.html":{}}}],["attached",{"_index":2485,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":580,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Cut.html":{},"classes/ScriptLoader.html":{}}}],["attributename",{"_index":1881,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributepipe",{"_index":398,"title":{"pipes/AttributePipe.html":{}},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["attributes",{"_index":572,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1882,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attribution",{"_index":2592,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":2437,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":2482,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":1293,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["automatically",{"_index":2405,"title":{},"body":{"index.html":{}}}],["autorotatecomponent",{"_index":500,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1645,"title":{},"body":{"classes/RendererManager.html":{},"license.html":{}}}],["available/created",{"_index":1642,"title":{},"body":{"classes/RendererManager.html":{}}}],["await",{"_index":1762,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1842,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1850,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1684,"title":{},"body":{"classes/RendererManager.html":{}}}],["b_first",{"_index":988,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":983,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":982,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":633,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs",{"_index":618,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":624,"title":{},"body":{"classes/CMSObjects.html":{}}}],["based",{"_index":2489,"title":{},"body":{"license.html":{}}}],["basis",{"_index":2643,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":2506,"title":{},"body":{"license.html":{}}}],["behaviorsubject",{"_index":1803,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1097,"title":{},"body":{"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{}}}],["below",{"_index":2487,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":2465,"title":{},"body":{"license.html":{}}}],["best",{"_index":2240,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":573,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["bind",{"_index":2499,"title":{},"body":{"license.html":{}}}],["blob",{"_index":889,"title":{},"body":{"classes/ExportManager.html":{}}}],["blob([text",{"_index":943,"title":{},"body":{"classes/ExportManager.html":{}}}],["bloom",{"_index":746,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boilerplate",{"_index":2707,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":685,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["both",{"_index":1083,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":641,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2019,"title":{},"body":{"classes/VRManager.html":{}}}],["box",{"_index":625,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":645,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":646,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":629,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":626,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":647,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":659,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":649,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":655,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":654,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":668,"title":{},"body":{"classes/CMSObjects.html":{}}}],["brackets",{"_index":2710,"title":{},"body":{"license.html":{}}}],["break",{"_index":1300,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["brief",{"_index":2256,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":2730,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/animations",{"_index":444,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1686,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":648,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bug",{"_index":2252,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":1889,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["buildeventdata",{"_index":807,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":812,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2111,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2110,"title":{},"body":{"interfaces/Window.html":{}}}],["calculated",{"_index":1042,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(eventdata",{"_index":1146,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2109,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":1150,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":1114,"title":{},"body":{"classes/ImportManager.html":{}}}],["callbacks",{"_index":2068,"title":{},"body":{"interfaces/Window.html":{}}}],["called",{"_index":1076,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":2189,"title":{},"body":{"interfaces/Window.html":{}}}],["caloclusters",{"_index":1233,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["camera())?.getworlddirection(direction",{"_index":2056,"title":{},"body":{"classes/VRManager.html":{}}}],["camera().copy(camera",{"_index":2033,"title":{},"body":{"classes/VRManager.html":{}}}],["camera.component",{"_index":550,"title":{},"body":{"modules/AppModule.html":{}}}],["camera/animate",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["cameragroup",{"_index":1964,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1606,"title":{},"body":{"classes/PresetView.html":{}}}],["cameras",{"_index":2162,"title":{},"body":{"interfaces/Window.html":{}}}],["cancelanimationframe(this.frameid",{"_index":2086,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1641,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1862,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1860,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('touchstart",{"_index":1864,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1867,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1866,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('touchstart",{"_index":1868,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1705,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":823,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["carry",{"_index":2585,"title":{},"body":{"license.html":{}}}],["casting",{"_index":1135,"title":{},"body":{"classes/ImportManager.html":{}}}],["cause",{"_index":2453,"title":{},"body":{"license.html":{}}}],["chamber",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["changed",{"_index":2278,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["changes",{"_index":2070,"title":{},"body":{"interfaces/Window.html":{}}}],["changing",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["character",{"_index":2672,"title":{},"body":{"license.html":{}}}],["charge",{"_index":968,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"license.html":{}}}],["check",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checked",{"_index":1648,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1017,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["child",{"_index":1127,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["child.castshadow",{"_index":1137,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material",{"_index":1133,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":1165,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":1164,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":1166,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color",{"_index":1139,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.dispose",{"_index":1134,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['color",{"_index":1160,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['side",{"_index":1162,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":1128,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.nodelevel",{"_index":1483,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1482,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.receiveshadow",{"_index":1138,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1499,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.userdata",{"_index":1130,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata.name",{"_index":1159,"title":{},"body":{"classes/ImportManager.html":{}}}],["childindex",{"_index":1486,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1433,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrenactive",{"_index":1434,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["choose",{"_index":2259,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["claim",{"_index":2565,"title":{},"body":{"license.html":{}}}],["claims",{"_index":2554,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"overview.html":{}}}],["clearing",{"_index":2114,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2052,"title":{},"body":{"classes/VRManager.html":{}}}],["cli",{"_index":2383,"title":{},"body":{"index.html":{}}}],["click",{"_index":1812,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1893,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2220,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":1117,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipintersection",{"_index":1124,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["clipping.component",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["clipping/object",{"_index":492,"title":{},"body":{"modules/AppModule.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingplanes",{"_index":1123,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipplanes",{"_index":1054,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipshadows",{"_index":1125,"title":{},"body":{"classes/ImportManager.html":{}}}],["clock",{"_index":780,"title":{},"body":{"classes/EffectsManager.html":{}}}],["cloned",{"_index":1992,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":1910,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1383,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["cluster_appmodule",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":397,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["clustercoll",{"_index":1375,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1373,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1376,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1378,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1377,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1381,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1575,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1583,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1599,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":1246,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":562,"title":{},"body":{"modules/AppModule.html":{},"classes/CMSObjects.html":{}}}],["cmscomponent",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["cmsloader",{"_index":2311,"title":{},"body":{"coverage.html":{}}}],["cmsobjects",{"_index":593,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["code",{"_index":2282,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["coding",{"_index":2267,"title":{},"body":{"contributing.html":{}}}],["collected",{"_index":1425,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":842,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":937,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectionname",{"_index":843,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":848,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections.push(collection",{"_index":1310,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionsinfocomponent",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionsinfooverlaycomponent",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionslist",{"_index":1354,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1371,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1362,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1367,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1364,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["color).set(color",{"_index":1140,"title":{},"body":{"classes/ImportManager.html":{}}}],["colour",{"_index":2195,"title":{},"body":{"interfaces/Window.html":{}}}],["combination",{"_index":2560,"title":{},"body":{"license.html":{}}}],["combined",{"_index":1426,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1412,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1421,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["command",{"_index":2398,"title":{},"body":{"index.html":{}}}],["comment",{"_index":2714,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2681,"title":{},"body":{"license.html":{}}}],["common",{"_index":2446,"title":{},"body":{"license.html":{}}}],["communication",{"_index":2510,"title":{},"body":{"license.html":{}}}],["compiled",{"_index":2478,"title":{},"body":{"license.html":{}}}],["complete",{"_index":2168,"title":{},"body":{"interfaces/Window.html":{}}}],["completes",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["compliance",{"_index":2724,"title":{},"body":{"license.html":{}}}],["complies",{"_index":2614,"title":{},"body":{"license.html":{}}}],["component",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["components",{"_index":2076,"title":{},"body":{"interfaces/Window.html":{}}}],["components/home/home.component",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["components/nav/nav.component",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["components/phoenix",{"_index":538,"title":{},"body":{"modules/AppModule.html":{},"classes/Configuration.html":{},"classes/PhoenixLoader.html":{}}}],["components/ui",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["composer",{"_index":747,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":966,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["computer",{"_index":2678,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":2425,"title":{},"body":{"license.html":{}}}],["cone",{"_index":1538,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1464,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1435,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configoptions",{"_index":1494,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1436,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslidercomponent",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["configurable",{"_index":1291,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["configuration",{"_index":669,"title":{"classes/Configuration.html":{}},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["configure",{"_index":2002,"title":{},"body":{"classes/VRManager.html":{}}}],["consequential",{"_index":2671,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2694,"title":{},"body":{"license.html":{}}}],["console",{"_index":2093,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('cannot",{"_index":1490,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('error",{"_index":1780,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log('event",{"_index":1956,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":1260,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log(objectparams",{"_index":1368,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["console.log(tracks",{"_index":1301,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["conspicuously",{"_index":2521,"title":{},"body":{"license.html":{}}}],["const",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constitutes",{"_index":2569,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constructor(camera",{"_index":752,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(clipplanes",{"_index":1065,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(enabledatguimenu",{"_index":684,"title":{},"body":{"classes/Configuration.html":{}}}],["constructor(field",{"_index":727,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1447,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["construed",{"_index":2609,"title":{},"body":{"license.html":{}}}],["contact",{"_index":2411,"title":{},"body":{"index.html":{}}}],["contained",{"_index":2597,"title":{},"body":{"license.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2172,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1649,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":864,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1624,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1646,"title":{},"body":{"classes/RendererManager.html":{}}}],["containspoint(new",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["content",{"_index":2129,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["contents",{"_index":2604,"title":{},"body":{"license.html":{}}}],["context",{"_index":2257,"title":{},"body":{"contributing.html":{}}}],["contract",{"_index":2456,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":2410,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":2238,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":2292,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contribution(s",{"_index":2558,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":2616,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":2525,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":2570,"title":{},"body":{"license.html":{}}}],["control",{"_index":2443,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":2444,"title":{},"body":{"license.html":{}}}],["controller",{"_index":1965,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":828,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["controls.component",{"_index":528,"title":{},"body":{"modules/AppModule.html":{}}}],["controls/zoom",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["controlsmanager",{"_index":1661,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["controlsmanager.getoverlaycamera",{"_index":1694,"title":{},"body":{"classes/RendererManager.html":{}}}],["conversions",{"_index":2479,"title":{},"body":{"license.html":{}}}],["copies",{"_index":2577,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2582,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2434,"title":{},"body":{"license.html":{}}}],["core",{"_index":2350,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["counterclaim",{"_index":2566,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2296,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coveralls",{"_index":2353,"title":{},"body":{"dependencies.html":{}}}],["covering",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1523,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["created",{"_index":2005,"title":{},"body":{"classes/VRManager.html":{}}}],["creating",{"_index":2112,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["cross",{"_index":2564,"title":{},"body":{"license.html":{}}}],["css",{"_index":2355,"title":{},"body":{"dependencies.html":{}}}],["ctheta",{"_index":1527,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1580,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1596,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1598,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1588,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1590,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1592,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1597,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1600,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":901,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":1966,"title":{},"body":{"classes/VRManager.html":{}}}],["custom",{"_index":1155,"title":{},"body":{"classes/ImportManager.html":{}}}],["customary",{"_index":2634,"title":{},"body":{"license.html":{}}}],["customize",{"_index":2079,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":720,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["cut('chi2",{"_index":1314,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('dof",{"_index":1316,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('energy",{"_index":1324,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1323,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('mom",{"_index":1318,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1322,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":1227,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":1358,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["d3.min.js",{"_index":1757,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["damages",{"_index":2668,"title":{},"body":{"license.html":{}}}],["darkthemecomponent",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["dat.gui",{"_index":689,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{},"dependencies.html":{},"index.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["data.length",{"_index":1958,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":1098,"title":{},"body":{"classes/ImportManager.html":{}}}],["date",{"_index":2574,"title":{},"body":{"license.html":{}}}],["decided",{"_index":2268,"title":{},"body":{"contributing.html":{}}}],["declarations",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1750,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["defaultrenderpass",{"_index":748,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1747,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defend",{"_index":2700,"title":{},"body":{"license.html":{}}}],["define",{"_index":955,"title":{},"body":{"classes/Field.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"license.html":{}}}],["defining",{"_index":2191,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":2448,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":2428,"title":{},"body":{"license.html":{}}}],["delete",{"_index":1491,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["deliberate",{"_index":2663,"title":{},"body":{"license.html":{}}}],["demo",{"_index":2389,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":390,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derivative",{"_index":2488,"title":{},"body":{"license.html":{}}}],["derived",{"_index":2490,"title":{},"body":{"license.html":{}}}],["descendants",{"_index":1472,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1610,"title":{},"body":{"classes/PresetView.html":{}}}],["describing",{"_index":2635,"title":{},"body":{"license.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["designated",{"_index":2523,"title":{},"body":{"license.html":{}}}],["desired",{"_index":846,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["determining",{"_index":2653,"title":{},"body":{"license.html":{}}}],["dev",{"_index":2400,"title":{},"body":{"index.html":{}}}],["developer",{"_index":2269,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["developers",{"_index":2266,"title":{},"body":{"contributing.html":{}}}],["dflt_colors",{"_index":2154,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog.component",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["dialog/io",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["different",{"_index":825,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":1044,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direct",{"_index":2451,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1037,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"license.html":{}}}],["directionallight",{"_index":1840,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1849,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directory",{"_index":2399,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1820,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":1652,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1795,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disclaimer",{"_index":2637,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":2518,"title":{},"body":{"license.html":{}}}],["display",{"_index":702,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["displayed",{"_index":852,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayurl",{"_index":2200,"title":{},"body":{"interfaces/Window.html":{}}}],["disposing",{"_index":1163,"title":{},"body":{"classes/ImportManager.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["distribute",{"_index":2544,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2599,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":2427,"title":{},"body":{"license.html":{}}}],["dividing",{"_index":1402,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1768,"title":{},"body":{"classes/ScriptLoader.html":{},"license.html":{}}}],["document.body",{"_index":1704,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":948,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":945,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('script",{"_index":1772,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('eventdisplay",{"_index":1703,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementbyid('three",{"_index":1859,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1745,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2297,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["don't",{"_index":2415,"title":{},"body":{"index.html":{},"license.html":{}}}],["done",{"_index":2377,"title":{},"body":{"index.html":{}}}],["doubleside",{"_index":614,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["doublesided",{"_index":1078,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":904,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":893,"title":{},"body":{"classes/ExportManager.html":{}}}],["dragdropmodule",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["draw",{"_index":832,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["drop",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamic",{"_index":2348,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":1729,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["easier",{"_index":2719,"title":{},"body":{"license.html":{}}}],["easily",{"_index":1603,"title":{},"body":{"classes/PresetView.html":{},"contributing.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":658,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":611,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":660,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["editorial",{"_index":2491,"title":{},"body":{"license.html":{}}}],["edward.moyse@cern.ch",{"_index":2417,"title":{},"body":{"index.html":{}}}],["effect",{"_index":762,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":760,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":785,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":742,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["effectsmanager",{"_index":740,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["elaborations",{"_index":2494,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":2507,"title":{},"body":{"license.html":{}}}],["element",{"_index":1701,"title":{},"body":{"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"dependencies.html":{}}}],["elements",{"_index":770,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":688,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1651,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["enabledatguimenu",{"_index":675,"title":{},"body":{"classes/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2190,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2232,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2188,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1796,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2222,"title":{},"body":{"interfaces/Window.html":{}}}],["enclosed",{"_index":2709,"title":{},"body":{"license.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["end.chain(startclone",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2100,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":1973,"title":{},"body":{"classes/VRManager.html":{}}}],["enhancement",{"_index":2262,"title":{},"body":{"contributing.html":{}}}],["entities",{"_index":2442,"title":{},"body":{"license.html":{}}}],["entity",{"_index":2436,"title":{},"body":{"license.html":{}}}],["entries",{"_index":1184,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["entry",{"_index":1177,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["entrycomponents",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2394,"title":{},"body":{"index.html":{}}}],["error",{"_index":1018,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["error_estimate",{"_index":1020,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":1019,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["etc",{"_index":1249,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["even",{"_index":2683,"title":{},"body":{"license.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["event.clientx",{"_index":1900,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1903,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.component",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["event.preventdefault",{"_index":1895,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event/animate",{"_index":552,"title":{},"body":{"modules/AppModule.html":{}}}],["event_data_id",{"_index":1055,"title":{},"body":{"classes/ImportManager.html":{}}}],["eventdata",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1344,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":933,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.hits",{"_index":1341,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.jets",{"_index":1321,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1347,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.tracks",{"_index":1312,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdataconfig",{"_index":928,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":935,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":938,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1409,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1419,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":676,"title":{"interfaces/EventDataLoader.html":{}},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["eventdataprop",{"_index":1414,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1418,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1411,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1407,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1417,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":2061,"title":{},"body":{"interfaces/Window.html":{}}}],["eventdisplayservice",{"_index":2065,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["eventkey",{"_index":2119,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2102,"title":{},"body":{"interfaces/Window.html":{}}}],["eventname",{"_index":1303,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventnum",{"_index":1944,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":1261,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.dividescalar(previousscale",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals(new",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":861,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":863,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventsdata[eventname",{"_index":1305,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventselectorcomponent",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["eventslist",{"_index":1302,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventslist.push(eventname",{"_index":1306,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["everything",{"_index":2395,"title":{},"body":{"index.html":{}}}],["example",{"_index":1405,"title":{},"body":{"classes/PhoenixLoader.html":{},"license.html":{}}}],["except",{"_index":2546,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":2520,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":2537,"title":{},"body":{"license.html":{}}}],["executed",{"_index":2625,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":2658,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":2467,"title":{},"body":{"license.html":{}}}],["existing",{"_index":2115,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":855,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["experimentinfocomponent",{"_index":511,"title":{},"body":{"modules/AppModule.html":{}}}],["explaining",{"_index":2277,"title":{},"body":{"contributing.html":{}}}],["explicitly",{"_index":2618,"title":{},"body":{"license.html":{}}}],["explore",{"_index":2242,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":883,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":911,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":922,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":912,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":868,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2144,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":870,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":877,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["exportscenetoobj",{"_index":871,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":885,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2133,"title":{},"body":{"interfaces/Window.html":{}}}],["express",{"_index":2646,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":1257,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":1228,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extends",{"_index":1194,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1730,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extra",{"_index":2265,"title":{},"body":{"contributing.html":{}}}],["extraanimationsphereduration",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolating",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extras/configuration.model",{"_index":2062,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1283,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["extras/runge",{"_index":1285,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["face3",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":630,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":640,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":632,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":634,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":636,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":642,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":617,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":627,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":621,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2053,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2163,"title":{},"body":{"interfaces/Window.html":{}}}],["failure",{"_index":2679,"title":{},"body":{"license.html":{}}}],["false",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["feature",{"_index":2253,"title":{},"body":{"contributing.html":{}}}],["fee",{"_index":2687,"title":{},"body":{"license.html":{}}}],["feel",{"_index":2248,"title":{},"body":{"contributing.html":{}}}],["few",{"_index":1519,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":2180,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1025,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1026,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":724,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1001,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1008,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":989,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fields",{"_index":2708,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":2460,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["file.readobject(objectname",{"_index":2161,"title":{},"body":{"interfaces/Window.html":{}}}],["filed",{"_index":2575,"title":{},"body":{"license.html":{}}}],["filename",{"_index":890,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["files",{"_index":2407,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":730,"title":{},"body":{"classes/Cut.html":{}}}],["filter(hitposition",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["filter(val",{"_index":1887,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":731,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":723,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":2287,"title":{},"body":{"contributing.html":{}}}],["finding",{"_index":1828,"title":{},"body":{"classes/SelectionManager.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["fitness",{"_index":2650,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":1639,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1619,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2224,"title":{},"body":{"interfaces/Window.html":{}}}],["fixing",{"_index":2286,"title":{},"body":{"contributing.html":{}}}],["fixoverlayview(fixed",{"_index":2225,"title":{},"body":{"interfaces/Window.html":{}}}],["flatten",{"_index":1100,"title":{},"body":{"classes/ImportManager.html":{}}}],["float32array([].concat(...reachedhits",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1555,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2018,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":1236,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["follow",{"_index":2393,"title":{},"body":{"index.html":{}}}],["following",{"_index":2580,"title":{},"body":{"license.html":{}}}],["form",{"_index":2470,"title":{},"body":{"license.html":{}}}],["format",{"_index":574,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["found",{"_index":2271,"title":{},"body":{"contributing.html":{}}}],["frame",{"_index":2066,"title":{},"body":{"interfaces/Window.html":{}}}],["frameid",{"_index":2067,"title":{},"body":{"interfaces/Window.html":{}}}],["free",{"_index":2249,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["front",{"_index":628,"title":{},"body":{"classes/CMSObjects.html":{}}}],["frontside",{"_index":1103,"title":{},"body":{"classes/ImportManager.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":831,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":919,"title":{},"body":{"classes/ExportManager.html":{}}}],["generated",{"_index":2381,"title":{},"body":{"index.html":{},"license.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["geom",{"_index":2177,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":837,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":939,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2219,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":1056,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":930,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":941,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.name",{"_index":1154,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.scale.set(scale",{"_index":1157,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.setattribute('position",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.traverse((child",{"_index":1158,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":2214,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrycomponent",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["geometryposcount",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(displayurl",{"_index":2202,"title":{},"body":{"interfaces/Window.html":{}}}],["get(field",{"_index":956,"title":{},"body":{"classes/Field.html":{}}}],["get(gltfurl",{"_index":2207,"title":{},"body":{"interfaces/Window.html":{}}}],["getactiveobjectid",{"_index":1797,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcameragroup",{"_index":1974,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":1990,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1501,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1505,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":808,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":840,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":809,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":1195,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":1940,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventdataloader",{"_index":680,"title":{},"body":{"classes/Configuration.html":{}}}],["geteventmetadata",{"_index":810,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":811,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":858,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":1502,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1507,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1608,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologgerlist",{"_index":1173,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["getjet",{"_index":1503,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1510,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlocalclipping",{"_index":1625,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1626,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":1199,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":1243,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getobject",{"_index":1214,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1366,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":1200,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":1247,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1627,"title":{},"body":{"classes/RendererManager.html":{}}}],["getphoenixmenuroot",{"_index":681,"title":{},"body":{"classes/Configuration.html":{}}}],["getrenderers",{"_index":1628,"title":{},"body":{"classes/RendererManager.html":{}}}],["getting",{"_index":2237,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettrack",{"_index":1504,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1513,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1201,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1250,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getvrcamera",{"_index":1975,"title":{},"body":{"classes/VRManager.html":{}}}],["github",{"_index":2243,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":2264,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["given",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["giving",{"_index":1826,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":2064,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["gltf",{"_index":920,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":1148,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":1144,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":1145,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":908,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":1106,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfurl",{"_index":2206,"title":{},"body":{"interfaces/Window.html":{}}}],["goodwill",{"_index":2676,"title":{},"body":{"license.html":{}}}],["governing",{"_index":2728,"title":{},"body":{"license.html":{}}}],["grant",{"_index":2530,"title":{},"body":{"license.html":{}}}],["granted",{"_index":2469,"title":{},"body":{"license.html":{}}}],["granting",{"_index":2438,"title":{},"body":{"license.html":{}}}],["grants",{"_index":2533,"title":{},"body":{"license.html":{}}}],["graphic",{"_index":826,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":813,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2164,"title":{},"body":{"interfaces/Window.html":{}}}],["grossly",{"_index":2664,"title":{},"body":{"license.html":{}}}],["group",{"_index":610,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1404,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guide",{"_index":2270,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["h",{"_index":994,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1009,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":980,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":981,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1002,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2020,"title":{},"body":{"classes/VRManager.html":{}}}],["handles",{"_index":1222,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["harmless",{"_index":2702,"title":{},"body":{"license.html":{}}}],["hasposition",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["help",{"_index":2279,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":2272,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":2532,"title":{},"body":{"license.html":{}}}],["herein",{"_index":2621,"title":{},"body":{"license.html":{}}}],["hide",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["highlight",{"_index":1825,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":768,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1798,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1823,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["hit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1557,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1558,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1559,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":1960,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":1930,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["hits.split('\\n",{"_index":1955,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":1509,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1553,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1570,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1550,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["hold",{"_index":2701,"title":{},"body":{"license.html":{}}}],["home",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["homecomponent",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["hovered",{"_index":769,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1808,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2211,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1670,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1742,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["http",{"_index":2073,"title":{},"body":{"interfaces/Window.html":{}}}],["http://localhost:4200",{"_index":2403,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":2423,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":2726,"title":{},"body":{"license.html":{}}}],["httpclient",{"_index":2063,"title":{},"body":{"interfaces/Window.html":{}}}],["httpclientmodule",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["https://hepsoftwarefoundation.org/phoenix",{"_index":2388,"title":{},"body":{"index.html":{}}}],["icon",{"_index":1437,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["id",{"_index":1067,"title":{},"body":{"classes/ImportManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["idea",{"_index":2370,"title":{},"body":{"index.html":{}}}],["identification",{"_index":2720,"title":{},"body":{"license.html":{}}}],["identified",{"_index":2290,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":2298,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1221,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["identifying",{"_index":2712,"title":{},"body":{"license.html":{}}}],["ignored",{"_index":1807,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1789,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ii",{"_index":2458,"title":{},"body":{"license.html":{}}}],["iii",{"_index":2464,"title":{},"body":{"license.html":{}}}],["immersive",{"_index":1987,"title":{},"body":{"classes/VRManager.html":{}}}],["implements",{"_index":586,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/PhoenixLoader.html":{}}}],["implied",{"_index":2647,"title":{},"body":{"license.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["importmanager",{"_index":1052,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["imports",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["improved",{"_index":2254,"title":{},"body":{"contributing.html":{}}}],["improving",{"_index":2519,"title":{},"body":{"license.html":{}}}],["inability",{"_index":2674,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2670,"title":{},"body":{"license.html":{}}}],["include",{"_index":2255,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["included",{"_index":2484,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2595,"title":{},"body":{"license.html":{}}}],["including",{"_index":900,"title":{},"body":{"classes/ExportManager.html":{},"license.html":{}}}],["inclusion",{"_index":2504,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":2528,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":2703,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":2699,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":2690,"title":{},"body":{"license.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":2483,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":2452,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2466,"title":{},"body":{"license.html":{}}}],["infinity",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["info.component",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["info/collections",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["info/experiment",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["infologger",{"_index":817,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["infologger.service",{"_index":867,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["infologgerlist",{"_index":1170,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["infologgerservice",{"_index":818,"title":{"injectables/InfoLoggerService.html":{}},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infopanelcomponent",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["infopaneloverlaycomponent",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["information",{"_index":839,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["informational",{"_index":2605,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":2557,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":2571,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1204,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1799,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(camera",{"_index":1829,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2081,"title":{},"body":{"interfaces/Window.html":{}}}],["initial",{"_index":1675,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":767,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["initialized",{"_index":1809,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2075,"title":{},"body":{"interfaces/Window.html":{}}}],["initially",{"_index":2124,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2123,"title":{},"body":{"interfaces/Window.html":{}}}],["initvr(onsessionended",{"_index":2097,"title":{},"body":{"interfaces/Window.html":{}}}],["injectable",{"_index":1167,"title":{"injectables/InfoLoggerService.html":{}},"body":{"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["injectables",{"_index":1168,"title":{},"body":{"injectables/InfoLoggerService.html":{},"overview.html":{}}}],["input",{"_index":918,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["inside",{"_index":757,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2390,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2391,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["instantiate",{"_index":910,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["instead",{"_index":1493,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":1937,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["institute",{"_index":2561,"title":{},"body":{"license.html":{}}}],["integrator",{"_index":979,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["intentionally",{"_index":2502,"title":{},"body":{"license.html":{}}}],["interface",{"_index":803,"title":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":804,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"license.html":{},"overview.html":{}}}],["intersected",{"_index":1834,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1870,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1875,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1883,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1800,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1831,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1833,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1908,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1911,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2041,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2042,"title":{},"body":{"classes/VRManager.html":{}}}],["invisible",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["iooptionscomponent",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["iooptionsdialogcomponent",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["irrevocable",{"_index":2539,"title":{},"body":{"license.html":{}}}],["isfixedoverlay",{"_index":1629,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1790,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":2239,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["issues",{"_index":2284,"title":{},"body":{"contributing.html":{}}}],["item",{"_index":1432,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["item.component",{"_index":536,"title":{},"body":{"modules/AppModule.html":{}}}],["item/phoenix",{"_index":542,"title":{},"body":{"modules/AppModule.html":{}}}],["item/tree",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["items",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["iterating",{"_index":1410,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1471,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":1268,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["january",{"_index":2421,"title":{},"body":{"license.html":{}}}],["jet",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1512,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1548,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":1232,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["jetsscale",{"_index":1330,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexmlloader",{"_index":2315,"title":{},"body":{"coverage.html":{}}}],["joining",{"_index":1423,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2351,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["json",{"_index":1080,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["json.parse(input",{"_index":2139,"title":{},"body":{"interfaces/Window.html":{}}}],["json.stringify(geometry",{"_index":1142,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":925,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsonresult",{"_index":923,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1735,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.newhttprequest(url",{"_index":2152,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url",{"_index":2160,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot3dpainter.js",{"_index":1759,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootcore.js",{"_index":1753,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":2318,"title":{},"body":{"coverage.html":{}}}],["jsrootgeobase.js",{"_index":1760,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootgeopainter.js",{"_index":1761,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootpainter.js",{"_index":1758,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2359,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":991,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1012,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":984,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":985,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":986,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1013,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1594,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":844,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2095,"title":{},"body":{"interfaces/Window.html":{}}}],["keys",{"_index":862,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kind",{"_index":2645,"title":{},"body":{"license.html":{}}}],["know",{"_index":2413,"title":{},"body":{"index.html":{}}}],["kutta",{"_index":961,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":954,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:121",{"_index":1922,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:123",{"_index":1918,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:125",{"_index":1920,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:127",{"_index":1923,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:129",{"_index":1926,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:13",{"_index":1725,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:131",{"_index":1924,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:133",{"_index":1919,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:135",{"_index":1921,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:145",{"_index":957,"title":{},"body":{"classes/Field.html":{}}}],["kutta.ts:91",{"_index":1723,"title":{},"body":{"classes/RungeKutta.html":{}}}],["label",{"_index":1175,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["labels",{"_index":2260,"title":{},"body":{"contributing.html":{}}}],["language",{"_index":2727,"title":{},"body":{"license.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["later",{"_index":880,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["law",{"_index":2640,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":2567,"title":{},"body":{"license.html":{}}}],["left",{"_index":643,"title":{},"body":{"classes/CMSObjects.html":{}}}],["legal",{"_index":2439,"title":{},"body":{"license.html":{}}}],["legend",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":1041,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1456,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":561,"title":{},"body":{"modules/AppModule.html":{},"classes/LHCbLoader.html":{}}}],["lhcbcomponent",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["lhcbloader",{"_index":1192,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["liability",{"_index":2659,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2667,"title":{},"body":{"license.html":{}}}],["library",{"_index":827,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["licensable",{"_index":2555,"title":{},"body":{"license.html":{}}}],["license",{"_index":2418,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":2611,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":2723,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":2572,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":2433,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":2648,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":2729,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2473,"title":{},"body":{"license.html":{}}}],["line",{"_index":612,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["linebasicmaterial",{"_index":613,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["lineboxobject",{"_index":661,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":657,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":615,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["linesegments(boxedges",{"_index":662,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":616,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"license.html":{}}}],["link.click",{"_index":952,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":951,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":949,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":946,"title":{},"body":{"classes/ExportManager.html":{}}}],["list",{"_index":850,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2183,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2185,"title":{},"body":{"interfaces/Window.html":{}}}],["lists",{"_index":2514,"title":{},"body":{"license.html":{}}}],["literal",{"_index":1724,"title":{},"body":{"classes/RungeKutta.html":{},"classes/SelectionManager.html":{}}}],["litigation",{"_index":2562,"title":{},"body":{"license.html":{}}}],["load",{"_index":879,"title":{},"body":{"classes/ExportManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loaded",{"_index":884,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":673,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loader.load(json",{"_index":1152,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.load(sceneurl",{"_index":1147,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(json",{"_index":1153,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":1143,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.ts",{"_index":806,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":1938,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:111",{"_index":1278,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":1936,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:127",{"_index":1276,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:13",{"_index":1736,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:148",{"_index":1275,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:169",{"_index":1282,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:17",{"_index":819,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:19",{"_index":1271,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:21",{"_index":1270,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":1212,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:24",{"_index":859,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:241",{"_index":1273,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:269",{"_index":1272,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":1946,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:292",{"_index":1280,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:30",{"_index":847,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:309",{"_index":1279,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":1208,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:32",{"_index":1274,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:348",{"_index":1277,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:35",{"_index":1743,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:37",{"_index":841,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:43",{"_index":853,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:44",{"_index":1949,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:50",{"_index":1281,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:62",{"_index":1209,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:65",{"_index":1951,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:8",{"_index":1203,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":1941,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loaders/phoenix",{"_index":713,"title":{},"body":{"classes/Configuration.html":{}}}],["loadevent(eventkey",{"_index":2120,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":1057,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":1070,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadgltfgeometry(url",{"_index":2148,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":693,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["loadjsongeometry",{"_index":1058,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsongeometry(json",{"_index":1077,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":1732,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(onscriptsloaded",{"_index":1734,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":1202,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":1253,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":1059,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":1085,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadobjgeometry(filename",{"_index":2125,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry(jsroot",{"_index":2158,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry(jsroot",{"_index":2151,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":1072,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration",{"_index":2199,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2173,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1733,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1739,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["local",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"index.html":{}}}],["locally",{"_index":2392,"title":{},"body":{"index.html":{}}}],["log",{"_index":1179,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/SelectionManager.html":{}}}],["logger",{"_index":1178,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/SelectionManager.html":{}}}],["logging",{"_index":838,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["logs",{"_index":1182,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["look",{"_index":2228,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["lookatobject(uuid",{"_index":2229,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2087,"title":{},"body":{"interfaces/Window.html":{}}}],["loss",{"_index":2675,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2682,"title":{},"body":{"license.html":{}}}],["ls",{"_index":1406,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1473,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"license.html":{}}}],["mailing",{"_index":2513,"title":{},"body":{"license.html":{}}}],["main",{"_index":758,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1620,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainviewtogglecomponent",{"_index":522,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"license.html":{}}}],["making",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["malfunction",{"_index":2680,"title":{},"body":{"license.html":{}}}],["managed",{"_index":2516,"title":{},"body":{"license.html":{}}}],["management",{"_index":2454,"title":{},"body":{"license.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:100",{"_index":1677,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:103",{"_index":1998,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:105",{"_index":1822,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:108",{"_index":891,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:11",{"_index":1068,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:114",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:116",{"_index":1653,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:117",{"_index":1819,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:12",{"_index":761,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:124",{"_index":1654,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:13",{"_index":1069,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:130",{"_index":1996,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:131",{"_index":1815,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:135",{"_index":1644,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:139",{"_index":1089,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:14",{"_index":759,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:142",{"_index":1810,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:145",{"_index":1658,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:15",{"_index":1066,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:156",{"_index":1071,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:157",{"_index":1680,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:16",{"_index":765,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:169",{"_index":1647,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:17",{"_index":1983,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:173",{"_index":1079,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:176",{"_index":1813,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:18",{"_index":754,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:182",{"_index":1666,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:187",{"_index":1832,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:19",{"_index":1979,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:192",{"_index":1650,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:196",{"_index":1094,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:20",{"_index":886,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:202",{"_index":1656,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:21",{"_index":1988,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:210",{"_index":1664,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":1817,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":1980,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":1818,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":1804,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:265",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:28",{"_index":1806,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:30",{"_index":2001,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:31",{"_index":1662,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:32",{"_index":1816,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:33",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{}}}],["manager.ts:335",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:34",{"_index":1805,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:37",{"_index":1086,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:385",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":776,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:416",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:426",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:436",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:49",{"_index":1985,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:51",{"_index":1674,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:52",{"_index":766,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:54",{"_index":899,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:55",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:58",{"_index":1984,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:59",{"_index":1830,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:60",{"_index":1092,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:65",{"_index":895,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:67",{"_index":1989,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:69",{"_index":773,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:76",{"_index":1836,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:77",{"_index":1668,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:8",{"_index":876,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:80",{"_index":1096,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:84",{"_index":897,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:85",{"_index":1671,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:9",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:92",{"_index":1838,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:96",{"_index":1993,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:99",{"_index":903,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["manages",{"_index":755,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manipulate",{"_index":836,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":2409,"title":{},"body":{"index.html":{}}}],["manually",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":1957,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["mark",{"_index":2261,"title":{},"body":{"contributing.html":{}}}],["marked",{"_index":2522,"title":{},"body":{"license.html":{}}}],["marks",{"_index":2630,"title":{},"body":{"license.html":{}}}],["matbuttonmodule",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["matcheckboxmodule",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matdialogmodule",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["material",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.color.set('#ff0000",{"_index":1563,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material.opacity",{"_index":1542,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material2",{"_index":1120,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.abs(returnvec.x",{"_index":1014,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1015,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1016,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1582,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1585,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1524,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(theta",{"_index":1528,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.max(math.min(pos.z",{"_index":1593,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["math.pow(fh",{"_index":1027,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.sin(clusterparams.phi",{"_index":1587,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1522,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(theta",{"_index":1526,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maticonmodule",{"_index":531,"title":{},"body":{"modules/AppModule.html":{}}}],["matmenumodule",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["matslidermodule",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["matslidetogglemodule",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["mattooltipmodule",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["max",{"_index":1039,"title":{},"body":{"classes/Field.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":1171,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["maximum",{"_index":734,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1571,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":1914,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":725,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1573,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mean",{"_index":2430,"title":{},"body":{"license.html":{}}}],["meaningful",{"_index":2288,"title":{},"body":{"contributing.html":{}}}],["means",{"_index":2449,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":2476,"title":{},"body":{"license.html":{}}}],["media",{"_index":2480,"title":{},"body":{"license.html":{}}}],["medium",{"_index":2578,"title":{},"body":{"license.html":{}}}],["meet",{"_index":2579,"title":{},"body":{"license.html":{}}}],["menu",{"_index":534,"title":{},"body":{"modules/AppModule.html":{},"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["menu.component",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/animate",{"_index":548,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/auto",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/collections",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/config/config",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/dark",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/event",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/experiment",{"_index":512,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/info",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/io",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/main",{"_index":523,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/menu",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/object",{"_index":482,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/overlay",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/overlay/overlay.component",{"_index":521,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/pheonix",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/phoenix",{"_index":539,"title":{},"body":{"modules/AppModule.html":{},"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["menu/tree",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/ui",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/view",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/vr",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/zoom",{"_index":526,"title":{},"body":{"modules/AppModule.html":{}}}],["menus",{"_index":835,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["menutogglecomponent",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["merchantability",{"_index":2649,"title":{},"body":{"license.html":{}}}],["merely",{"_index":2498,"title":{},"body":{"license.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(boxbuffer",{"_index":650,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh(particlegeometry",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1547,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1544,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1545,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1546,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1549,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["meshphongmaterial",{"_index":1101,"title":{},"body":{"classes/ImportManager.html":{}}}],["meta",{"_index":1403,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":575,"title":{},"body":{"pipes/AttributePipe.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1427,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["min",{"_index":1336,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["minimum",{"_index":732,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":726,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2733,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modifications",{"_index":2472,"title":{},"body":{"license.html":{}}}],["modified",{"_index":2584,"title":{},"body":{"license.html":{}}}],["modify",{"_index":2606,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":2610,"title":{},"body":{"license.html":{}}}],["module",{"_index":387,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":389,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["moment",{"_index":2378,"title":{},"body":{"index.html":{}}}],["momentum",{"_index":970,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":1235,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"index.html":{},"license.html":{}}}],["mouse",{"_index":1811,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1899,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1902,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":1976,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":1994,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":1981,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1038,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["much",{"_index":2412,"title":{},"body":{"index.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":860,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":656,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":665,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":666,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":667,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonparams",{"_index":1245,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1374,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1387,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1399,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1350,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1372,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1385,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1397,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1401,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1400,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["n",{"_index":589,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["name('jets",{"_index":1332,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["names",{"_index":1240,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["naming",{"_index":1234,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navcomponent",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["navigate",{"_index":2402,"title":{},"body":{"index.html":{}}}],["navigator",{"_index":2014,"title":{},"body":{"classes/VRManager.html":{}}}],["necessarily",{"_index":2556,"title":{},"body":{"license.html":{}}}],["need",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{},"index.html":{}}}],["needed",{"_index":2077,"title":{},"body":{"interfaces/Window.html":{}}}],["negligence",{"_index":2662,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":2665,"title":{},"body":{"license.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["newpos",{"_index":1299,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["ng",{"_index":2396,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["node",{"_index":697,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"index.html":{}}}],["node.ts",{"_index":1431,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1457,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:102",{"_index":1463,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:113",{"_index":1469,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1459,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1450,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1452,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1455,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1458,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1451,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1448,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:6",{"_index":1454,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:60",{"_index":1461,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:73",{"_index":1467,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1453,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:82",{"_index":1465,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:93",{"_index":1474,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node/phoenix",{"_index":714,"title":{},"body":{"classes/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["nodejs.timeout",{"_index":2043,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1438,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1470,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["non",{"_index":2536,"title":{},"body":{"license.html":{}}}],["none",{"_index":947,"title":{},"body":{"classes/ExportManager.html":{}}}],["normalblending",{"_index":779,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normally",{"_index":2602,"title":{},"body":{"license.html":{}}}],["note",{"_index":2004,"title":{},"body":{"classes/VRManager.html":{}}}],["nothing",{"_index":2373,"title":{},"body":{"index.html":{},"license.html":{}}}],["notice",{"_index":2251,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["notices",{"_index":2587,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":2619,"title":{},"body":{"license.html":{}}}],["nowdisplayingevent",{"_index":2072,"title":{},"body":{"interfaces/Window.html":{}}}],["null",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":1886,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numpoints",{"_index":1517,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["obj",{"_index":887,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["obj.eventobject",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":914,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["object.assign(configoptions",{"_index":1495,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1428,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1422,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(eventsdata",{"_index":1304,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":1879,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":1884,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":619,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1370,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2174,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1307,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.eventdata[objecttype",{"_index":1309,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.name",{"_index":940,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":1118,"title":{},"body":{"classes/ImportManager.html":{}}}],["object.uuid",{"_index":1913,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.values(combinedprops).join",{"_index":1429,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":1088,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":1129,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse((child",{"_index":1126,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":1131,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":1356,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectclippingcomponent",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["objectcollection",{"_index":1218,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection[0][cut.field",{"_index":1359,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":1215,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1369,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectloader",{"_index":1102,"title":{},"body":{"classes/ImportManager.html":{}}}],["objectname",{"_index":2157,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":1365,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:13",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:137",{"_index":1508,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:15",{"_index":1514,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:183",{"_index":1506,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:89",{"_index":1511,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1284,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectselectioncomponent",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["objectselectionoverlaycomponent",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["objectsgroup",{"_index":1824,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.traverse((object",{"_index":1912,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":932,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":936,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":934,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":906,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":1104,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":1112,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":1115,"title":{},"body":{"classes/ImportManager.html":{}}}],["obligations",{"_index":2691,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":2725,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2549,"title":{},"body":{"license.html":{}}}],["olddrawrangecount",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{},"contributing.html":{},"index.html":{}}}],["onchange",{"_index":1338,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["ondisplayedeventchange",{"_index":2071,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1791,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":822,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2069,"title":{},"body":{"interfaces/Window.html":{}}}],["online",{"_index":2387,"title":{},"body":{"index.html":{}}}],["onscriptsloaded",{"_index":1738,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onscriptsloaded(jsroot",{"_index":1764,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onsessionended",{"_index":1967,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["ontoggle",{"_index":1439,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1792,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1793,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":1968,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":1969,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["open",{"_index":2250,"title":{},"body":{"contributing.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["optionalfeatures",{"_index":2017,"title":{},"body":{"classes/VRManager.html":{}}}],["optionally",{"_index":2258,"title":{},"body":{"contributing.html":{}}}],["options",{"_index":474,"title":{},"body":{"modules/AppModule.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{}}}],["options.component",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["options/io",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["options/view",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{},"license.html":{}}}],["original",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{},"license.html":{}}}],["others",{"_index":2280,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":2457,"title":{},"body":{"license.html":{}}}],["out",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"license.html":{},"overview.html":{}}}],["outdated",{"_index":2007,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":743,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":771,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":796,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":798,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":797,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":921,"title":{},"body":{"classes/ExportManager.html":{}}}],["outstanding",{"_index":2462,"title":{},"body":{"license.html":{}}}],["over",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1638,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlay.component",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/collections",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/info",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/object",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["overlaycanvas",{"_index":1672,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlaycomponent",{"_index":520,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayed",{"_index":2210,"title":{},"body":{"interfaces/Window.html":{}}}],["overlaymodule",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayrenderer",{"_index":1621,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlayviewcomponent",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayviewwindowcomponent",{"_index":507,"title":{},"body":{"modules/AppModule.html":{}}}],["overview",{"_index":2731,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":2435,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":2459,"title":{},"body":{"license.html":{}}}],["p",{"_index":971,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2339,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":2718,"title":{},"body":{"license.html":{}}}],["panel",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["panel.component",{"_index":517,"title":{},"body":{"modules/AppModule.html":{}}}],["panel/info",{"_index":516,"title":{},"body":{"modules/AppModule.html":{}}}],["param",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":623,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":620,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["params",{"_index":1219,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["parent",{"_index":1440,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1741,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1781,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":917,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry",{"_index":1060,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry(geometry",{"_index":1087,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":2146,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry",{"_index":1061,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parseobjgeometry(content",{"_index":2130,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":1091,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":2137,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2104,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":1090,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{},"license.html":{}}}],["part_list",{"_index":1265,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":1931,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particular",{"_index":2651,"title":{},"body":{"license.html":{}}}],["party",{"_index":2601,"title":{},"body":{"license.html":{}}}],["pass",{"_index":744,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passes",{"_index":756,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":800,"title":{},"body":{"classes/EffectsManager.html":{}}}],["patent",{"_index":2545,"title":{},"body":{"license.html":{}}}],["path",{"_index":557,"title":{},"body":{"modules/AppModule.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":1915,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":1266,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["percent",{"_index":2461,"title":{},"body":{"license.html":{}}}],["perform",{"_index":963,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["performed",{"_index":965,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":959,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["permission",{"_index":2628,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":2468,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":2534,"title":{},"body":{"license.html":{}}}],["perspectivecamera",{"_index":2003,"title":{},"body":{"classes/VRManager.html":{}}}],["perspectivecamera).far",{"_index":2036,"title":{},"body":{"classes/VRManager.html":{}}}],["pertain",{"_index":2593,"title":{},"body":{"license.html":{}}}],["phnx",{"_index":2136,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":698,"title":{},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["phoenixloader",{"_index":712,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixloader:111",{"_index":1242,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:127",{"_index":1239,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:148",{"_index":1238,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:169",{"_index":1254,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":1206,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":1207,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:21",{"_index":1205,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:241",{"_index":1231,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:269",{"_index":1216,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:292",{"_index":1248,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:309",{"_index":1244,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:32",{"_index":1237,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:348",{"_index":1241,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:50",{"_index":1251,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenucomponent",{"_index":537,"title":{},"body":{"modules/AppModule.html":{}}}],["phoenixmenuitemcomponent",{"_index":540,"title":{},"body":{"modules/AppModule.html":{}}}],["phoenixmenunode",{"_index":694,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1481,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":677,"title":{},"body":{"classes/Configuration.html":{}}}],["phoenixobjects",{"_index":599,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1346,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1384,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1343,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1340,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack",{"_index":1320,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1396,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2138,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2141,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2140,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pipe",{"_index":567,"title":{"pipes/AttributePipe.html":{}},"body":{"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["pipes",{"_index":568,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["pipetransform",{"_index":585,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["places",{"_index":2598,"title":{},"body":{"license.html":{}}}],["plain",{"_index":2380,"title":{},"body":{"index.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{}}}],["plane(vertice",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundcomponent",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":2275,"title":{},"body":{"contributing.html":{}}}],["plength",{"_index":1040,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":987,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1554,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1556,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1516,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1564,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1569,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1566,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata.uuid",{"_index":1567,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1568,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1589,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1591,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":999,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1006,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["positions.length",{"_index":1518,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["possibility",{"_index":2685,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1415,"title":{},"body":{"classes/PhoenixLoader.html":{},"index.html":{}}}],["possibluy",{"_index":1292,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1845,"title":{},"body":{"classes/SelectionManager.html":{}}}],["power",{"_index":2450,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":2471,"title":{},"body":{"license.html":{}}}],["prepare",{"_index":2541,"title":{},"body":{"license.html":{}}}],["presentable",{"_index":581,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["preset",{"_index":671,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":699,"title":{"classes/PresetView.html":{}},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":678,"title":{},"body":{"classes/Configuration.html":{}}}],["previous",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["previousscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["printed",{"_index":2717,"title":{},"body":{"license.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["problems",{"_index":2414,"title":{},"body":{"index.html":{}}}],["process",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":1211,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":1081,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2171,"title":{},"body":{"interfaces/Window.html":{}}}],["processgeometry",{"_index":1062,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgeometry(geometry",{"_index":1093,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":1933,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":1945,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":692,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["processobj",{"_index":1063,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":1095,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":1934,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":1948,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":1935,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":1950,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["product",{"_index":2631,"title":{},"body":{"license.html":{}}}],["progress",{"_index":2011,"title":{},"body":{"classes/VRManager.html":{},"index.html":{}}}],["project",{"_index":2369,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":2586,"title":{},"body":{"license.html":{}}}],["promise",{"_index":1749,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promise((resolve",{"_index":1765,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1416,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["propagate",{"_index":1032,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1043,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["properties",{"_index":674,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1413,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1891,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1890,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":1197,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provide",{"_index":2613,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1156,"title":{},"body":{"classes/ImportManager.html":{},"license.html":{}}}],["providedin",{"_index":1186,"title":{},"body":{"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":2642,"title":{},"body":{"license.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["publicly",{"_index":2542,"title":{},"body":{"license.html":{}}}],["pull",{"_index":2273,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2517,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":2447,"title":{},"body":{"license.html":{}}}],["pushing",{"_index":1424,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":969,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":975,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1534,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1536,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queries",{"_index":2356,"title":{},"body":{"dependencies.html":{}}}],["queryselectorall('script[src",{"_index":1769,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["question",{"_index":2263,"title":{},"body":{"contributing.html":{}}}],["radius",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1595,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ratio",{"_index":972,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1839,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1907,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1906,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1905,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["readable",{"_index":2596,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":1970,"title":{},"body":{"classes/VRManager.html":{}}}],["reason",{"_index":2705,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2633,"title":{},"body":{"license.html":{}}}],["received",{"_index":2526,"title":{},"body":{"license.html":{}}}],["receives",{"_index":1255,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["recipients",{"_index":2581,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":2716,"title":{},"body":{"license.html":{}}}],["reconstruct",{"_index":1256,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":1223,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1408,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":881,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redistributing",{"_index":2655,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":2576,"title":{},"body":{"license.html":{}}}],["reference",{"_index":2283,"title":{},"body":{"contributing.html":{}}}],["regarding",{"_index":2626,"title":{},"body":{"license.html":{}}}],["reject",{"_index":1766,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["reload",{"_index":2406,"title":{},"body":{"index.html":{}}}],["remain",{"_index":2496,"title":{},"body":{"license.html":{}}}],["remaining",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["removechild",{"_index":1444,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1466,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1630,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1657,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":774,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removepass",{"_index":750,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":772,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":751,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["render(camera",{"_index":775,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render(scene",{"_index":1660,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1673,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1719,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1682,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1679,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":1897,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":1904,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":1901,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1622,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":764,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":2212,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":763,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":789,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":1082,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replaced",{"_index":2711,"title":{},"body":{"license.html":{}}}],["replacing",{"_index":1289,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["repository",{"_index":2245,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":2078,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["representatives",{"_index":2512,"title":{},"body":{"license.html":{}}}],["representing",{"_index":829,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":821,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reproduce",{"_index":2540,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":2636,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":2426,"title":{},"body":{"license.html":{}}}],["request",{"_index":2274,"title":{},"body":{"contributing.html":{}}}],["requestanimationframe(animate",{"_index":2088,"title":{},"body":{"interfaces/Window.html":{}}}],["requests",{"_index":2074,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["required",{"_index":2632,"title":{},"body":{"license.html":{}}}],["reset",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve",{"_index":1778,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["responsetype",{"_index":2203,"title":{},"body":{"interfaces/Window.html":{}}}],["responsibility",{"_index":2697,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":691,"title":{},"body":{"classes/Configuration.html":{},"license.html":{}}}],["restore",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["restoring",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":2475,"title":{},"body":{"license.html":{}}}],["results",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":2590,"title":{},"body":{"license.html":{}}}],["retrieved",{"_index":845,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":1011,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reviewing",{"_index":2281,"title":{},"body":{"contributing.html":{}}}],["revisions",{"_index":2492,"title":{},"body":{"license.html":{}}}],["right",{"_index":644,"title":{},"body":{"classes/CMSObjects.html":{}}}],["rights",{"_index":2693,"title":{},"body":{"license.html":{}}}],["risks",{"_index":2657,"title":{},"body":{"license.html":{}}}],["rkstate",{"_index":1045,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1047,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1050,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1048,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1051,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1046,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1049,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["root",{"_index":696,"title":{},"body":{"classes/Configuration.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["rotate.chain(end",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotate.component",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate/auto",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["rotationpositions",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["routermodule",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.forroot(routes",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":431,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"routes.html":{}}}],["royalty",{"_index":2538,"title":{},"body":{"license.html":{}}}],["run",{"_index":857,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["runge",{"_index":960,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":962,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":1263,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["rxjs",{"_index":1844,"title":{},"body":{"classes/SelectionManager.html":{},"dependencies.html":{}}}],["same",{"_index":1224,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["save",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{}}}],["save(blob",{"_index":888,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":882,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":872,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":894,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":873,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":896,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2103,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":874,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":898,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring",{"_index":875,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":902,"title":{},"body":{"classes/ExportManager.html":{}}}],["scale",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["scene.background",{"_index":1691,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":927,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":1073,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1690,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":915,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":924,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2176,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2178,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["scenestring",{"_index":1141,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":1075,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":2221,"title":{},"body":{"interfaces/Window.html":{}}}],["script",{"_index":1728,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1771,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1777,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1779,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1776,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1775,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1773,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1767,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1770,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1785,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1784,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1740,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1726,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript('assets/jsroot",{"_index":1763,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1731,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1744,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["second",{"_index":996,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1640,"title":{},"body":{"classes/RendererManager.html":{}}}],["section",{"_index":2548,"title":{},"body":{"license.html":{}}}],["sections",{"_index":2431,"title":{},"body":{"license.html":{}}}],["sections/atlas/atlas.component",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/cms/cms.component",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/geometry/geometry.component",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/lhcb/lhcb.component",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/playground/playground.component",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/trackml/trackml.component",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["see",{"_index":2386,"title":{},"body":{"index.html":{},"license.html":{}}}],["selected",{"_index":571,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1794,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1821,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":485,"title":{},"body":{"modules/AppModule.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["selection.component",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["selection/object",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["selectionmanager",{"_index":1786,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selector.component",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["selector/event",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["sell",{"_index":2550,"title":{},"body":{"license.html":{}}}],["send",{"_index":2156,"title":{},"body":{"interfaces/Window.html":{}}}],["sent",{"_index":2511,"title":{},"body":{"license.html":{}}}],["separable",{"_index":2497,"title":{},"body":{"license.html":{}}}],["separate",{"_index":2623,"title":{},"body":{"license.html":{}}}],["serve",{"_index":2397,"title":{},"body":{"index.html":{}}}],["server",{"_index":2401,"title":{},"body":{"index.html":{}}}],["service",{"_index":830,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["services/extras/attribute.pipe",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":1982,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["session.addeventlistener('end",{"_index":2025,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":1971,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2016,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["set/get",{"_index":1706,"title":{},"body":{"classes/RendererManager.html":{}}}],["seteventdataloader",{"_index":682,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdataloader(eventdataloader",{"_index":706,"title":{},"body":{"classes/Configuration.html":{}}}],["setfixoverlay",{"_index":1631,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1663,"title":{},"body":{"classes/RendererManager.html":{}}}],["setinterval",{"_index":2047,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1632,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1665,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1633,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1667,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":1064,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":1099,"title":{},"body":{"classes/ImportManager.html":{}}}],["setoverlayrenderer",{"_index":1634,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1669,"title":{},"body":{"classes/RendererManager.html":{}}}],["setphoenixmenuroot",{"_index":683,"title":{},"body":{"classes/Configuration.html":{}}}],["setphoenixmenuroot(phoenixmenunode",{"_index":709,"title":{},"body":{"classes/Configuration.html":{}}}],["setrenderer",{"_index":1635,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers",{"_index":1636,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1676,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2209,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1801,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1835,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1802,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1837,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2099,"title":{},"body":{"interfaces/Window.html":{}}}],["setupvrcontrols",{"_index":1977,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1607,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":1978,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2000,"title":{},"body":{"classes/VRManager.html":{}}}],["shadows",{"_index":1136,"title":{},"body":{"classes/ImportManager.html":{}}}],["shall",{"_index":2429,"title":{},"body":{"license.html":{}}}],["shares",{"_index":2463,"title":{},"body":{"license.html":{}}}],["shininess",{"_index":1121,"title":{},"body":{"classes/ImportManager.html":{}}}],["short",{"_index":2276,"title":{},"body":{"contributing.html":{}}}],["show",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":834,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["shown",{"_index":1185,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["si",{"_index":973,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":653,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["sides",{"_index":1084,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":2371,"title":{},"body":{"index.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["sizemenu",{"_index":1328,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1333,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["slider.component",{"_index":546,"title":{},"body":{"modules/AppModule.html":{}}}],["slider/config",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["smaller",{"_index":2165,"title":{},"body":{"interfaces/Window.html":{}}}],["software",{"_index":2474,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2696,"title":{},"body":{"license.html":{}}}],["solely",{"_index":2652,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["space",{"_index":1035,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["special",{"_index":2669,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1210,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["specified",{"_index":1605,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":722,"title":{},"body":{"classes/Cut.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere(new",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.vertices",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry(particlesize",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1521,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../script",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.module.ts",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/phoenix",{"_index":1430,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["src/app/services/event",{"_index":805,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/app/services/eventdisplay.service.ts",{"_index":2060,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts",{"_index":569,"title":{},"body":{"pipes/AttributePipe.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts:17",{"_index":579,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["src/app/services/extras/configuration.model.ts",{"_index":670,"title":{},"body":{"classes/Configuration.html":{},"coverage.html":{}}}],["src/app/services/extras/configuration.model.ts:11",{"_index":700,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:13",{"_index":690,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:15",{"_index":695,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:17",{"_index":686,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:33",{"_index":703,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:42",{"_index":707,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:50",{"_index":704,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:58",{"_index":710,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:66",{"_index":705,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/cut.model.ts",{"_index":721,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/app/services/extras/cut.model.ts:10",{"_index":729,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:6",{"_index":735,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:8",{"_index":736,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/preset",{"_index":1601,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/app/services/extras/runge",{"_index":953,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/app/services/infologger.service.ts",{"_index":1169,"title":{},"body":{"injectables/InfoLoggerService.html":{},"coverage.html":{}}}],["src/app/services/infologger.service.ts:12",{"_index":1181,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:14",{"_index":1183,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:21",{"_index":1176,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:32",{"_index":1180,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/loaders/cms",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/jivexml",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/jsroot",{"_index":2317,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/lhcb",{"_index":1193,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/objects/cms",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/app/services/loaders/objects/phoenix",{"_index":1500,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/app/services/loaders/phoenix",{"_index":1269,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/script",{"_index":1727,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/services/loaders/trackml",{"_index":1929,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/app/services/three.service.ts",{"_index":2326,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/app/services/three/controls",{"_index":2328,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/effects",{"_index":741,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/app/services/three/export",{"_index":869,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/app/services/three/import",{"_index":1053,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/app/services/three/renderer",{"_index":1618,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/app/services/three/scene",{"_index":2332,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/selection",{"_index":1787,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/app/services/three/vr",{"_index":1962,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/app/services/ui.service.ts",{"_index":2335,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"contributing.html":{}}}],["start.chain(startxaxis",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":1036,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":1986,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":1034,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":964,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{},"license.html":{}}}],["state.dir",{"_index":998,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add(k1.clone().add(k2.clone().multiplyscalar(2)).add(k3.clone().multiplyscalar(2)).add(k4).multiplyscalar(fh",{"_index":1030,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k1.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":1003,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k2.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":1005,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k3.clone().multiplyscalar(h)).cross(b_last).multiplyscalar(qop",{"_index":1010,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":992,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":990,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1031,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":978,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":997,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add(k1.clone().add(k2).add(k3).multiplyscalar(fh2",{"_index":1029,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(h)).add(k3.clone().multiplyscalar(h2",{"_index":1007,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(half_h)).add(k1.clone().multiplyscalar(h2",{"_index":1000,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":976,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1023,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":977,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stated",{"_index":2547,"title":{},"body":{"license.html":{}}}],["statement",{"_index":2612,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2299,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["stating",{"_index":2588,"title":{},"body":{"license.html":{}}}],["stats",{"_index":2362,"title":{},"body":{"dependencies.html":{}}}],["step",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":967,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":1995,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1033,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":1916,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1525,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2009,"title":{},"body":{"classes/VRManager.html":{},"index.html":{}}}],["stop",{"_index":2051,"title":{},"body":{"classes/VRManager.html":{}}}],["stoppage",{"_index":2677,"title":{},"body":{"license.html":{}}}],["store",{"_index":1947,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":849,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["string",{"_index":728,"title":{},"body":{"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":851,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":1942,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["subject",{"_index":2531,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2543,"title":{},"body":{"license.html":{}}}],["submission",{"_index":2615,"title":{},"body":{"license.html":{}}}],["submit",{"_index":2505,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":2503,"title":{},"body":{"license.html":{}}}],["subscribe((input",{"_index":2204,"title":{},"body":{"interfaces/Window.html":{}}}],["subsequently",{"_index":2527,"title":{},"body":{"license.html":{}}}],["such",{"_index":2455,"title":{},"body":{"license.html":{}}}],["super",{"_index":1258,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["supersede",{"_index":2622,"title":{},"body":{"license.html":{}}}],["support",{"_index":2689,"title":{},"body":{"license.html":{},"modules.html":{}}}],["surprised",{"_index":2416,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1617,"title":{},"body":{"classes/PresetView.html":{},"modules.html":{}}}],["swap",{"_index":1681,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1683,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1637,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1678,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":701,"title":{},"body":{"classes/Configuration.html":{}}}],["synchronously",{"_index":1737,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["syntax",{"_index":2715,"title":{},"body":{"license.html":{}}}],["systems",{"_index":2515,"title":{},"body":{"license.html":{}}}],["table",{"_index":2338,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2337,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1748,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1551,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"contributing.html":{}}}],["takes",{"_index":820,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["technically",{"_index":2376,"title":{},"body":{"index.html":{}}}],["temp",{"_index":1718,"title":{},"body":{"classes/RendererManager.html":{}}}],["temporary",{"_index":892,"title":{},"body":{"classes/ExportManager.html":{}}}],["terminate",{"_index":2573,"title":{},"body":{"license.html":{}}}],["terms",{"_index":2424,"title":{},"body":{"license.html":{}}}],["tesla",{"_index":958,"title":{},"body":{"classes/Field.html":{}}}],["text",{"_index":905,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["text/javascript",{"_index":1774,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":944,"title":{},"body":{"classes/ExportManager.html":{}}}],["thank",{"_index":2295,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":2291,"title":{},"body":{"contributing.html":{}}}],["theme.component",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["theme/dark",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["then(this.onvrsessionstarted",{"_index":2023,"title":{},"body":{"classes/VRManager.html":{}}}],["theory",{"_index":2660,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":2500,"title":{},"body":{"license.html":{}}}],["theta",{"_index":1581,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["third",{"_index":1004,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"license.html":{}}}],["this.activecamera.position",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.activeobject",{"_index":1856,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.next(intersectedobject.uuid",{"_index":1878,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":1357,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":1345,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1342,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":1339,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1348,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.tracks",{"_index":1319,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1711,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1695,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateeventwithclipping",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2122,"title":{},"body":{"interfaces/Window.html":{}}}],["this.camera",{"_index":786,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2031,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2039,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2057,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2038,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1615,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1478,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1487,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1485,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1488,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipplanes",{"_index":1108,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.collideparticles(1500",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":784,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":799,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":790,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":801,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":802,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":793,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1479,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1496,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2082,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().buildeventdata(eventdata",{"_index":2117,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollection(collectionname",{"_index":2181,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollections",{"_index":2182,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventmetadata",{"_index":2187,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventslist(eventsdata",{"_index":2106,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1714,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller",{"_index":2044,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectend",{"_index":2050,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.addeventlistener('selectstart",{"_index":2046,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2054,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2028,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2030,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2029,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":1259,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":1262,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":1267,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":1264,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultrenderpass",{"_index":788,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":791,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":792,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":1858,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1852,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1854,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":1898,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.enabledatguimenu",{"_index":717,"title":{},"body":{"classes/Configuration.html":{}}}],["this.enableeventdisplayconsole",{"_index":2094,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2096,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1857,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":1109,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":1288,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1379,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1380,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":1382,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1392,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1393,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1395,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1420,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[objecttype",{"_index":1308,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[objecttype][collection",{"_index":1311,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdataloader",{"_index":716,"title":{},"body":{"classes/Configuration.html":{}}}],["this.eventsdata",{"_index":2105,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2121,"title":{},"body":{"interfaces/Window.html":{}}}],["this.field",{"_index":737,"title":{},"body":{"classes/Cut.html":{}}}],["this.fixedoverlay",{"_index":1722,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.frameid",{"_index":2085,"title":{},"body":{"interfaces/Window.html":{}}}],["this.geometries_id",{"_index":1110,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer().domelement.classname",{"_index":1700,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().domelement.id",{"_index":1702,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setpixelratio(window.devicepixelratio",{"_index":1699,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setsize",{"_index":1697,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1349,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1355,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1688,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1689,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render",{"_index":1693,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1286,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1353,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2236,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2235,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2116,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2234,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2223,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2101,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2145,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2134,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2226,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2227,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1334,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2231,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2083,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2098,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":2149,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":2150,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":2126,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2230,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":2143,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":2147,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2131,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.render",{"_index":2091,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2213,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2216,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.updatecontrols",{"_index":2089,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2170,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":1952,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.http",{"_index":2201,"title":{},"body":{"interfaces/Window.html":{}}}],["this.icon",{"_index":1476,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1847,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1872,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1851,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2135,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1892,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2128,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1191,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.length",{"_index":1187,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.pop",{"_index":1189,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1190,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.intersectobject(event",{"_index":1871,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1692,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1846,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2107,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2194,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(json",{"_index":2197,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(jsroot.geo.build(obj",{"_index":2153,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2196,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(input",{"_index":2205,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2142,"title":{},"body":{"interfaces/Window.html":{}}}],["this.mainrenderer",{"_index":1707,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":1188,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.maxvalue",{"_index":739,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":738,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2048,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1475,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1484,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2118,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2184,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1863,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":2108,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2186,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onsessionended",{"_index":2013,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1477,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1497,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":1865,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":1861,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":1896,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2026,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1853,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1869,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1873,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1712,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1480,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1489,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parsegltfgeometry(input",{"_index":2208,"title":{},"body":{"interfaces/Window.html":{}}}],["this.parseobjgeometry(content",{"_index":2198,"title":{},"body":{"interfaces/Window.html":{}}}],["this.particledata",{"_index":1953,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":719,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews",{"_index":715,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews.length",{"_index":718,"title":{},"body":{"classes/Configuration.html":{}}}],["this.processgeometry(geometry",{"_index":1149,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj",{"_index":1116,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":1113,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.renderer",{"_index":2012,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcamera(new",{"_index":2055,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2045,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2027,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1713,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1716,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1720,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1715,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1717,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1721,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.save(new",{"_index":942,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":929,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":931,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":916,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(output",{"_index":926,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":913,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":787,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname('track",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1855,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1877,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1880,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1876,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1874,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1696,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":1119,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setrenderer",{"_index":1687,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2024,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1498,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.truthdata",{"_index":1954,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1287,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1360,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1361,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatafolder",{"_index":2113,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2175,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1351,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1352,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2179,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2127,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2233,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.showui(configuration",{"_index":2084,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2090,"title":{},"body":{"interfaces/Window.html":{}}}],["this.vrcamera",{"_index":2032,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2034,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2058,"title":{},"body":{"classes/VRManager.html":{}}}],["those",{"_index":2553,"title":{},"body":{"license.html":{}}}],["three",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":1659,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.boxbuffergeometry(30",{"_index":1577,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.bufferattribute(pointpos",{"_index":1561,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.buffergeometry",{"_index":1560,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.cylinderbuffergeometry(width",{"_index":1537,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.extra.min.js",{"_index":1755,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.group",{"_index":1363,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.mesh(geometry",{"_index":1543,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.meshbasicmaterial",{"_index":1539,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.meshphongmaterial",{"_index":1578,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.min.js",{"_index":1754,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.points(geometry",{"_index":1565,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.pointsmaterial",{"_index":1562,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.quaternion",{"_index":1535,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.service",{"_index":865,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["three.vector3(0",{"_index":1531,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(0.5",{"_index":1529,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(4000.0",{"_index":1584,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(x",{"_index":1533,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":909,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":907,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":1107,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":1105,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":777,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":782,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1843,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":783,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":781,"title":{},"body":{"classes/EffectsManager.html":{}}}],["threecsg.js",{"_index":1756,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["threeservice",{"_index":814,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"license.html":{}}}],["time",{"_index":856,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["title",{"_index":2289,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["todo",{"_index":1290,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"classes/PhoenixMenuNode.html":{}}}],["toggle.component",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/main",{"_index":524,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/menu",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/vr",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["toggles",{"_index":2217,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1445,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1468,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1441,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1449,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["tojson",{"_index":2155,"title":{},"body":{"interfaces/Window.html":{}}}],["top",{"_index":639,"title":{},"body":{"classes/CMSObjects.html":{}}}],["tort",{"_index":2661,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1814,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":1894,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":1997,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["track.pos",{"_index":1297,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["track.pos.concat",{"_index":1298,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcoll",{"_index":1388,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tracker",{"_index":2244,"title":{},"body":{"contributing.html":{}}}],["trackid",{"_index":1386,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1389,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1391,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1390,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2021,"title":{},"body":{"classes/VRManager.html":{},"contributing.html":{},"license.html":{}}}],["trackml",{"_index":563,"title":{},"body":{"modules/AppModule.html":{},"classes/TrackmlLoader.html":{}}}],["trackmlcomponent",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["trackmlloader",{"_index":1928,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1394,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1515,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["trackscollectionsevent",{"_index":1252,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["trade",{"_index":2629,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":2591,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":2627,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":2551,"title":{},"body":{"license.html":{}}}],["transform",{"_index":576,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transform(value",{"_index":577,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformation",{"_index":2477,"title":{},"body":{"license.html":{}}}],["transformed",{"_index":582,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformedvalue",{"_index":587,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming",{"_index":570,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming/changing",{"_index":1604,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"license.html":{}}}],["transparent",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1827,"title":{},"body":{"classes/SelectionManager.html":{}}}],["treemenucomponent",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["treemenuitemcomponent",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["tried",{"_index":2246,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1446,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":1943,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":1932,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":1939,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":993,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep",{"_index":995,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1021,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tslib",{"_index":2365,"title":{},"body":{"dependencies.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material).to",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position).to",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenduration).start",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenjs/tween.js",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typefolder",{"_index":1229,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolder.add",{"_index":1329,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm",{"_index":1327,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1335,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":1226,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":1151,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["types",{"_index":2481,"title":{},"body":{"license.html":{}}}],["ui",{"_index":815,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["ui.service",{"_index":866,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["uimenucomponent",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["uiservice",{"_index":816,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["undefined/null",{"_index":1492,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["under",{"_index":2445,"title":{},"body":{"license.html":{}}}],["union",{"_index":2440,"title":{},"body":{"license.html":{}}}],["uniquely",{"_index":1220,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":1927,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":1917,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":974,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unless",{"_index":2617,"title":{},"body":{"license.html":{}}}],["unreal",{"_index":745,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["up",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"index.html":{}}}],["update",{"_index":1028,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["updateanimationsphere",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updating",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":1074,"title":{},"body":{"classes/ImportManager.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["url.createobjecturl(blob",{"_index":950,"title":{},"body":{"classes/ExportManager.html":{}}}],["url.indexof('.root",{"_index":2159,"title":{},"body":{"interfaces/Window.html":{}}}],["use",{"_index":1132,"title":{},"body":{"classes/ImportManager.html":{},"classes/VRManager.html":{},"license.html":{}}}],["used",{"_index":708,"title":{},"body":{"classes/Configuration.html":{},"classes/EffectsManager.html":{},"injectables/InfoLoggerService.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["user",{"_index":2408,"title":{},"body":{"index.html":{}}}],["uses",{"_index":2379,"title":{},"body":{"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["uuid",{"_index":1398,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["v",{"_index":591,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["v1",{"_index":1530,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1532,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1888,"title":{},"body":{"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1294,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["val.pos.y",{"_index":1295,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["val.pos.z",{"_index":1296,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/Cut.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["value.foreach((v",{"_index":590,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["value.tostring",{"_index":592,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["values",{"_index":1959,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["variable",{"_index":2324,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2734,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":2040,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":778,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":794,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":622,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{}}}],["verbal",{"_index":2508,"title":{},"body":{"license.html":{}}}],["version",{"_index":2384,"title":{},"body":{"index.html":{},"license.html":{}}}],["vertice",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["verticies",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["very",{"_index":2293,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["view",{"_index":508,"title":{},"body":{"modules/AppModule.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["view.component",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["view.model",{"_index":711,"title":{},"body":{"classes/Configuration.html":{}}}],["view.model.ts",{"_index":1602,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1613,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1609,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1614,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1612,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1611,"title":{},"body":{"classes/PresetView.html":{}}}],["view/overlay",{"_index":479,"title":{},"body":{"modules/AppModule.html":{}}}],["viewoptionscomponent",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["views",{"_index":672,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["visualise",{"_index":2372,"title":{},"body":{"index.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr",{"_index":1963,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["vr_camera",{"_index":2035,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":1972,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":1961,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["vrtogglecomponent",{"_index":554,"title":{},"body":{"modules/AppModule.html":{}}}],["wait",{"_index":1783,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":1909,"title":{},"body":{"classes/SelectionManager.html":{},"contributing.html":{}}}],["warranties",{"_index":2644,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2638,"title":{},"body":{"license.html":{}}}],["way",{"_index":2241,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["web",{"_index":2374,"title":{},"body":{"index.html":{}}}],["webglrenderer",{"_index":753,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["webglrenderer(parameters",{"_index":1710,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1685,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1655,"title":{},"body":{"classes/RendererManager.html":{}}}],["webxr",{"_index":2008,"title":{},"body":{"classes/VRManager.html":{}}}],["wherever",{"_index":2600,"title":{},"body":{"license.html":{}}}],["whether",{"_index":687,"title":{},"body":{"classes/Configuration.html":{},"interfaces/Window.html":{},"license.html":{}}}],["whole",{"_index":2495,"title":{},"body":{"license.html":{}}}],["width",{"_index":1520,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2059,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.component",{"_index":510,"title":{},"body":{"modules/AppModule.html":{}}}],["window.eventdisplay",{"_index":2193,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":795,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1698,"title":{},"body":{"classes/RendererManager.html":{}}}],["window/overlay",{"_index":509,"title":{},"body":{"modules/AppModule.html":{}}}],["wireframe",{"_index":1122,"title":{},"body":{"classes/ImportManager.html":{}}}],["within",{"_index":2529,"title":{},"body":{"license.html":{}}}],["without",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"license.html":{}}}],["work",{"_index":2010,"title":{},"body":{"classes/VRManager.html":{},"index.html":{},"license.html":{}}}],["workaround",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2285,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":1991,"title":{},"body":{"classes/VRManager.html":{},"license.html":{}}}],["worldwide",{"_index":2535,"title":{},"body":{"license.html":{}}}],["writing",{"_index":2524,"title":{},"body":{"license.html":{}}}],["written",{"_index":2509,"title":{},"body":{"license.html":{}}}],["x",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["y",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"pipes/AttributePipe.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["yyyy",{"_index":2722,"title":{},"body":{"license.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["zone.js",{"_index":2367,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["zoomcontrolscomponent",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["zoomfactor",{"_index":2166,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2167,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2169,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/animations-manager.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:426\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:114\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:265\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:416\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:55\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:385\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:335\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:33\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/animations-manager.ts:436\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from \"./scene-manager\";\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, Object3D, BufferAttribute, Scene, Camera, SphereGeometry, Plane } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport { RendererManager } from \"./renderer-manager\";\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(\n      this.activeCamera.position\n    ).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: { eventObject: Object3D, position: any }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount = eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to({\n                count: geometryPosCount\n              }, tweenDuration);\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01\n          }).to({\n            x: eventObject.scale.x,\n            y: eventObject.scale.y,\n            z: eventObject.scale.z\n          }, tweenDuration);\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position.divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(eventObject.geometry.attributes['position'].array);\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere)\n      .to({ radius: 3000 }, tweenDuration);\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions\n            .filter(hitPosition => updateAnimationSphere\n              .containsPoint(new Vector3().fromArray(hitPosition))\n            );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute('position', new BufferAttribute(\n              new Float32Array([].concat(...reachedHits)), 3\n            ));\n            geometry.computeBoundingSphere();\n          }\n\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere)\n      .to({ radius: 10000 }, extraAnimationSphereDuration);\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane)\n        .to({ constant: clippingConstant }, tweenDuration);\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material).to({\n        opacity: 1\n      }, 300).start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position).to({\n        z: 0\n      }, tweenDuration).start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n    const trackColor = (this.scene.getObjectByName('Track') as any)?.material?.color;\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AttributePipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            CollectionsInfoOverlayComponent\n                        \n                        \n                            IOOptionsDialogComponent\n                        \n                        \n                            InfoPanelOverlayComponent\n                        \n                        \n                            ObjectSelectionOverlayComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { GeometryComponent } from './sections/geometry/geometry.component';\nimport { AtlasComponent } from './sections/atlas/atlas.component';\nimport { LHCbComponent } from './sections/lhcb/lhcb.component';\nimport { CMSComponent } from './sections/cms/cms.component';\nimport { TrackmlComponent } from './sections/trackml/trackml.component';\nimport { NavComponent } from './components/nav/nav.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PlaygroundComponent } from './sections/playground/playground.component';\nimport { AttributePipe } from './services/extras/attribute.pipe';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { UiMenuComponent } from './components/ui-menu/ui-menu.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { CollectionsInfoComponent } from './components/ui-menu/collections-info/collections-info.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MenuToggleComponent } from './components/ui-menu/menu-toggle/menu-toggle.component';\nimport { CollectionsInfoOverlayComponent } from './components/ui-menu/collections-info/collections-info-overlay/collections-info-overlay.component';\nimport { IoOptionsComponent } from './components/ui-menu/io-options/io-options.component';\nimport { IOOptionsDialogComponent } from './components/ui-menu/io-options/io-options-dialog/io-options-dialog.component';\nimport { OverlayViewComponent } from './components/ui-menu/overlay-view/overlay-view.component';\nimport { ObjectSelectionComponent } from './components/ui-menu/object-selection/object-selection.component';\nimport { ObjectSelectionOverlayComponent } from './components/ui-menu/object-selection/object-selection-overlay/object-selection-overlay.component';\nimport { EventSelectorComponent } from './components/ui-menu/event-selector/event-selector.component';\nimport { ObjectClippingComponent } from './components/ui-menu/object-clipping/object-clipping.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { DarkThemeComponent } from './components/ui-menu/dark-theme/dark-theme.component';\nimport { AutoRotateComponent } from './components/ui-menu/auto-rotate/auto-rotate.component';\nimport { ViewOptionsComponent } from './components/ui-menu/view-options/view-options.component';\nimport { OverlayViewWindowComponent } from './components/ui-menu/overlay-view/overlay-view-window/overlay-view-window.component';\nimport { ExperimentInfoComponent } from './components/ui-menu/experiment-info/experiment-info.component';\nimport { InfoPanelComponent } from './components/ui-menu/info-panel/info-panel.component';\nimport { InfoPanelOverlayComponent } from './components/ui-menu/info-panel/info-panel-overlay/info-panel-overlay.component';\nimport { OverlayComponent } from './components/ui-menu/overlay/overlay.component';\nimport { MainViewToggleComponent } from './components/ui-menu/main-view-toggle/main-view-toggle.component';\nimport { ZoomControlsComponent } from './components/ui-menu/zoom-controls/zoom-controls.component';\nimport { TreeMenuComponent } from './components/ui-menu/tree-menu/tree-menu.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TreeMenuItemComponent } from './components/ui-menu/tree-menu/tree-menu-item/tree-menu-item.component';\nimport { PhoenixMenuComponent } from './components/phoenix-menu/phoenix-menu.component';\nimport { PhoenixMenuItemComponent } from './components/phoenix-menu/pheonix-menu-item/phoenix-menu-item.component';\nimport { ConfigSliderComponent } from './components/phoenix-menu/config/config-slider/config-slider.component';\nimport { AnimateCameraComponent } from './components/ui-menu/animate-camera/animate-camera.component';\nimport { AnimateEventComponent } from './components/ui-menu/animate-event/animate-event.component';\nimport { VrToggleComponent } from './components/ui-menu/vr-toggle/vr-toggle.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'geometry', component: GeometryComponent },\n  { path: 'atlas', component: AtlasComponent },\n  { path: 'lhcb', component: LHCbComponent },\n  { path: 'cms', component: CMSComponent },\n  { path: 'trackml', component: TrackmlComponent },\n  { path: 'playground', component: PlaygroundComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    GeometryComponent,\n    AtlasComponent,\n    LHCbComponent,\n    CMSComponent,\n    TrackmlComponent,\n    NavComponent,\n    PlaygroundComponent,\n    AttributePipe,\n    UiMenuComponent,\n    CollectionsInfoComponent,\n    MenuToggleComponent,\n    CollectionsInfoOverlayComponent,\n    IoOptionsComponent,\n    IOOptionsDialogComponent,\n    OverlayViewComponent,\n    ObjectSelectionComponent,\n    ObjectSelectionOverlayComponent,\n    EventSelectorComponent,\n    ObjectClippingComponent,\n    DarkThemeComponent,\n    AutoRotateComponent,\n    ViewOptionsComponent,\n    OverlayViewWindowComponent,\n    OverlayComponent,\n    ExperimentInfoComponent,\n    InfoPanelComponent,\n    InfoPanelOverlayComponent,\n    MainViewToggleComponent,\n    ZoomControlsComponent,\n    TreeMenuComponent,\n    TreeMenuItemComponent,\n    PhoenixMenuComponent,\n    PhoenixMenuItemComponent,\n    ConfigSliderComponent,\n    AnimateCameraComponent,\n    AnimateEventComponent,\n    VrToggleComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    DragDropModule,\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule,\n    MatMenuModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatCheckboxModule,\n    MatIconModule\n  ],\n  entryComponents: [\n    IOOptionsDialogComponent,\n    CollectionsInfoOverlayComponent,\n    ObjectSelectionOverlayComponent,\n    InfoPanelOverlayComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/AttributePipe.html":{"url":"pipes/AttributePipe.html","title":"pipe - AttributePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  AttributePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/extras/attribute.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Pipe for transforming selected object attributes to a better format.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        attributePipe\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, args?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/attribute.pipe.ts:17\n                \n            \n\n\n            \n                \n                    Transform the attribute to a better presentable format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to be transformed.\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Additional arguments.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed value.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Pipe for transforming selected object attributes to a better format.\n */\n@Pipe({\n  name: 'attributePipe'\n})\nexport class AttributePipe implements PipeTransform {\n\n  /**\n   * Transform the attribute to a better presentable format.\n   * @param value Value to be transformed.\n   * @param args Additional arguments.\n   * @returns The transformed value.\n   */\n  transform(value: any, args?: any): any {\n    let transformedValue = '';\n    if (Array.isArray(value)) {\n      transformedValue += '\\n';\n      value.forEach((v) => transformedValue += v + '\\n');\n    } else {\n      transformedValue = value.toString();\n    }\n    return transformedValue;\n  }\n\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/cms-objects.ts:13\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, Line, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n    /**\n     * Process the Muon Chamber from the given parameters.\n     * and get it as a geometry.\n     * @param muonChamberParams Parameters of the Muon Chamber.\n     * @returns Muon Chamber object.\n     */\n    public static getMuonChamber(muonChamberParams: any): Object3D {\n        let faces = [];\n        let backs = [];\n\n        for (const param of Object.keys(muonChamberParams)) {\n            if (param.startsWith('front')) {\n                faces.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            } else if (param.startsWith('back')) {\n                backs.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            }\n        }\n\n        let box = new Geometry();\n        box.vertices = faces.concat(backs);\n\n        // front\n        box.faces.push(new Face3(0, 1, 2));\n        box.faces.push(new Face3(2, 3, 0));\n\n        // back\n        box.faces.push(new Face3(4, 5, 6));\n        box.faces.push(new Face3(6, 7, 4));\n\n        // top\n        box.faces.push(new Face3(4, 5, 1));\n        box.faces.push(new Face3(1, 0, 4));\n\n        // bottom\n        box.faces.push(new Face3(7, 6, 2));\n        box.faces.push(new Face3(2, 3, 7));\n\n        // left\n        box.faces.push(new Face3(0, 3, 7));\n        box.faces.push(new Face3(7, 4, 0));\n\n        // right\n        box.faces.push(new Face3(1, 5, 6));\n        box.faces.push(new Face3(6, 2, 1));\n\n        box.computeFaceNormals();\n        box.computeVertexNormals();\n\n        const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n        const boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\n            color: 0xff0000,\n            transparent: true,\n            opacity: 0.1,\n            side: DoubleSide\n        }));\n\n        boxObject.userData = muonChamberParams;\n        boxObject.name = 'MuonChamber';\n\n        // These are the lines along the box edges\n\n        const boxEdges = new EdgesGeometry(boxBuffer);\n        const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n            color: 0xffffff,\n            transparent: true,\n            opacity: 0.7\n        }));\n\n        const muonChamber = new Group();\n        muonChamber.add(boxObject);\n        muonChamber.add(lineBoxObject);\n\n        muonChamberParams.uuid = boxObject.uuid;\n\n        return muonChamber;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Configuration.html":{"url":"classes/Configuration.html","title":"class - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/configuration.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for preset views and event data loader.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enableDatGUIMenu\n                            \n                            \n                                eventDataLoader\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                presetViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                anyPresetView\n                            \n                            \n                                    Public\n                                getEventDataLoader\n                            \n                            \n                                    Public\n                                getPhoenixMenuRoot\n                            \n                            \n                                    Public\n                                setEventDataLoader\n                            \n                            \n                                    Public\n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(enableDatGUIMenu: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/configuration.model.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for the Configuration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        enableDatGUIMenu\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether to enable dat.GUI menu or not.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enableDatGUIMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:17\n                            \n                        \n\n                \n                    \n                        Whether to enable dat.GUI menu or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDataLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDataLoader\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:13\n                            \n                        \n\n                \n                    \n                        Event data loader responsible for processing and loading event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:15\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            presetViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PresetView[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:11\n                            \n                        \n\n                \n                    \n                        Preset views for switching event display camera. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            anyPresetView\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    anyPresetView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:33\n                \n            \n\n\n            \n                \n                    Get if there are any preset views.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If there are any preset views.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataLoader()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:50\n                \n            \n\n\n            \n                \n                    Get the event data loader responsible for processing and loading event data.\n\n\n                    \n                    \n                    \n                        Returns :         EventDataLoader\n\n                    \n                    \n                        The event data loader.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPhoenixMenuRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:66\n                \n            \n\n\n            \n                \n                    Get he root node for phoenix menu.\n\n\n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The root node of phoenix menu.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEventDataLoader(eventDataLoader: EventDataLoader)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:42\n                \n            \n\n\n            \n                \n                    Set the event data loader to be used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataLoader\n                                    \n                                                EventDataLoader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data loader responsible for\nprocessing and loading event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:58\n                \n            \n\n\n            \n                \n                    Set he root node for phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The phoenix menu node to be set as the root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { PhoenixMenuNode } from '../../components/phoenix-menu/phoenix-menu-node/phoenix-menu-node';\n\n/**\n * Configuration for preset views and event data loader.\n */\nexport class Configuration {\n  /** Preset views for switching event display camera. */\n  presetViews: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu: boolean;\n\n  /**\n   * Constructor for the Configuration.\n   * @param enableDatGUIMenu Whether to enable dat.GUI menu or not.\n   */\n  constructor(enableDatGUIMenu: boolean = false) {\n    this.presetViews = [];\n    this.eventDataLoader = new PhoenixLoader();\n    this.enableDatGUIMenu = enableDatGUIMenu;\n  }\n\n  /**\n   * Get if there are any preset views.\n   * @returns If there are any preset views.\n   */\n  public anyPresetView(): boolean {\n    return this.presetViews.length > 0;\n  }\n\n  /**\n   * Set the event data loader to be used.\n   * @param eventDataLoader Event data loader responsible for\n   * processing and loading event data.\n   */\n  public setEventDataLoader(eventDataLoader: EventDataLoader) {\n    this.eventDataLoader = eventDataLoader;\n  }\n\n  /**\n   * Get the event data loader responsible for processing and loading event data.\n   * @returns The event data loader.\n   */\n  public getEventDataLoader(): EventDataLoader {\n    return this.eventDataLoader;\n  }\n\n  /**\n   * Set he root node for phoenix menu.\n   * @param phoenixMenuNode The phoenix menu node to be set as the root node.\n   */\n  public setPhoenixMenuRoot(phoenixMenuNode: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuNode;\n  }\n\n  /**\n   * Get he root node for phoenix menu.\n   * @return The root node of phoenix menu.\n   */\n  public getPhoenixMenuRoot(): PhoenixMenuNode {\n    return this.phoenixMenuRoot;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                maxValue\n                            \n                            \n                                minValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Name of the event data attribute to be filtered. */\n  field: string;\n  /** Minimum allowed value of the event data attribute. */\n  minValue: number;\n  /** Maximum allowed value of the event data attribute. */\n  maxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   */\n  constructor(field: string, minValue: number, maxValue: number) {\n    this.field = field;\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/effects-manager.ts:52\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(camera: Camera, scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/effects-manager.ts:40\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending, Clock } from \"three\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n  }\n\n  /**\n   * Render the effects composer.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   */\n  public render(camera: Camera, scene: Scene) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:37\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:30\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:43\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:24\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeService } from './three.service';\nimport { UIService } from './ui.service';\nimport { InfoLoggerService } from './infologger.service';\n/**\n * Event data loader\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n  /**\n   * Constructor for the export manager.\n   */\n  constructor() {\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    this.saveString(result, 'phoenix-obj.obj');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      result => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        this.saveString(output, 'phoenix-scene.phnx');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n\n  /**\n   * Save string in the file and download it.\n   * @param text Text to be stored.\n   * @param filename Name of the file.\n   */\n  private saveString(text: string, filename: string) {\n    this.save(new Blob([text], { type: 'text/plain' }), filename);\n  }\n\n  /**\n   * Create a temporary link and download/save the data (blob) in a file.\n   * @param blob Blob containing exported data.\n   * @param filename Name of the export file.\n   */\n  private save(blob: Blob, filename: string) {\n    const link = document.createElement('a');\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/runge-kutta.ts:145\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n    /**\n     * Perform a Runge-Kutta step for the given state.\n     * @param state State at which the step is to be performed.\n     * @returns The computed step size.\n     */\n    static step(state: State): number {\n        // Charge (q) to momentum (p) ratio in SI units\n        const qop: number = state.q / (state.unitC * state.p);\n\n        // Runge-Kutta integrator state\n        let h2: number,\n            half_h: number,\n            B_middle: Vector3,\n            B_last: Vector3,\n            k2: Vector3,\n            k3: Vector3,\n            k4: Vector3;\n\n        // First Runge-Kutta point (at current position)\n        const B_first: Vector3 = Field.get(state.pos);\n        // state.dir.cross(B_first) * qop\n        const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n        // Try Runge-Kutta step with h as the step size\n        const tryRungeKuttaStep = (h: number) => {\n            h2 = h * h;\n            half_h = h / 2;\n\n            // Second Runge-Kutta point\n            // state.pos + state.dir * half_h + k1 * (h2 / 8)\n            const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n            B_middle = Field.get(pos1);\n            // (state.dir + k1 * half_h).cross(B_middle) * qop\n            k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Third Runge-Kutta point\n            // (state.dir + k2 * half_h).cross(B_middle) * qop\n            k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Last Runge-Kutta point\n            // state.pos + state.dir * h + k3 * (h2 / 2)\n            const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n            B_last = Field.get(pos2);\n            // (state.dir + k3 * h).cross(B_last) * qop\n            k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n            // (k1 - k2 - k3 + k4)\n            const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n            // h * (k1 - k2 - k3 + k4).lpNorm()\n            return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n        };\n\n        // Checking the error estimate\n        let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n        while (error_estimate > 0.0002) {\n            state.stepSize *= 0.5;\n            error_estimate = tryRungeKuttaStep(state.stepSize);\n        }\n\n        let fh: number = state.stepSize;\n        let fh2: number = Math.pow(fh, 2);\n\n        // Update position and momentum\n        // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n        state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n        // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n        state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n        state.dir.normalize();\n\n        return state.stepSize;\n    }\n\n    /**\n     * Propagate using the given properties by performing the Runge-Kutta steps.\n     * @param startPos Starting position in 3D space.\n     * @param startDir Starting direction in 3D space.\n     * @param p Momentum.\n     * @param q Charge.\n     * @param mss Max step size.\n     * @param plength Path length.\n     * @returns An array containing position and direction at that position calculated\n     * through the Runge-Kutta steps.\n     */\n    static propagate(startPos: Vector3, startDir: Vector3, p: number, q: number,\n        mss: number = -1, plength: number = 1000): { pos: Vector3, dir: Vector3 }[] {\n        let rkState: State = new State();\n        rkState.pos = startPos;\n        rkState.dir = startDir;\n        rkState.p = p;\n        rkState.q = q;\n        rkState.maxStepSize = mss;\n\n        let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n        while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadJSONGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:156\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadJSONGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSONGeometry(json: string | object, name: string, callback: (Geometry: Object3D) => void, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:173\n                \n            \n\n\n            \n                \n                    Loads geometries from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON or URL to JSON file of the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry or group of geometries.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometries are processed and loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Object3D) => void, filename: string, name: string, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:37\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:139\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:60\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:196\n                \n            \n\n\n            \n                \n                    Process the geometry by setting up material and clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:80\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: Object3D, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:99\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Plane, Material, ObjectLoader, Color, FrontSide } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n  /** Planes for clipping geometry. */\n  private clipPlanes: Plane[];\n  /** Object group ID containing event data. */\n  private EVENT_DATA_ID: string;\n  /** Object group ID containing detector geometries. */\n  private GEOMETRIES_ID: string;\n\n  /**\n   * Constructor for the import manager.\n   * @param clipPlanes Planes for clipping geometry.\n   * @param EVENT_DATA_ID Object group ID containing event data.\n   * @param GEOMETRIES_ID Object group ID containing detector geometries.\n   */\n  constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n    this.clipPlanes = clipPlanes;\n    this.EVENT_DATA_ID = EVENT_DATA_ID;\n    this.GEOMETRIES_ID = GEOMETRIES_ID;\n  }\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename.\n   * @param callback Callback when geometry is processed.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadOBJGeometry(\n    callback: (object: Object3D) => any,\n    filename: string,\n    name: string,\n    color: any,\n    doubleSided: boolean\n  ) {\n    if (color == null) {\n      color = 0x41a6f4;\n    }\n    const objLoader = new OBJLoader();\n    objLoader.load(filename, object => {\n      const processed = this.processOBJ(object, name, color, doubleSided, 'OBJ file');\n      callback(processed);\n    });\n  }\n\n  /**\n   * Parses and loads a geometry in OBJ (.obj) format.\n   * @param geometry Geometry in OBJ (.obj) format.\n   * @param name Name given to the geometry.\n   * @returns The processed object.\n   */\n  public parseOBJGeometry(geometry: string, name: string): Object3D {\n    const objLoader = new OBJLoader();\n    const object = objLoader.parse(geometry);\n    return this.processOBJ(\n      object,\n      name,\n      0x41a6f4,\n      false,\n      'OBJ file loaded from the client.'\n    );\n  }\n\n  /**\n   * Process the geometry object being loaded from OBJ (.obj) format.\n   * @param object 3D object.\n   * @param name Name of the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @param data Data/description to be associated with the object.\n   */\n  private processOBJ(\n    object: Object3D,\n    name: string,\n    color: any,\n    doubleSided: boolean,\n    data?: string\n  ): Object3D {\n    object.name = name;\n    object.userData = { info: data };\n    return this.setObjFlat(object, color, doubleSided);\n  }\n\n  /**\n   * Process the 3D object and flatten it.\n   * @param object3d Group of geometries that make up the object.\n   * @param color Color of the object.\n   * @param doubleSided Renders both sides of the material.\n   * @returns The processed object.\n   */\n  private setObjFlat(object3d: Object3D, color: any, doubleSided: boolean): Object3D {\n    const material2 = new MeshPhongMaterial({\n      color: color,\n      shininess: 0,\n      wireframe: false,\n      clippingPlanes: this.clipPlanes,\n      clipIntersection: true,\n      clipShadows: false,\n      side: doubleSided ? DoubleSide : FrontSide\n    });\n\n    object3d.traverse((child: Object3D) => {\n      if (child instanceof Mesh) {\n        child.name = object3d.name;\n        child.userData = object3d.userData;\n        // Use the new material\n        if (child.material instanceof Material) {\n          child.material.dispose();\n          child.material = material2;\n        }\n        // enable casting shadows\n        child.castShadow = false;\n        child.receiveShadow = false;\n      } else {\n        if (\n          child instanceof LineSegments &&\n          child.material instanceof LineBasicMaterial\n        ) {\n          (child.material.color as Color).set(color);\n        }\n      }\n    });\n    return object3d;\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param geometry Geometry in GLTF (.gltf) format.\n   * @param callback Callback called after the geometry is loaded.\n   */\n  public parseGLTFGeometry(geometry: any, callback: (geometries: Object3D, eventData: Object3D) => any) {\n    const loader = new GLTFLoader();\n    const sceneString = JSON.stringify(geometry, null, 2);\n    loader.parse(sceneString, '', gltf => {\n      const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n      const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n      callback(eventData, geometries);\n    });\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * @param sceneUrl URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param callback Callback called after the scene/geometry is loaded.\n   * @param scale Scale of the geometry.\n   */\n  public loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => any, scale?: number) {\n    const loader = new GLTFLoader();\n    loader.load(sceneUrl, gltf => {\n      const geometry = gltf.scene;\n      this.processGeometry(geometry, name, scale);\n      callback(geometry);\n    });\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param callback Callback called after the geometries are processed and loaded.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    callback: (Geometry: Object3D) => any,\n    scale?: number, doubleSided?: boolean) {\n    const loader = new ObjectLoader();\n    if (typeof json === 'string') {\n      loader.load(json, (geometry: Object3D) => {\n        this.processGeometry(geometry, name, scale, doubleSided);\n        callback(geometry);\n      });\n    } else if (typeof json === 'object') {\n      const geometry = loader.parse(json);\n      this.processGeometry(geometry, name, scale, doubleSided);\n      callback(geometry);\n    }\n  }\n\n  /**\n   * Process the geometry by setting up material and clipping attributes.\n   * @param geometry Geometry to be processed.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  private processGeometry(geometry: Object3D, name: string, scale?: number, doubleSided?: boolean) {\n    geometry.name = name;\n    // Set a custom scale if provided\n    if (scale) {\n      geometry.scale.set(scale, scale, scale);\n    }\n    geometry.traverse((child) => {\n      if (child instanceof Mesh) {\n        child.name ? child.userData.name = child.name : child.name = child.userData.name = name;\n        if (child.material instanceof Material) {\n          const color = child.material['color'] ? child.material['color'] : 0x2fd691;\n          const side = doubleSided ? DoubleSide : child.material['side'];\n          // Disposing of the default material\n          child.material.dispose();\n          // Changing to a material with 0 shininess\n          child.material = new MeshPhongMaterial({\n            color: color,\n            shininess: 0,\n            side: side\n          });\n          // Setting up the clipping planes\n          child.material.clippingPlanes = this.clipPlanes;\n          child.material.clipIntersection = true;\n          child.material.clipShadows = false;\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InfoLoggerService.html":{"url":"injectables/InfoLoggerService.html","title":"injectable - InfoLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InfoLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/infologger.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging data to the information panel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/infologger.service.ts:21\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/infologger.service.ts:32\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/infologger.service.ts:12\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/infologger.service.ts:14\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Service for logging data to the information panel\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoLoggerService {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                getTracksWithRungeKutta\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:269\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:241\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:32\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:148\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:127\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:348\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:111\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:309\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:292\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \ngetTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:169\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                getTracksWithRungeKutta\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:21\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:269\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:241\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:32\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:148\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:127\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:348\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:111\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:309\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:292\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \ngetTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:169\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Group, Object3D, Vector3 } from 'three';\nimport * as THREE from 'three';\nimport { UIService } from '../ui.service';\nimport { ThreeService } from '../three.service';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLoggerService } from '../infologger.service';\nimport { PhoenixMenuNode } from '../../components/phoenix-menu/phoenix-menu-node/phoenix-menu-node';\nimport { RungeKutta } from '../extras/runge-kutta';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeService;\n  /** UIService to perform UI related functions. */\n  private ui: UIService;\n  /** Event data processed by the loader. */\n  private eventData: any;\n\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibluy automatic if tracks have  [val.pos.x, val.pos.y, val.pos.z])\n        track.pos = track.pos.concat( newpos );\n        break;\n      }\n    }\n    console.log(Tracks);\n    return Tracks;\n  }\n\n  /**\n   * Get the list of event names from the event data.\n   * @param eventsData Object containing all event data.\n   * @returns List of event names.\n   */\n  public getEventsList(eventsData: any): string[] {\n    const eventsList: string[] = [];\n\n    for (const eventName of Object.keys(eventsData)) {\n      if (eventsData[eventName] !== null) {\n        eventsList.push(eventName);\n      }\n    }\n\n    return eventsList;\n  }\n\n  /**\n   * Get list of collections in the event data.\n   * @returns List of all collection names.\n   */\n  public getCollections(): string[] {\n    if (!this.eventData) {\n      return null;\n    }\n\n    const collections = [];\n    for (const objectType of Object.keys(this.eventData)) {\n      if (this.eventData[objectType] && typeof this.eventData[objectType] === 'object') {\n        for (const collection of Object.keys(this.eventData[objectType])) {\n          collections.push(collection);\n        }\n      }\n    }\n    return collections;\n  }\n\n  /**\n   * Get the collection with the given collection name from the event data.\n   * @param collectionName Name of the collection to get.\n   * @returns An object containing the collection.\n   */\n  public getCollection(collectionName: string): any {\n    if (!this.eventData) {\n      return null;\n    }\n\n    for (const objectType of Object.keys(this.eventData)) {\n      if (this.eventData[objectType]) {\n        for (const collection of Object.keys(this.eventData[objectType])) {\n          if (collection === collectionName) {\n            return this.eventData[objectType][collection];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Receives an object containing the data from an event and parses it\n   * to reconstruct the different collections of physics objects.\n   * @param eventData Representing ONE event (expressed in the Phoenix format).\n   */\n  protected loadObjectTypes(eventData: any) {\n    if (eventData.Tracks) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts: Cut[] = [\n        new Cut('chi2', 0, 50),\n        new Cut('dof', 0, 100),\n        new Cut('mom', 0, 500)\n      ];\n\n      this.addObjectType(eventData.Tracks, PhoenixObjects.getTrack, 'Tracks', cuts);\n    }\n\n    if (eventData.Jets) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      const addJetsSizeOption = (typeFolder: any, typeFolderPM: PhoenixMenuNode) => {\n        if (typeFolder) {\n          const sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            min: 1, max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            }\n          });\n        }\n      };\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\n    }\n\n    if (eventData.Hits) {\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons');\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string,\n    cuts?: Cut[], extendEventDataTypeUI?: (typeFolder: any, typeFolderPM?: PhoenixMenuNode) => void) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName, extendEventDataTypeUI);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName, extendEventDataTypeUI);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      cuts = cuts?.filter(cut => objectCollection[0][cut.field]);\n      this.ui.addCollection(typeFolder, collectionName, cuts);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new THREE.Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n      // console.log(objectParams);\n      break;\n    }\n\n    objectGroup.add(collscene);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n\n    for (const clusterID of muonParams.LinkedClusters) {\n      const clusterColl = clusterID.split(':')[0];\n      const clusterIndex = clusterID.split(':')[1];\n\n      if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n        const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n        if (clusterParams) {\n          const cluster = PhoenixObjects.getCluster(clusterParams);\n          muonScene.add(cluster);\n        }\n      }\n    }\n\n    for (const trackID of muonParams.LinkedTracks) {\n      const trackColl = trackID.split(':')[0];\n      const trackIndex = trackID.split(':')[1];\n\n      if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n        const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n        if (trackParams) {\n          const track = PhoenixObjects.getTrack(trackParams);\n          muonScene.add(track);\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label \n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:14\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:16\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:8\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:18\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:10\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:20\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:12\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:60\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: string, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:102\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:82\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:73\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:113\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts:93\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children)\n      this.children = children;\n    if (configs)\n      this.configs = configs;\n    if (parent)\n      this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(name: string, onToggle?: (value: boolean) => void, icon?: string): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: string, options: any): PhoenixMenuNode {\n    let configOptions = { type: type };\n    Object.assign(configOptions, options);\n    this.configs.push(configOptions);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      child.toggleSelfAndDescendants(value);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:183\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:137\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:89\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:15\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as THREE from 'three';\nimport { Object3D } from 'three';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    const positions = trackParams.pos;\n    // Track with no points\n    if (!positions) {\n      return;\n    }\n\n    const numPoints = positions.length;\n    // Track with too few points\n    if (numPoints  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new THREE.Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new THREE.Vector3(0, 1, 0);\n    const v2 = new THREE.Vector3(x, y, z);\n    const quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new THREE.CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new THREE.MeshBasicMaterial({ color: 0x2194CE, opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = jetParams;\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new THREE.PointsMaterial({ size: 10 });\n    material.color.set('#ff0000');\n    // object\n    const pointsObj = new THREE.Points(geometry, material);\n    pointsObj.userData = hitsParamsClone;\n    pointsObj.userData.uuid = pointsObj.uuid;\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0;\n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new THREE.BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new THREE.MeshPhongMaterial({ color: 0xFFD166 });\n    // object\n    const cube = new THREE.Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new THREE.Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new THREE.Vector3(0, 0, 0));\n    cube.userData = clusterParams;\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                    Private\n                                setRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate the renderer manager by setting up the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:13\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:169\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:192\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:108\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:116\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:124\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:202\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:145\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:31\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:210\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:182\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:85\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:51\n                \n            \n\n\n            \n                \n                    Set the initial renderer.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:100\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:157\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters } from 'three';\nimport { ControlsManager } from './controls-manager';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n\n  /**\n   * Instantiate the renderer manager by setting up the main renderer.\n   */\n  constructor() {\n    // Main renderer for current browsers\n    this.setRenderer();\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene.\n   * @param controlsManager Manager for managing controls.\n   */\n  public render(scene: Scene, controlsManager: ControlsManager) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(\n            scene,\n            controlsManager.getOverlayCamera()\n          );\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set the initial renderer.\n   */\n  private setRenderer() {\n    const renderer: WebGLRenderer = new WebGLRenderer();\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n    this.getMainRenderer().setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    this.getMainRenderer().setPixelRatio(window.devicePixelRatio)\n    this.getMainRenderer().domElement.className = 'ui-element';\n    this.getMainRenderer().domElement.id = 'three-canvas';\n    let canvas = document.getElementById('eventDisplay');\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/runge-kutta.ts:91\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/runge-kutta.ts:13\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n    /**\n     * Perform a Runge-Kutta step for the given state.\n     * @param state State at which the step is to be performed.\n     * @returns The computed step size.\n     */\n    static step(state: State): number {\n        // Charge (q) to momentum (p) ratio in SI units\n        const qop: number = state.q / (state.unitC * state.p);\n\n        // Runge-Kutta integrator state\n        let h2: number,\n            half_h: number,\n            B_middle: Vector3,\n            B_last: Vector3,\n            k2: Vector3,\n            k3: Vector3,\n            k4: Vector3;\n\n        // First Runge-Kutta point (at current position)\n        const B_first: Vector3 = Field.get(state.pos);\n        // state.dir.cross(B_first) * qop\n        const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n        // Try Runge-Kutta step with h as the step size\n        const tryRungeKuttaStep = (h: number) => {\n            h2 = h * h;\n            half_h = h / 2;\n\n            // Second Runge-Kutta point\n            // state.pos + state.dir * half_h + k1 * (h2 / 8)\n            const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n            B_middle = Field.get(pos1);\n            // (state.dir + k1 * half_h).cross(B_middle) * qop\n            k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Third Runge-Kutta point\n            // (state.dir + k2 * half_h).cross(B_middle) * qop\n            k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Last Runge-Kutta point\n            // state.pos + state.dir * h + k3 * (h2 / 2)\n            const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n            B_last = Field.get(pos2);\n            // (state.dir + k3 * h).cross(B_last) * qop\n            k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n            // (k1 - k2 - k3 + k4)\n            const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n            // h * (k1 - k2 - k3 + k4).lpNorm()\n            return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n        };\n\n        // Checking the error estimate\n        let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n        while (error_estimate > 0.0002) {\n            state.stepSize *= 0.5;\n            error_estimate = tryRungeKuttaStep(state.stepSize);\n        }\n\n        let fh: number = state.stepSize;\n        let fh2: number = Math.pow(fh, 2);\n\n        // Update position and momentum\n        // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n        state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n        // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n        state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n        state.dir.normalize();\n\n        return state.stepSize;\n    }\n\n    /**\n     * Propagate using the given properties by performing the Runge-Kutta steps.\n     * @param startPos Starting position in 3D space.\n     * @param startDir Starting direction in 3D space.\n     * @param p Momentum.\n     * @param q Charge.\n     * @param mss Max step size.\n     * @param plength Path length.\n     * @returns An array containing position and direction at that position calculated\n     * through the Runge-Kutta steps.\n     */\n    static propagate(startPos: Vector3, startDir: Vector3, p: number, q: number,\n        mss: number = -1, plength: number = 1000): { pos: Vector3, dir: Vector3 }[] {\n        let rkState: State = new State();\n        rkState.pos = startPos;\n        rkState.dir = startDir;\n        rkState.p = p;\n        rkState.q = q;\n        rkState.maxStepSize = mss;\n\n        let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n        while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/script-loader.ts:13\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onScriptsLoaded\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when all the JSRoot scripts have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/script-loader.ts:35\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        declare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\n   */\n  public static loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void) {\n    (async () => {\n      const allScripts = [\n        'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\n        'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\n        'JSRootGeoBase.js', 'JSRootGeoPainter.js'\n      ];\n      for (const script of allScripts) {\n        await ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT');\n      }\n      onScriptsLoaded(JSROOT);\n    })();\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(scriptURL: string, scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]): Promise {\n    return new Promise((resolve, reject) => {\n      const scriptExists = document\n        .querySelectorAll('script[src=\"' + scriptURL + '\"]');\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n        }\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n          });\n        }\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/selection-manager.ts:37\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new BehaviorSubject('')\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        BehaviorSubject for the currently selected object. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:34\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:28\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:37\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:142\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:176\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:131\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:32\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:117\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:105\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:84\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:210\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:59\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:187\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:76\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:92\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper, WebGLRenderer\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLoggerService } from '../infologger.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { EffectsManager } from './effects-manager';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[]; };\n  /** BehaviorSubject for the currently selected object. */\n  private activeObject = new BehaviorSubject('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLoggerService;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera, scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLoggerService\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      if (enable) {\n        this.enableSelecting();\n      } else {\n        this.disableSelecting();\n      }\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document.getElementById('three-canvas').addEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').addEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').addEventListener('touchstart',\n      this.onTouchDown);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document.getElementById('three-canvas').removeEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').removeEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').removeEventListener('touchstart',\n      this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n  }\n\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) { return; }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  }\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n      this.activeObject.next(intersectedObject.uuid);\n\n      for (const key of Object.keys(intersectedObject.userData)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: intersectedObject.userData[key]\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData).map((key) => {\n        // Only take properties that are a string or number (no arrays or objects)\n        if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n          return key + '=' + intersectedObject.userData[key];\n        }\n      }).filter(val => val);\n      // Build the log text and add to the logger\n      const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  }\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  }\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    objectsGroup.traverse((object: any) => {\n      if (object.uuid === uuid) {\n        this.outlinePass.selectedObjects = [object];\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:123\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:133\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:125\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:135\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:121\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:127\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:131\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/runge-kutta.ts:129\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n    /**\n     * Perform a Runge-Kutta step for the given state.\n     * @param state State at which the step is to be performed.\n     * @returns The computed step size.\n     */\n    static step(state: State): number {\n        // Charge (q) to momentum (p) ratio in SI units\n        const qop: number = state.q / (state.unitC * state.p);\n\n        // Runge-Kutta integrator state\n        let h2: number,\n            half_h: number,\n            B_middle: Vector3,\n            B_last: Vector3,\n            k2: Vector3,\n            k3: Vector3,\n            k4: Vector3;\n\n        // First Runge-Kutta point (at current position)\n        const B_first: Vector3 = Field.get(state.pos);\n        // state.dir.cross(B_first) * qop\n        const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n        // Try Runge-Kutta step with h as the step size\n        const tryRungeKuttaStep = (h: number) => {\n            h2 = h * h;\n            half_h = h / 2;\n\n            // Second Runge-Kutta point\n            // state.pos + state.dir * half_h + k1 * (h2 / 8)\n            const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n            B_middle = Field.get(pos1);\n            // (state.dir + k1 * half_h).cross(B_middle) * qop\n            k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Third Runge-Kutta point\n            // (state.dir + k2 * half_h).cross(B_middle) * qop\n            k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n            // Last Runge-Kutta point\n            // state.pos + state.dir * h + k3 * (h2 / 2)\n            const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n            B_last = Field.get(pos2);\n            // (state.dir + k3 * h).cross(B_last) * qop\n            k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n            // (k1 - k2 - k3 + k4)\n            const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n            // h * (k1 - k2 - k3 + k4).lpNorm()\n            return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n        };\n\n        // Checking the error estimate\n        let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n        while (error_estimate > 0.0002) {\n            state.stepSize *= 0.5;\n            error_estimate = tryRungeKuttaStep(state.stepSize);\n        }\n\n        let fh: number = state.stepSize;\n        let fh2: number = Math.pow(fh, 2);\n\n        // Update position and momentum\n        // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n        state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n        // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n        state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n        state.dir.normalize();\n\n        return state.stepSize;\n    }\n\n    /**\n     * Propagate using the given properties by performing the Runge-Kutta steps.\n     * @param startPos Starting position in 3D space.\n     * @param startDir Starting direction in 3D space.\n     * @param p Momentum.\n     * @param q Charge.\n     * @param mss Max step size.\n     * @param plength Path length.\n     * @returns An array containing position and direction at that position calculated\n     * through the Runge-Kutta steps.\n     */\n    static propagate(startPos: Vector3, startDir: Vector3, p: number, q: number,\n        mss: number = -1, plength: number = 1000): { pos: Vector3, dir: Vector3 }[] {\n        let rkState: State = new State();\n        rkState.pos = startPos;\n        rkState.dir = startDir;\n        rkState.p = p;\n        rkState.q = q;\n        rkState.maxStepSize = mss;\n\n        let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n        while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                getTracksWithRungeKutta\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:269\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:241\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:32\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:148\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:127\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:348\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:111\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:309\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:292\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \ngetTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:169\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:23\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:17\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:58\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/vr-manager.ts:21\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:67\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:76\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:96\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:130\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:103\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/vr-manager.ts:30\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Group, Camera, Vector3, PerspectiveCamera } from \"three\";\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n  /** The VR controller for movement. */\n  private controller: any;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(renderer: WebGLRenderer, onSessionEnded?: () => void) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    if ((navigator as any)?.xr) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n      };\n      (navigator as any)?.xr?.requestSession(VRManager.SESSION_TYPE, sessionInit)\n        .then(this.onVRSessionStarted);\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  }\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   */\n  public getCameraGroup(camera?: Camera) {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera) {\n      this.vrCamera = new Camera().copy(camera);\n      this.vrCamera.name = 'VR_CAMERA';\n      (this.vrCamera as PerspectiveCamera).far = 1000000;\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    // Get the controller\n    this.controller = this.renderer.xr.getController(0);\n    this.controller.addEventListener('selectstart', () => {\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    });\n    this.controller.addEventListener('selectend', () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    });\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.renderer.xr.getCamera(new Camera())?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/eventdisplay.service.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ThreeService } from './three.service';\nimport { InfoLoggerService } from './infologger.service';\nimport { UIService } from './ui.service';\nimport { Configuration } from './extras/configuration.model';\nimport { HttpClient } from '@angular/common/http';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Service for all event display related functions.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventdisplayService {\n\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Frame ID of the current animation frame. */\n  private frameID: number;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n\n  /**\n   * Constructor for the event display service.\n   * @param graphicsLibrary ThreeService for all three.js related functions.\n   * @param ui UIService for all UI related functions.\n   * @param http HttpClient for making http requests.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  constructor(\n    public graphicsLibrary: ThreeService,\n    private ui: UIService,\n    private http: HttpClient,\n    private infoLogger: InfoLoggerService\n  ) { }\n\n  /**\n   * Initializes the components needed to later represent the geometries.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration, this.infoLogger);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    if (this.frameID) {\n      cancelAnimationFrame(this.frameID);\n    }\n    // Animate loop\n    const animate = () => {\n      this.frameID = requestAnimationFrame(animate);\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    animate();\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadOBJGeometry(filename: string, name: string, color: any,\n    doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, color, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(content: string, name: string, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   */\n  public parsePhoenixDisplay(input: any) {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n      this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   */\n  public parseGLTFGeometry(input: any) {\n    const scene = JSON.parse(input);\n    this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadGLTFGeometry(url: any, name: string,\n    scale?: number, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\n    this.ui.addGeometry(name, 0xff0000, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadJSONGeometry(json: string | object, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n    this.ui.addGeometry(name, 0xff0000, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(JSROOT: any, url: string, name: string,\n    scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name, scale, doubleSided, initiallyVisible);\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(JSROOT: any, url: string, objectName: string,\n    name: string, scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.OpenFile(url, (file: any) => {\n        file.ReadObject(objectName, (obj: any) => {\n          this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name, scale, doubleSided, initiallyVisible);\n        });\n      });\n    }\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.getEventDataLoader().getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.getEventDataLoader().getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.getEventDataLoader().getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, doubleSided);\n      },\n      loadJSONGeometry: (json: string | object, name: string,\n        scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) => {\n        this.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n      },\n      parseOBJGeometry: (content: string, name: string) => {\n        this.parseOBJGeometry(content, name);\n      },\n      loadSceneConfiguration: (displayUrl: any) => {\n        this.http\n          .get(displayUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.loadSceneConfiguration(input);\n          });\n      },\n      parseGLTFGeometry: (gltfUrl: any) => {\n        this.http\n          .get(gltfUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.parseGLTFGeometry(input);\n          });\n      }\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void) {\n    this.graphicsLibrary\n      .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\n1. Issue tracking\nThe best way to start contributing is to explore the GitHub issue tracker for the repository. \nIf you have already tried the application feel free to open an issue if you notice any bug or feature that could be improved.\nInclude a brief description and context of the issue, and optionally choose labels to mark the issue as bug, enhancement, question...\nto give extra information to other developers.\n2. Start coding\nOnce you are decided to start contributing on the repository, \nyou may want to take a look at our developer guide that can be found here.\n3. Pull Requests\nWhen creating a Pull Request please include a short description explaining what has changed and why. \nThis will help others reviewing your code so you may also reference any issues that you were working on fixing.\nFinally choose a meaningful title so your pull request can be easily identified.\nThanks!\nYour contribution is very appreciated, thank you!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/components/phoenix-menu/phoenix-menu-node/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/services/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            injectable\n            EventdisplayService\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/extras/attribute.pipe.ts\n            \n            pipe\n            AttributePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/extras/configuration.model.ts\n            \n            class\n            Configuration\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/services/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/services/extras/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/extras/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/extras/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/infologger.service.ts\n            \n            injectable\n            InfoLoggerService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                96 %\n                (29/30)\n            \n        \n        \n            \n                \n                src/app/services/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                96 %\n                (24/25)\n            \n        \n        \n            \n                \n                src/app/services/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                src/app/services/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/app/services/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                95 %\n                (22/23)\n            \n        \n        \n            \n                \n                src/app/services/three.service.ts\n            \n            injectable\n            ThreeService\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/app/services/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/services/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/app/services/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/services/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                src/app/services/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/services/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/app/services/ui.service.ts\n            \n            injectable\n            UIService\n            \n                100 %\n                (50/50)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^10.0.14\n        \n            @angular/cdk : ^10.1.3\n        \n            @angular/common : ^10.0.14\n        \n            @angular/compiler : ^10.0.14\n        \n            @angular/core : ^10.0.14\n        \n            @angular/forms : ^10.0.14\n        \n            @angular/material : ^10.1.3\n        \n            @angular/platform-browser : ^10.0.14\n        \n            @angular/platform-browser-dynamic : ^10.0.14\n        \n            @angular/router : ^10.0.14\n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            core-js : ^3.6.5\n        \n            coveralls : ^3.1.0\n        \n            css-element-queries : ^1.2.3\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            rxjs : ^6.6.2\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.120.0\n        \n            tslib : ^2.0.1\n        \n            zone.js : ^0.11.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\nPhoenix Project\nThe idea of this project is to have a simple way to visualise event and geometry data using nothing more than a web browser. The data should be as detector-agnostic as possible.\nTechnically the 3D is done with three.js, the menu (at the moment) uses DAT.GUI and the data format is just plain JSON.\nThis project was generated with Angular CLI version 7.3.4.\nYou can see an online version at https://hepsoftwarefoundation.org/phoenix/\nDemo\n\nBuild and install\nThis is an Angular application, so you will need to have Node js and Angular CLI installed locally.\nYou can follow this guide to set up your local environment.\nOnce everything is set up, run ng serve from the command line in the project directory for a dev server. Then navigate to http://localhost:4200/ from your browser.\nThe app will automatically reload if you change any of the source files.\nDocumentation\n\nUser manual.\nHow to contribute.\nDeveloper guide.\n\nContact\nThis is still very much a work in progress, so let me know of any problems (and don't be too surprised if there are some).\nedward.moyse@cern.ch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
