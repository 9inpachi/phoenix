var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,2.068,1,1.809]],["body/modules/AppModule.html",[0,1.998,1,3.212,2,1.998,3,1.748,4,2.334,5,3.673,6,3.212,7,2.334,8,1.748,9,2.334,10,2.334,11,2.845,12,0.042,13,2.751,14,2.334,15,1.548,16,0.621,17,0.287,18,0.287,19,2.843,20,3.913,21,4.82,22,4.82,23,4.82,24,4.82,25,0.976,26,3.913,27,3.212,28,1.748,29,3.913,30,1.548,31,3.913,32,2.334,33,4.475,34,2.843,35,4.82,36,2.843,37,4.475,38,2.843,39,4.475,40,2.843,41,4.475,42,2.843,43,4.475,44,2.843,45,4.475,46,2.843,47,3.913,48,2.843,49,2.843,50,3.145,51,2.334,52,4.475,53,2.843,54,4.475,55,2.843,56,2.843,57,2.843,58,2.843,59,3.913,60,2.843,61,2.843,62,3.913,63,5.963,64,2.843,65,3.913,66,3.913,67,2.843,68,3.913,69,2.843,70,3.913,71,2.843,72,3.913,73,2.843,74,3.913,75,2.843,76,3.913,77,2.843,78,3.913,79,3.913,80,3.913,81,3.913,82,3.913,83,2.843,84,3.913,85,2.843,86,2.843,87,3.913,88,2.843,89,4.475,90,3.913,91,3.913,92,3.913,93,3.913,94,3.913,95,2.843,96,2.843,97,3.913,98,3.913,99,3.913,100,2.843,101,3.913,102,4.475,103,3.913,104,2.843,105,2.751,106,2.843,107,3.913,108,2.843,109,2.843,110,2.843,111,3.913,112,2.843,113,2.843,114,3.913,115,2.843,116,3.913,117,2.843,118,2.843,119,2.843,120,3.913,121,2.843,122,2.843,123,2.843,124,3.913,125,2.843,126,2.843,127,3.913,128,2.964,129,2.843,130,2.843,131,3.913,132,2.843,133,2.843,134,3.913,135,3.913,136,3.913,137,2.843,138,1.534,139,2.843,140,3.913,141,2.843,142,3.913,143,2.843,144,2.843,145,3.913,146,2.843,147,2.843,148,2.843,149,3.913,150,4.82,151,3.913,152,2.843,153,3.913,154,2.751,155,2.843,156,2.843,157,0.813,158,3.89,159,5.533,160,2.843,161,1.381,162,2.843,163,2.334,164,2.334,165,2.334,166,2.843,167,2.843,168,2.843,169,2.843,170,0.395,171,0.137,172,0.019,173,0.027,174,0.019]],["title/pipes/AttributePipe.html",[11,1.602,175,1.809]],["body/pipes/AttributePipe.html",[11,3.02,12,0.042,16,0.571,17,0.415,18,0.415,25,0.655,30,2.239,170,0.571,171,0.198,172,0.028,173,0.034,174,0.028,175,3.41,176,4.111,177,3.375,178,0.593,179,4.968,180,3.492,181,1.275,182,2.705,183,5.546,184,1.957,185,1.998,186,0.741,187,0.745,188,5.339,189,4.968,190,5.546,191,0.655,192,4.111,193,4.078,194,4.968,195,0.745,196,0.571,197,0.745,198,2.514,199,5.546,200,1.998,201,4.078,202,4.968,203,0.901,204,4.968,205,3.375,206,0.792,207,5.678,208,4.111,209,4.968,210,4.111,211,4.111,212,4.111,213,1.056]],["title/classes/CMSObjects.html",[171,0.142,214,2.068]],["body/classes/CMSObjects.html",[12,0.042,16,0.488,17,0.355,18,0.355,25,0.561,157,1.551,161,2.55,164,3.701,170,0.488,171,0.17,172,0.024,173,0.031,174,0.024,178,0.538,181,1.158,186,0.488,187,0.818,191,0.561,195,0.984,196,0.488,197,0.638,203,0.818,206,0.719,213,0.903,214,3.17,215,0.808,216,3.701,217,2.473,218,1.965,219,1.767,220,2.772,221,2.455,222,0.818,223,3.701,224,2.455,225,0.561,226,4.085,227,4.509,228,4.509,229,3.518,230,1.965,231,3.413,232,5.551,233,1.767,234,4.976,235,1.95,236,3.518,237,3.518,238,1.767,239,2.473,240,4.509,241,3.518,242,2.473,243,3.701,244,3.701,245,2.888,246,1.242,247,2.473,248,0.903,249,3.518,250,3.518,251,3.518,252,3.518,253,3.518,254,2.038,255,4.509,256,3.518,257,3.518,258,4.509,259,3.518,260,3.518,261,3.518,262,5.891,263,4.509,264,1.756,265,2.169,266,4.509,267,3.06,268,1.95,269,3.518,270,4.509,271,4.976,272,4.976,273,4.509,274,4.976,275,4.085,276,3.518,277,4.509,278,3.518,279,4.509,280,3.518,281,3.518,282,3.518,283,3.518,284,3.518,285,3.518,286,2.772,287,2.473,288,3.701,289,2.455,290,3.701,291,2.888,292,2.888,293,3.518,294,3.518,295,4.976,296,3.518,297,2.888,298,3.518,299,3.518,300,3.518,301,3.518,302,3.518,303,3.518,304,3.518,305,3.518,306,3.518,307,3.518,308,3.518]],["title/classes/Configuration.html",[171,0.142,309,1.43]],["body/classes/Configuration.html",[12,0.042,16,0.49,17,0.356,18,0.356,25,0.794,170,0.49,171,0.17,172,0.024,173,0.031,174,0.024,178,0.539,186,0.49,187,0.819,191,0.886,195,0.64,196,0.692,197,0.64,203,0.985,206,0.563,213,1.16,215,0.811,222,1.097,225,0.563,248,1.483,254,1.246,268,1.383,309,2.7,310,2.897,311,4.061,312,4.021,313,1.385,314,2.591,315,1.292,316,3.237,317,4.983,318,5.254,319,5.254,320,4.518,321,1.726,322,4.518,323,3.905,324,3.025,325,3.025,326,3.064,327,3.529,328,4.518,329,1.771,330,2.778,331,3.529,332,2.46,333,3.529,334,4.518,335,3.529,336,1.771,337,2.46,338,0.906,339,3.529,340,2.195,341,3.529,342,3.529,343,4.983,344,3.529]],["title/classes/Cut.html",[171,0.142,345,1.282]],["body/classes/Cut.html",[12,0.042,16,0.53,17,0.385,18,0.385,170,0.53,171,0.184,172,0.026,173,0.032,174,0.026,178,0.566,186,0.772,191,0.862,193,4.94,195,0.692,196,0.75,197,0.692,198,2.531,206,0.824,215,0.877,222,1.091,225,0.608,313,1.383,315,1.357,321,1.213,345,2.423,346,3.133,347,3.817,348,2.347,349,5.667,350,5.808,351,5.808,352,4.747,353,1.59,354,2.081,355,4.747,356,3.337,357,4.747,358,5.405,359,5.405,360,5.808,361,5.405,362,3.817,363,3.817,364,3.817,365,3.817,366,3.817]],["title/interfaces/EventDataLoader.html",[316,1.602,367,1.602]],["body/interfaces/EventDataLoader.html",[12,0.042,16,0.661,17,0.324,18,0.324,25,0.76,138,1.667,170,0.447,172,0.022,173,0.029,174,0.022,178,0.605,181,1.471,185,2.464,186,0.661,187,0.771,191,0.841,195,0.864,196,0.661,197,0.864,203,1.047,206,0.864,218,1.854,219,2.198,222,1.074,225,0.513,313,1.317,314,1.854,316,2.317,338,1.092,353,1.58,367,1.752,368,1.978,369,4.447,370,1.752,371,2.616,372,2.616,373,2.761,374,2.761,375,2.616,376,2.616,377,2.761,378,2.464,379,2.633,380,2.464,381,2.464,382,1.79,383,2.641,384,2.95,385,2.317,386,1.854,387,2.616,388,2.317,389,2.726,390,2.616,391,2.616,392,2.21,393,1.854,394,2.761,395,2.123,396,1.912,397,1.854,398,2.616,399,1.854,400,2.317,401,2.616,402,2.616,403,1.854,404,1.854,405,1.501,406,2.317,407,3.218,408,1.854,409,2.726,410,2.317,411,2.616,412,3.492,413,3.492,414,2.641,415,2.317,416,2.991,417,2.991,418,2.21,419,3.492,420,2.616,421,4.447,422,3.218,423,1.854,424,2.317,425,2.317,426,2.067,427,2.616,428,3.218,429,4.254,430,3.943,431,3.565,432,2.317,433,2.067,434,2.262,435,2.262,436,1.978]],["title/classes/ExportManager.html",[171,0.142,437,2.068]],["body/classes/ExportManager.html",[8,2.826,12,0.042,16,0.354,17,0.257,18,0.559,25,0.673,157,1.625,170,0.721,171,0.123,172,0.031,173,0.025,174,0.017,178,0.633,184,1.622,186,0.769,187,0.658,191,0.846,195,0.941,196,0.736,197,0.941,203,0.941,206,0.892,213,1.083,215,0.586,222,1.014,225,0.406,235,2.254,238,0.999,246,0.9,247,2.967,248,1.296,254,1.28,265,1.111,309,2.579,313,1.306,321,1.544,338,1.18,353,1.584,356,2.549,393,2.414,396,1.28,397,1.58,403,2.572,409,1.239,417,2.549,437,2.549,438,4.432,439,1.388,440,2.826,441,2.23,442,2.23,443,1.421,444,3.626,445,3.626,446,2.018,447,5.476,448,3.626,449,3.626,450,3.626,451,3.626,452,2.55,453,3.626,454,3.213,455,2.55,456,2.003,457,2.977,458,2.549,459,2.977,460,2.977,461,2.977,462,5.047,463,4.043,464,3.569,465,3.626,466,2.093,467,2.23,468,3.626,469,5.399,470,3.849,471,2.093,472,3.626,473,3.626,474,3.626,475,2.55,476,3.626,477,2.55,478,3.626,479,2.55,480,2.977,481,3.626,482,3.626,483,2.093,484,3.626,485,2.826,486,3.626,487,2.55,488,3.626,489,2.55,490,2.093,491,4.22,492,2.55,493,2.55,494,2.55,495,4.597,496,2.55,497,2.093,498,2.093,499,2.55,500,1.792,501,3.626,502,2.55,503,2.55,504,2.093,505,2.55,506,2.23,507,2.55,508,2.55,509,4.597,510,2.55,511,4.597,512,2.55,513,1.792,514,2.55,515,2.55,516,2.55,517,2.55,518,2.55,519,2.55,520,2.55,521,2.093,522,2.55,523,2.55,524,2.55,525,2.55,526,2.55,527,2.55,528,2.55,529,2.55,530,2.55,531,2.55,532,2.55,533,2.55]],["title/classes/ImportManager.html",[171,0.142,534,2.068]],["body/classes/ImportManager.html",[12,0.042,16,0.379,17,0.176,18,0.462,25,0.73,157,1.53,158,1.919,161,2.917,170,0.242,171,0.084,172,0.012,173,0.019,174,0.012,178,0.594,181,1.513,182,1.486,184,1.758,186,0.83,187,0.495,191,0.822,195,0.883,196,0.716,197,0.883,200,1.849,203,0.903,206,0.923,213,0.863,215,0.401,220,1.678,221,2.249,222,0.794,225,0.278,230,1.908,233,1.857,235,2.149,238,2.189,239,2.364,243,2.24,244,2.24,245,2.24,246,0.615,248,1.373,254,1.672,265,0.76,268,1.318,286,3.52,289,1.486,292,2.76,313,1.119,314,1.465,315,0.78,321,1.069,332,2.652,336,0.683,338,1.25,353,1.688,354,1.719,393,1.189,396,1.672,397,1.189,399,1.658,403,2.353,423,1.189,439,0.95,440,2.339,441,1.678,442,1.678,443,1.07,446,1.935,464,3.121,467,3.372,470,3.078,483,1.431,500,3.855,506,1.678,521,1.431,534,1.919,535,4.294,536,4.379,537,4.737,538,4.737,539,2.24,540,2.729,541,2.76,542,2.24,543,2.24,544,2.729,545,3.363,546,2.729,547,2.729,548,4.379,549,2.24,550,4.129,551,3.757,552,3.889,553,2.674,554,1.431,555,1.431,556,2.729,557,4.629,558,4.667,559,1.744,560,4.089,561,3.595,562,3.078,563,2.24,564,1.849,565,3.595,566,2.24,567,1.744,568,3.063,569,3.121,570,1.744,571,4.391,572,1.744,573,1.919,574,3.595,575,3.595,576,3.595,577,3.721,578,2.729,579,1.744,580,1.431,581,2.071,582,2.729,583,1.744,584,2.729,585,1.226,586,2.76,587,1.744,588,1.744,589,2.24,590,2.729,591,2.729,592,2.729,593,3.363,594,2.729,595,4.129,596,1.744,597,3.363,598,1.744,599,3.363,600,1.744,601,1.744,602,2.729,603,1.744,604,1.744,605,1.744,606,1.744,607,1.744,608,2.692,609,1.744,610,1.744,611,1.744,612,2.729,613,3.363,614,1.744,615,1.744,616,1.744,617,1.744,618,1.744,619,1.744,620,3.363,621,4.379,622,2.729,623,1.744,624,1.744,625,1.744,626,1.431,627,4.129,628,2.729,629,1.226,630,1.744,631,1.744,632,1.744,633,1.744,634,1.744,635,1.744,636,1.744,637,2.24,638,2.24,639,1.744,640,1.744,641,1.744,642,1.431,643,1.744,644,1.744,645,3.363,646,3.363,647,1.919,648,1.744,649,1.744,650,1.744,651,1.744,652,1.431,653,1.744,654,1.744,655,1.744,656,2.729,657,1.744,658,2.729,659,1.744,660,1.744,661,0.95,662,1.744,663,1.744,664,1.744,665,1.744]],["title/injectables/InfoLoggerService.html",[382,1.038,666,1.809]],["body/injectables/InfoLoggerService.html",[12,0.042,16,0.832,17,0.372,18,0.372,25,0.588,30,2.01,138,2.093,170,0.512,171,0.178,172,0.025,173,0.032,174,0.025,178,0.555,186,0.512,187,0.843,191,0.851,195,0.669,196,0.706,197,0.669,198,2.026,200,1.794,203,0.923,206,0.741,213,0.948,225,0.588,313,1.348,315,1.329,337,2.531,338,0.948,353,1.607,354,1.64,382,1.64,395,2.093,396,1.64,404,2.026,405,1.885,408,2.026,418,2.449,433,2.259,446,1.983,589,3.816,661,2.531,666,2.858,667,3.03,668,3.03,669,5.088,670,5.088,671,2.595,672,5.341,673,4.648,674,3.508,675,3.691,676,4.648,677,4.737,678,4.613,679,3.691,680,3.691,681,4.648,682,3.816,683,3.691,684,4.648,685,4.648,686,4.648,687,3.03,688,3.03,689,3.691,690,3.691,691,3.691,692,3.691,693,3.691]],["title/classes/LHCbLoader.html",[171,0.142,694,2.068]],["body/classes/LHCbLoader.html",[12,0.042,16,0.585,17,0.257,18,0.257,25,0.406,138,0.997,157,1.035,163,3.983,170,0.353,171,0.123,172,0.017,173,0.025,174,0.017,178,0.653,181,1.458,184,0.898,185,2.232,186,0.768,187,0.657,191,0.925,195,1.004,196,0.814,197,0.978,200,1.236,203,1.03,206,0.406,215,0.585,218,1.109,219,2.079,222,1.088,225,0.406,230,2.115,231,2.592,233,2.034,235,0.997,238,1.902,248,1.458,268,0.997,313,1.359,314,2.198,315,1.035,321,1.542,324,1.972,325,1.972,329,1.419,336,1.419,338,1.295,340,2.82,345,1.578,348,1.564,353,1.543,370,1.385,371,2.226,372,2.226,373,2.295,374,2.746,375,2.226,376,1.564,377,2.5,378,2.232,379,2.451,380,2.232,381,1.759,382,1.278,384,1.972,385,1.385,386,1.578,387,1.564,388,1.385,389,1.759,390,1.564,391,1.564,392,1.578,393,2.115,394,1.972,395,1.652,396,1.78,397,1.109,398,1.564,399,1.109,400,1.385,401,1.564,402,1.564,403,1.109,404,1.109,405,0.898,406,1.385,408,1.109,409,2.691,410,2.295,415,2.746,418,2.115,423,1.578,424,1.972,425,1.972,426,1.759,427,1.564,432,1.385,433,2.048,443,1.419,446,1.99,456,1.578,564,1.759,568,2.226,569,2.984,581,1.385,674,2.226,694,2.545,695,4.14,696,2.972,697,3.77,698,2.545,699,3.545,700,2.545,701,2.545,702,2.545,703,2.545,704,2.972,705,4.63,706,2.089,707,2.089,708,2.226,709,1.109,710,1.759,711,2.089,712,2.544,713,2.544,714,1.788,715,3.621,716,2.544,717,1.788,718,3.228,719,2.545,720,2.089,721,2.226,722,1.788,723,1.788,724,1.788,725,1.788,726,2.545,727,2.545,728,1.564,729,1.788,730,2.545,731,2.545,732,2.089,733,3.411,734,2.963,735,2.963,736,1.788,737,1.788,738,2.089,739,2.089,740,2.089,741,2.984,742,2.089,743,2.089,744,1.788,745,2.089,746,1.788,747,1.788,748,1.788,749,2.089,750,2.545,751,1.788,752,2.089,753,1.564,754,1.788,755,1.788,756,2.089,757,3.621,758,2.544,759,1.788,760,2.544,761,1.788,762,2.544,763,1.564,764,2.544,765,3.621,766,2.544,767,3.621]],["title/classes/PhoenixLoader.html",[171,0.142,340,1.43]],["body/classes/PhoenixLoader.html",[12,0.042,16,0.512,17,0.167,18,0.167,25,0.741,105,1.161,138,1.272,157,1.671,170,0.229,171,0.08,172,0.011,173,0.018,174,0.011,178,0.571,181,1.489,184,0.923,185,2.178,186,0.706,187,0.474,191,0.823,195,0.923,196,0.789,197,0.907,198,0.72,200,0.803,203,0.968,205,2.147,206,0.859,213,1.193,215,0.379,218,1.753,219,2.112,222,1.062,224,0.899,225,0.263,230,1.14,231,2.756,233,2.05,235,1.447,238,2.05,246,1.146,248,1.306,254,1.766,268,1.677,313,1.238,314,1.753,315,0.928,316,1.768,324,1.424,325,1.424,329,1.447,338,1.099,340,1.271,345,1.753,348,1.608,353,1.553,354,1.51,370,0.899,371,1.608,372,1.608,373,2.01,374,2.01,375,1.608,376,1.608,377,2.531,378,2.259,379,2.473,380,2.259,381,1.794,382,1.303,383,1.356,384,2.01,385,1.424,386,1.609,387,1.608,388,1.424,389,1.794,390,1.608,391,1.608,392,1.609,393,2.026,394,2.01,395,1.677,396,1.796,397,1.14,398,1.608,399,1.14,400,1.424,401,1.608,402,1.608,403,1.14,404,1.14,405,0.923,406,1.424,408,1.415,409,2.743,410,2.771,411,1.015,414,1.356,415,2.88,418,2.137,420,1.015,423,1.14,424,1.424,425,1.768,426,2.079,427,1.608,431,2.828,432,1.424,433,2.079,434,1.161,435,1.161,436,1.015,443,1.447,446,1.867,454,0.899,456,1.14,458,1.161,464,1.015,506,2.27,513,1.838,564,1.577,569,1.608,581,1.424,647,1.161,671,0.803,674,3.015,698,2.282,699,3.365,700,1.838,701,1.838,702,1.838,703,1.838,708,2.27,709,1.14,710,1.794,717,1.161,718,3.365,719,3.008,721,2.27,722,2.828,723,1.838,724,1.838,725,1.838,726,2.595,727,2.595,728,1.608,729,1.838,730,2.595,731,3.718,733,3.365,734,3.151,735,3.151,736,1.838,737,1.838,741,3.015,744,1.838,746,1.838,747,1.838,748,1.838,750,2.595,751,1.838,753,1.608,754,1.838,755,1.838,759,2.282,761,2.282,763,1.015,768,4.293,769,1.651,770,1.651,771,1.651,772,1.651,773,1.651,774,1.651,775,1.651,776,1.651,777,1.651,778,1.651,779,1.651,780,1.651,781,1.651,782,1.356,783,1.356,784,3.246,785,1.651,786,1.651,787,2.615,788,1.651,789,2.615,790,1.651,791,1.651,792,2.615,793,1.651,794,1.651,795,1.651,796,1.651,797,3.246,798,3.246,799,2.615,800,1.651,801,1.651,802,1.651,803,2.282,804,1.651,805,1.161,806,1.651,807,2.282,808,1.651,809,1.651,810,1.651,811,1.651,812,1.651,813,2.615,814,3.692,815,2.615,816,2.615,817,2.147,818,2.615,819,1.651,820,1.651,821,1.651,822,1.651,823,1.651,824,1.651,825,1.651,826,1.651,827,1.651,828,1.651,829,1.651,830,2.615,831,1.356,832,1.651,833,1.651,834,3.692,835,1.651,836,2.615,837,1.651,838,1.651,839,1.651,840,1.356,841,1.651,842,1.651,843,1.651,844,1.651,845,1.651,846,1.651,847,1.651,848,1.651,849,1.651,850,2.615,851,1.651,852,1.651,853,2.615,854,1.651,855,2.615,856,1.651,857,1.651,858,1.651,859,2.147,860,1.651,861,1.356,862,1.651,863,1.651,864,1.651,865,1.651,866,2.615,867,1.651,868,2.615,869,1.651,870,1.651,871,1.651,872,2.147,873,1.651,874,1.356,875,1.651,876,1.651,877,1.161,878,1.651,879,1.651,880,1.651,881,1.651,882,1.651,883,1.651,884,1.356,885,1.356,886,1.356,887,3.246,888,2.615,889,1.651,890,1.651,891,3.246,892,2.615,893,1.651,894,1.356,895,1.651,896,1.356,897,1.651,898,1.651,899,1.651,900,1.651,901,2.615,902,1.651,903,1.651,904,1.651,905,1.651,906,1.651,907,1.651,908,1.651,909,1.651,910,1.651,911,1.651,912,1.651]],["title/classes/PhoenixObjects.html",[171,0.142,224,1.602]],["body/classes/PhoenixObjects.html",[12,0.042,15,1.355,16,0.345,17,0.251,18,0.251,25,0.664,157,1.718,161,2.707,170,0.345,171,0.12,172,0.017,173,0.024,174,0.017,178,0.574,181,1.415,182,1.355,186,0.631,187,0.646,191,0.725,195,1.054,196,0.631,197,0.824,203,0.935,206,0.664,213,1.235,215,0.572,217,1.75,218,1.554,219,1.397,220,2.561,221,1.941,222,0.646,224,1.941,225,0.397,226,4.526,230,2.247,233,2.021,235,2.067,239,2.506,246,1.47,248,1.069,254,2.023,264,1.47,265,1.554,267,2.561,268,1.782,286,2.192,287,1.75,288,2.044,289,1.355,290,2.044,291,2.044,345,1.085,456,1.554,577,3.707,608,1.531,647,1.75,682,2.044,763,3.17,805,2.506,807,1.75,817,2.926,859,3.419,861,4.232,872,2.926,874,4.329,913,3.95,914,3.565,915,3.565,916,3.565,917,3.565,918,3.565,919,2.489,920,3.565,921,2.489,922,4.812,923,2.489,924,2.489,925,4.547,926,3.565,927,3.565,928,2.489,929,5.368,930,2.489,931,2.489,932,2.489,933,3.565,934,3.565,935,2.489,936,2.489,937,3.565,938,3.565,939,3.565,940,3.565,941,3.565,942,3.565,943,3.565,944,3.565,945,5.368,946,3.565,947,2.489,948,2.489,949,2.044,950,2.044,951,2.489,952,2.489,953,2.489,954,3.565,955,2.489,956,3.565,957,3.565,958,3.565,959,2.489,960,4.164,961,2.489,962,4.164,963,2.489,964,4.812,965,4.164,966,4.164,967,3.565,968,2.044,969,2.489,970,4.164,971,2.489,972,3.565,973,3.565,974,2.489,975,3.565,976,3.565,977,2.489,978,2.489,979,2.489,980,2.489,981,2.489,982,2.489,983,2.489,984,2.489,985,2.489,986,2.489,987,3.565,988,2.489,989,2.489,990,2.489,991,2.489,992,2.489,993,2.489,994,1.75,995,3.565,996,2.489,997,2.489,998,2.489,999,2.489,1000,3.565,1001,4.164,1002,2.489,1003,2.489,1004,2.489,1005,2.489,1006,2.489,1007,2.489,1008,2.489,1009,2.489,1010,2.489,1011,2.489,1012,3.565,1013,2.489,1014,2.489,1015,2.489,1016,2.489,1017,2.489,1018,4.812,1019,2.489,1020,4.547,1021,2.489,1022,2.489,1023,2.489,1024,2.489,1025,2.489,1026,2.489,1027,2.489,1028,3.565,1029,2.489,1030,2.489,1031,2.489,1032,2.489,1033,3.565,1034,3.565,1035,3.565,1036,3.565,1037,4.164,1038,3.565,1039,4.164,1040,2.489,1041,2.489,1042,2.489,1043,2.489,1044,2.489,1045,2.489,1046,2.489,1047,2.489,1048,2.489]],["title/classes/PresetView.html",[171,0.142,326,1.809]],["body/classes/PresetView.html",[12,0.042,16,0.501,17,0.364,18,0.364,128,3.714,170,0.501,171,0.174,172,0.025,173,0.031,174,0.025,178,0.547,186,0.816,187,0.831,191,0.891,195,0.655,196,0.759,197,0.655,203,0.831,206,0.803,213,0.927,215,0.829,225,0.575,248,1.489,311,4.205,312,2.538,315,1.311,321,1.147,326,2.818,330,3.362,336,2.19,338,0.927,353,1.691,354,1.93,356,3.222,562,3.724,564,1.754,1049,4.66,1050,2.964,1051,2.964,1052,3.61,1053,4.587,1054,2.964,1055,5.745,1056,5.999,1057,5.036,1058,5.298,1059,4.583,1060,4.583,1061,5.298,1062,5.298,1063,3.61,1064,3.61,1065,3.61,1066,3.61,1067,3.61,1068,3.61,1069,5.036,1070,3.61,1071,2.964]],["title/classes/RendererManager.html",[171,0.142,1072,2.068]],["body/classes/RendererManager.html",[12,0.042,16,0.283,17,0.205,18,0.205,25,0.49,128,1.891,157,1.424,170,0.283,171,0.098,172,0.014,173,0.021,174,0.014,178,0.63,181,0.79,186,0.721,187,0.558,191,0.906,195,0.957,196,0.758,197,0.942,198,2.221,203,1.031,206,0.862,213,1.196,215,0.468,221,1.675,222,0.903,225,0.591,246,1.086,248,1.444,254,1.086,264,1.086,289,1.675,315,0.88,321,1.178,329,1.826,332,2.912,336,2.096,337,2.248,338,1.355,354,0.719,379,0.99,392,1.615,416,1.432,418,2.488,433,2.006,439,1.109,440,2.975,441,2.538,442,1.891,443,1.205,446,1.985,454,2.776,467,2.278,471,1.672,490,2.525,506,2.865,549,2.525,551,3.389,554,1.672,555,1.672,585,1.432,586,2.525,608,2.278,661,2.018,671,1.495,709,2.17,710,1.801,803,2.162,1072,2.162,1073,4.687,1074,4.242,1075,3.705,1076,3.705,1077,4.431,1078,5.775,1079,3.076,1080,3.076,1081,4.128,1082,4.128,1083,4.128,1084,4.128,1085,3.076,1086,2.902,1087,3.076,1088,3.076,1089,3.076,1090,3.076,1091,4.128,1092,3.076,1093,3.076,1094,5.277,1095,4.741,1096,4.265,1097,4.934,1098,2.037,1099,3.076,1100,3.076,1101,4.184,1102,3.076,1103,3.076,1104,2.037,1105,4.485,1106,3.076,1107,2.037,1108,3.389,1109,3.076,1110,3.076,1111,2.037,1112,2.037,1113,4.128,1114,2.037,1115,3.076,1116,2.037,1117,2.525,1118,3.076,1119,3.076,1120,2.525,1121,3.501,1122,2.037,1123,3.076,1124,3.076,1125,2.037,1126,3.389,1127,3.389,1128,3.389,1129,3.076,1130,2.037,1131,3.076,1132,3.042,1133,2.037,1134,3.042,1135,3.076,1136,2.037,1137,3.076,1138,3.076,1139,2.037,1140,3.076,1141,4.66,1142,2.037,1143,3.076,1144,3.076,1145,4.128,1146,4.128,1147,4.128,1148,3.076,1149,2.037,1150,2.037,1151,2.037,1152,2.037,1153,3.076,1154,3.705,1155,2.037,1156,2.037,1157,2.037,1158,2.037,1159,2.037,1160,2.037,1161,1.672,1162,1.672,1163,2.037,1164,2.037,1165,1.672,1166,2.037,1167,2.037,1168,2.037,1169,2.037,1170,2.037,1171,3.076,1172,2.037,1173,2.037,1174,2.037,1175,2.037,1176,3.076,1177,4.128,1178,2.037,1179,2.037,1180,2.037,1181,2.037,1182,3.076,1183,2.037,1184,3.076]],["title/classes/SelectionManager.html",[171,0.142,1185,2.068]],["body/classes/SelectionManager.html",[12,0.042,16,0.241,17,0.175,18,0.175,25,0.728,105,3.621,138,1.486,157,1.352,170,0.241,171,0.084,172,0.012,173,0.018,174,0.012,178,0.564,180,3.672,181,1.482,182,1.479,186,0.675,187,0.493,191,0.898,195,0.828,196,0.765,197,0.828,198,1.46,203,0.934,206,0.843,213,0.973,215,0.398,219,1.614,222,1.037,225,0.276,230,0.755,233,1.486,235,1.712,238,1.065,246,0.612,248,1.406,254,1.755,264,0.959,265,1.184,267,1.066,268,1.065,289,2.378,313,1.004,315,1.084,321,1.309,323,1.909,324,0.944,329,2.198,330,3.493,332,2.242,336,1.712,337,2.879,338,1.214,353,1.39,354,0.612,381,2.297,382,1.542,386,0.755,392,1.46,395,1.486,396,0.959,399,1.184,404,1.652,405,1.542,408,1.904,411,2.06,430,2.665,436,1.066,439,0.944,440,3.116,441,2.331,442,1.67,443,1.065,446,2.1,454,3.229,463,3.496,466,1.423,485,1.066,564,1.843,573,2.665,580,1.423,585,1.218,608,1.066,629,2.895,637,1.423,638,1.423,661,1.824,671,0.842,677,1.423,678,2.75,709,1.184,710,1.32,877,3.672,894,1.423,994,1.218,1074,3.672,1086,3.071,1097,3.749,1108,2.23,1117,2.23,1120,2.23,1121,3.323,1127,3.881,1128,3.113,1161,1.423,1162,2.23,1185,1.909,1186,4.645,1187,3.35,1188,4.118,1189,3.35,1190,3.35,1191,3.35,1192,3.35,1193,4.368,1194,4.368,1195,3.586,1196,3.792,1197,3.792,1198,3.113,1199,2.716,1200,2.716,1201,2.716,1202,2.716,1203,2.716,1204,2.716,1205,2.716,1206,4.118,1207,1.733,1208,1.733,1209,3.35,1210,1.733,1211,2.716,1212,3.881,1213,4.727,1214,1.733,1215,2.716,1216,2.716,1217,4.727,1218,2.716,1219,1.733,1220,3.113,1221,5.223,1222,4.368,1223,1.733,1224,4.082,1225,1.733,1226,3.792,1227,4.368,1228,3.881,1229,1.733,1230,1.733,1231,3.35,1232,1.733,1233,2.23,1234,3.881,1235,1.733,1236,1.733,1237,2.23,1238,3.792,1239,1.733,1240,2.23,1241,2.23,1242,2.716,1243,2.716,1244,2.716,1245,1.733,1246,2.716,1247,1.733,1248,2.716,1249,3.35,1250,2.716,1251,1.733,1252,2.716,1253,2.716,1254,1.733,1255,2.716,1256,1.733,1257,2.716,1258,3.35,1259,1.733,1260,1.733,1261,1.733,1262,2.716,1263,1.733,1264,1.733,1265,1.733,1266,1.423,1267,1.733,1268,3.35,1269,1.733,1270,1.733,1271,1.733,1272,1.733,1273,2.716,1274,1.733,1275,1.423,1276,1.733,1277,2.716,1278,1.733,1279,1.733,1280,1.733,1281,1.733,1282,1.733,1283,1.733,1284,1.733,1285,1.733,1286,1.733,1287,1.733,1288,1.733,1289,1.733,1290,1.733,1291,1.733,1292,1.733,1293,1.733,1294,1.733,1295,1.733,1296,1.733,1297,3.792,1298,1.733,1299,2.716,1300,1.733,1301,2.716,1302,1.733,1303,1.733,1304,3.35,1305,4.118,1306,1.733,1307,1.733,1308,1.733,1309,1.733,1310,2.716,1311,1.733,1312,1.733,1313,1.733,1314,1.733,1315,1.733,1316,1.733,1317,1.733,1318,3.35,1319,1.733,1320,1.733,1321,1.733,1322,1.733,1323,1.733,1324,1.218,1325,1.733,1326,1.733,1327,1.733,1328,1.733,1329,1.733,1330,1.733,1331,2.716,1332,1.733,1333,2.716,1334,1.733,1335,1.733,1336,1.733,1337,1.733,1338,1.733,1339,1.733,1340,1.733,1341,1.423,1342,1.733,1343,1.733,1344,1.733,1345,1.733]],["title/classes/TrackmlLoader.html",[171,0.142,1346,2.068]],["body/classes/TrackmlLoader.html",[12,0.042,16,0.488,17,0.246,18,0.246,25,0.39,138,0.958,157,0.699,165,3.701,170,0.339,171,0.118,172,0.017,173,0.024,174,0.017,178,0.668,181,1.449,184,1.756,185,1.709,186,0.783,187,0.638,191,0.931,195,1.023,196,0.821,197,1.006,200,1.188,203,1.023,206,0.39,215,0.561,218,1.065,219,2.057,222,1.055,225,0.39,230,2.082,231,2.534,233,2.009,235,0.958,238,1.872,242,2.473,248,1.475,264,0.862,313,1.326,314,1.965,315,1.006,321,1.31,324,1.915,325,1.915,329,1.379,338,1.347,340,2.805,345,1.533,348,1.503,353,1.571,354,0.862,370,1.331,371,2.163,372,2.163,373,2.244,374,2.244,375,2.163,376,1.503,377,2.455,378,2.191,379,2.418,380,2.191,381,1.709,382,1.241,384,1.915,385,1.331,386,1.533,387,1.503,388,1.331,389,1.709,390,1.503,391,1.503,392,1.533,393,1.965,394,1.915,395,1.615,396,1.959,397,1.065,398,1.503,399,1.065,400,1.331,401,1.503,402,1.503,403,1.065,404,1.065,405,0.862,406,1.331,408,1.065,409,2.669,410,2.244,415,2.709,418,2.082,423,1.065,424,1.331,425,1.331,426,1.188,427,1.503,432,1.331,433,2.003,443,1.379,446,2.046,456,1.533,564,1.709,569,3.059,581,1.331,674,2.163,696,2.888,697,2.888,698,2.473,699,3.498,700,2.473,701,2.473,702,2.473,703,2.473,704,2.006,705,4.597,706,2.006,707,2.006,708,2.163,709,1.065,710,1.709,711,2.006,717,1.718,718,3.169,719,2.473,720,2.006,721,2.163,722,1.718,723,1.718,724,1.718,725,1.718,726,2.473,727,2.473,728,1.503,729,1.718,730,2.473,731,2.473,732,2.006,733,3.169,734,2.897,735,2.897,736,1.718,737,1.718,738,2.006,739,2.006,740,2.006,741,2.938,742,2.006,743,2.006,744,1.718,745,2.006,746,1.718,747,1.718,748,1.718,749,2.006,750,2.473,751,1.718,752,2.006,753,1.503,754,1.718,755,1.718,756,2.006,763,3.336,1346,2.473,1347,4.387,1348,4.121,1349,4.121,1350,4.121,1351,3.518,1352,3.518,1353,3.518,1354,3.518,1355,3.518,1356,2.444,1357,5.247,1358,3.518,1359,2.444,1360,2.444,1361,2.444,1362,4.508,1363,2.444,1364,3.518,1365,2.444,1366,4.508,1367,2.444,1368,2.444,1369,2.444,1370,2.444,1371,2.444,1372,2.444,1373,2.444,1374,2.444,1375,2.444,1376,2.444,1377,2.444,1378,2.444,1379,2.444]],["title/interfaces/Window.html",[367,1.602,1380,2.068]],["body/interfaces/Window.html",[8,1.677,12,0.042,13,3.078,15,0.949,16,0.379,17,0.176,18,0.442,25,0.729,30,0.949,32,1.431,128,1.677,138,0.683,154,2.363,157,1.495,158,1.225,161,2.645,170,0.242,171,0.084,172,0.012,173,0.019,174,0.012,178,0.208,180,2.363,181,1.441,182,0.949,184,1.545,185,1.326,186,0.782,187,0.495,196,0.242,198,0.76,203,0.749,206,0.931,213,1.06,218,1.189,219,1.618,222,1.055,225,0.278,233,1.793,238,0.683,246,0.615,248,1.465,264,0.615,286,2.538,287,1.918,309,2.572,311,1.918,312,1.918,313,1.229,314,1.189,315,0.78,321,0.554,325,1.486,329,1.856,330,2.067,332,2.071,336,0.683,337,1.486,338,0.7,353,1.597,354,1.718,367,1.83,368,1.072,373,0.949,374,0.949,377,1.486,378,1.634,379,2.224,380,1.634,381,1.326,382,0.963,384,0.949,385,0.949,386,0.76,388,1.83,389,1.634,392,0.76,393,1.189,394,1.486,395,1.317,396,1.846,397,0.76,400,1.486,403,1.799,404,0.76,405,0.963,406,0.949,408,0.76,409,2.128,410,0.949,411,2.067,412,1.431,413,1.431,415,2.071,416,1.918,417,1.225,418,0.76,419,2.24,420,1.072,421,3.389,423,1.189,424,0.949,425,1.486,426,1.326,430,2.673,431,1.225,432,2.248,434,1.225,435,1.225,436,1.072,443,1.618,446,1.758,454,2.651,456,1.465,457,1.431,458,1.918,459,2.24,460,1.431,461,1.431,463,1.918,464,2.538,467,2.813,470,2.363,485,1.677,497,1.431,498,2.24,500,3.423,504,1.431,513,1.225,539,1.431,541,1.431,542,1.431,543,1.431,552,1.431,553,1.225,557,3.888,558,3.888,560,3.756,561,2.24,562,2.673,563,1.431,565,2.24,566,1.431,568,2.813,571,3.389,573,1.918,574,1.431,575,1.431,576,1.431,577,1.225,581,1.486,629,1.918,642,1.431,661,0.949,666,1.677,671,1.848,687,1.431,688,1.431,709,0.76,710,2.006,714,1.225,721,2.067,753,2.067,759,1.918,761,1.918,782,1.431,783,1.431,803,1.918,831,1.431,840,1.431,877,3.329,885,1.431,886,3.756,1053,1.431,1054,1.431,1074,1.918,1086,1.225,1095,2.76,1096,2.24,1101,2.24,1132,1.431,1134,1.431,1195,1.431,1198,1.431,1212,1.431,1220,2.24,1224,1.431,1228,2.76,1233,1.431,1234,1.431,1237,1.431,1240,2.24,1241,1.431,1275,2.76,1324,1.225,1380,3.217,1381,1.431,1382,4.576,1383,1.743,1384,3.361,1385,1.743,1386,1.743,1387,1.431,1388,2.728,1389,2.728,1390,1.743,1391,2.728,1392,1.431,1393,3.361,1394,3.361,1395,3.361,1396,1.743,1397,3.361,1398,1.431,1399,1.431,1400,1.743,1401,2.728,1402,1.743,1403,1.743,1404,1.431,1405,1.743,1406,1.743,1407,1.743,1408,2.728,1409,2.728,1410,2.728,1411,2.728,1412,1.743,1413,4.128,1414,2.728,1415,1.743,1416,2.728,1417,2.728,1418,2.728,1419,1.743,1420,2.24,1421,3.361,1422,1.743,1423,1.743,1424,1.743,1425,1.431,1426,1.743,1427,1.743,1428,1.743,1429,3.361,1430,1.743,1431,1.743,1432,1.743,1433,1.743,1434,1.743,1435,1.743,1436,1.743,1437,1.743,1438,1.743,1439,2.24,1440,2.728,1441,2.728,1442,2.728,1443,2.728,1444,2.728,1445,1.743,1446,1.743,1447,1.743,1448,1.743,1449,1.743,1450,1.743,1451,2.363,1452,1.743,1453,1.743,1454,3.803,1455,3.361,1456,3.389,1457,1.743,1458,1.743,1459,1.743,1460,1.743,1461,1.743,1462,1.743,1463,2.728,1464,1.743,1465,1.743,1466,2.728,1467,1.743,1468,1.743,1469,1.743,1470,1.743,1471,1.743,1472,1.743,1473,1.743,1474,1.743,1475,1.743,1476,1.743,1477,1.743,1478,1.743,1479,3.361,1480,1.743,1481,1.743,1482,1.743,1483,3.361,1484,1.743,1485,1.743,1486,1.743,1487,1.743,1488,1.743,1489,1.743,1490,1.743,1491,1.743,1492,1.743,1493,1.743,1494,1.743,1495,1.743,1496,1.743,1497,2.728,1498,1.743,1499,2.728,1500,1.743,1501,1.743,1502,1.743,1503,1.743,1504,1.743,1505,1.743,1506,1.743,1507,1.743,1508,1.743,1509,1.743,1510,1.743,1511,1.743,1512,1.743,1513,1.743,1514,1.743,1515,1.743,1516,2.728,1517,1.743,1518,1.743,1519,1.743,1520,1.743,1521,2.728,1522,1.743,1523,2.728,1524,2.728,1525,1.743,1526,1.743,1527,1.743,1528,1.743,1529,1.743,1530,1.743,1531,1.743,1532,1.743,1533,1.743,1534,1.743,1535,1.743,1536,1.743,1537,1.743,1538,1.743,1539,1.743,1540,1.743,1541,1.743,1542,1.743,1543,1.743,1544,1.743,1545,1.743,1546,1.431,1547,1.743,1548,1.743,1549,1.743,1550,1.431,1551,1.743,1552,1.743,1553,2.728]],["title/contributing.html",[1554,1.73,1555,1.73,1556,2.02]],["body/contributing.html",[12,0.035,172,0.029,173,0.035,174,0.029,178,0.606,264,1.505,265,1.858,267,2.621,405,1.505,994,2.997,1051,3.5,1341,3.5,1399,3.5,1439,3.5,1550,3.5,1556,4.451,1557,4.707,1558,3.5,1559,4.263,1560,3.5,1561,5.422,1562,4.263,1563,4.263,1564,4.263,1565,5.077,1566,4.263,1567,4.263,1568,3.5,1569,4.263,1570,3.5,1571,4.263,1572,3.5,1573,5.077,1574,4.263,1575,4.263,1576,4.168,1577,4.263,1578,4.263,1579,4.263,1580,4.168,1581,4.263,1582,4.263,1583,4.263,1584,4.263,1585,3.5,1586,4.263,1587,4.263,1588,4.263,1589,3.5,1590,4.263,1591,3.5,1592,3.5,1593,4.263,1594,4.263,1595,5.422,1596,5.077,1597,4.263,1598,4.263,1599,4.263,1600,3.5,1601,4.263,1602,4.263,1603,4.263,1604,3.5,1605,4.263,1606,4.263,1607,4.263,1608,4.263,1609,4.263,1610,4.263,1611,3.5,1612,4.263,1613,4.263,1614,3.5,1615,3.5,1616,4.263,1617,4.263]],["title/coverage.html",[1618,3.288]],["body/coverage.html",[11,2.128,12,0.042,18,0.394,171,0.292,172,0.027,173,0.033,174,0.027,175,2.402,177,3.208,196,0.542,214,2.747,216,3.208,217,3.386,224,2.128,254,1.379,309,1.899,310,3.208,313,0.898,316,2.128,326,2.402,340,1.899,345,1.703,346,3.208,367,2.623,369,3.208,370,3.104,378,1.899,380,1.899,382,1.379,437,2.747,438,3.208,439,3.104,534,2.747,535,3.208,666,3.351,668,3.208,694,2.747,695,3.208,768,3.208,807,4.298,913,3.208,1049,3.208,1050,3.208,1072,2.747,1073,3.208,1121,2.747,1185,2.747,1186,3.208,1346,2.747,1347,3.208,1380,2.747,1381,3.954,1387,3.208,1618,3.208,1619,2.747,1620,3.907,1621,3.907,1622,3.907,1623,3.907,1624,4.816,1625,3.907,1626,4.816,1627,5.221,1628,3.907,1629,3.907,1630,3.907,1631,3.907,1632,3.907,1633,4.816,1634,3.907,1635,3.907,1636,3.907,1637,3.907,1638,3.907,1639,3.907,1640,3.907,1641,3.907,1642,3.907,1643,3.907,1644,3.907,1645,3.907,1646,3.907,1647,3.907,1648,3.907,1649,3.907,1650,3.907]],["title/dependencies.html",[3,2.174,1651,2.461]],["body/dependencies.html",[3,2.671,12,0.042,27,4.214,28,3.157,30,2.365,51,3.566,172,0.03,173,0.035,174,0.03,246,1.533,1165,3.566,1266,3.566,1451,3.053,1652,4.343,1653,5.945,1654,4.343,1655,5.134,1656,4.343,1657,4.343,1658,4.343,1659,4.343,1660,4.343,1661,4.343,1662,4.343,1663,4.343,1664,4.343,1665,4.343,1666,4.214,1667,4.343,1668,4.343,1669,4.343,1670,4.343,1671,4.343,1672,4.343,1673,4.343,1674,4.343,1675,4.343,1676,4.343,1677,4.343,1678,4.343,1679,4.343,1680,4.343,1681,4.343,1682,4.343,1683,4.343]],["title/index.html",[225,0.392,1554,1.73,1555,1.73]],["body/index.html",[12,0.034,17,0.426,28,3.104,154,2.968,161,2.052,172,0.029,173,0.034,174,0.029,184,1.49,221,2.749,222,0.765,242,2.968,313,1.241,336,1.978,399,1.84,426,2.052,456,1.84,553,2.968,568,2.596,709,1.84,896,3.466,1126,3.466,1324,2.968,1392,3.466,1425,3.466,1451,2.968,1560,3.466,1568,3.466,1589,3.466,1591,3.466,1592,4.144,1615,3.466,1619,2.968,1666,3.466,1684,5.595,1685,4.222,1686,4.222,1687,4.222,1688,3.466,1689,3.466,1690,3.466,1691,4.222,1692,4.222,1693,4.222,1694,4.222,1695,4.222,1696,4.222,1697,4.222,1698,3.466,1699,5.4,1700,5.048,1701,4.144,1702,4.222,1703,3.466,1704,4.222,1705,4.222,1706,4.222,1707,4.222,1708,4.222,1709,4.222,1710,4.222,1711,4.222,1712,4.222,1713,4.222,1714,4.222,1715,4.222,1716,4.222,1717,4.222,1718,4.222,1719,4.222,1720,4.222,1721,4.222,1722,4.222,1723,4.222,1724,3.466,1725,4.222,1726,4.222,1727,4.222,1728,4.222,1729,4.222,1730,4.222,1731,3.466,1732,4.222,1733,4.222,1734,4.222,1735,3.466,1736,4.222,1737,4.222]],["title/license.html",[1554,1.73,1555,1.73,1738,2.02]],["body/license.html",[12,0.026,15,1.164,17,0.545,18,0.51,25,0.341,171,0.103,172,0.022,173,0.022,174,0.015,178,0.255,181,1.218,184,0.754,186,0.529,191,0.341,201,3.714,220,1.314,222,0.388,223,3.472,247,1.503,264,0.754,297,1.755,309,1.039,323,1.503,329,1.25,368,1.314,386,0.932,389,1.039,395,0.838,405,0.754,420,2.6,423,0.932,480,4.24,485,2.6,626,4.316,652,3.714,671,1.55,708,1.314,714,1.503,728,1.314,741,1.961,805,1.503,884,1.755,950,2.618,968,1.755,1105,1.755,1398,1.755,1404,1.755,1420,1.755,1456,1.755,1546,3.472,1557,1.755,1558,1.755,1570,2.618,1572,4.24,1576,3.131,1580,1.755,1585,1.755,1600,1.755,1604,3.131,1611,1.755,1614,3.714,1619,2.681,1688,1.755,1689,1.755,1690,1.755,1698,2.618,1701,3.131,1703,1.755,1724,3.131,1731,4.874,1735,1.755,1738,4.866,1739,4.229,1740,3.814,1741,2.138,1742,2.138,1743,2.138,1744,5.165,1745,5.462,1746,4.229,1747,4.524,1748,2.138,1749,5.558,1750,5.258,1751,2.138,1752,2.138,1753,2.138,1754,5.258,1755,5.462,1756,4.745,1757,5.258,1758,3.189,1759,2.138,1760,4.524,1761,2.138,1762,2.138,1763,2.138,1764,4.229,1765,2.138,1766,5.165,1767,2.138,1768,4.229,1769,3.189,1770,3.189,1771,2.138,1772,3.814,1773,3.189,1774,3.189,1775,2.138,1776,2.138,1777,5.666,1778,3.189,1779,4.745,1780,2.138,1781,3.189,1782,2.138,1783,2.138,1784,2.138,1785,2.138,1786,2.138,1787,2.138,1788,3.814,1789,2.138,1790,3.814,1791,3.189,1792,5.462,1793,2.138,1794,4.745,1795,4.229,1796,3.189,1797,2.138,1798,2.138,1799,2.138,1800,2.138,1801,2.138,1802,2.138,1803,2.138,1804,3.814,1805,3.189,1806,2.138,1807,3.189,1808,2.138,1809,3.189,1810,2.138,1811,5.666,1812,5.695,1813,2.138,1814,2.138,1815,2.138,1816,2.138,1817,2.138,1818,2.138,1819,3.189,1820,3.189,1821,2.138,1822,2.138,1823,2.138,1824,2.138,1825,4.229,1826,2.138,1827,3.189,1828,4.229,1829,3.189,1830,2.138,1831,4.524,1832,3.189,1833,2.138,1834,2.138,1835,3.814,1836,2.138,1837,2.138,1838,2.138,1839,2.138,1840,3.189,1841,2.138,1842,3.814,1843,2.138,1844,2.138,1845,3.814,1846,2.138,1847,2.138,1848,2.138,1849,4.229,1850,5.258,1851,2.138,1852,2.138,1853,3.189,1854,5.053,1855,3.814,1856,3.189,1857,3.189,1858,3.189,1859,3.189,1860,3.189,1861,3.814,1862,3.189,1863,3.814,1864,3.189,1865,3.189,1866,3.189,1867,2.138,1868,3.189,1869,2.138,1870,4.524,1871,4.916,1872,3.814,1873,3.189,1874,2.138,1875,3.189,1876,3.189,1877,2.138,1878,2.138,1879,3.814,1880,3.189,1881,2.138,1882,2.138,1883,2.138,1884,3.814,1885,2.138,1886,2.138,1887,2.138,1888,3.189,1889,3.189,1890,2.138,1891,2.138,1892,2.138,1893,2.138,1894,2.138,1895,2.138,1896,2.138,1897,3.189,1898,2.138,1899,2.138,1900,2.138,1901,2.138,1902,2.138,1903,2.138,1904,2.138,1905,4.524,1906,2.138,1907,3.814,1908,2.138,1909,3.814,1910,2.138,1911,2.138,1912,2.138,1913,2.138,1914,5.053,1915,2.138,1916,2.138,1917,2.138,1918,2.138,1919,4.229,1920,3.189,1921,2.138,1922,2.138,1923,2.138,1924,2.138,1925,2.138,1926,3.814,1927,2.138,1928,3.189,1929,3.189,1930,2.138,1931,2.138,1932,2.138,1933,2.138,1934,3.189,1935,2.138,1936,2.138,1937,2.138,1938,2.138,1939,2.138,1940,2.138,1941,2.138,1942,2.138,1943,2.138,1944,3.814,1945,4.229,1946,2.138,1947,2.138,1948,2.138,1949,2.138,1950,2.138,1951,2.138,1952,2.138,1953,2.138,1954,2.138,1955,2.138,1956,3.189,1957,2.138,1958,2.138,1959,2.138,1960,2.138,1961,4.229,1962,2.138,1963,2.138,1964,2.138,1965,2.138,1966,2.138,1967,2.138,1968,4.229,1969,3.814,1970,3.814,1971,3.814,1972,3.189,1973,3.189,1974,3.814,1975,3.189,1976,3.189,1977,3.189,1978,3.189,1979,2.138,1980,2.138,1981,2.138,1982,2.138,1983,2.138,1984,2.138,1985,3.189,1986,2.138,1987,2.138,1988,2.138,1989,4.524,1990,2.138,1991,2.138,1992,2.138,1993,2.138,1994,2.138,1995,2.138,1996,2.138,1997,2.138,1998,4.524,1999,2.138,2000,2.138,2001,2.138,2002,2.138,2003,2.138,2004,2.138,2005,2.138,2006,2.138,2007,2.138,2008,2.138,2009,2.138,2010,2.138,2011,2.138,2012,2.138,2013,2.138,2014,2.138,2015,2.138,2016,3.814,2017,2.138,2018,2.138,2019,1.755,2020,2.138,2021,3.189,2022,2.138,2023,2.138,2024,2.138,2025,2.138,2026,2.138,2027,2.138,2028,2.138,2029,2.138,2030,2.138,2031,2.138,2032,2.138,2033,2.138,2034,2.138,2035,2.138,2036,2.138,2037,2.138,2038,2.138,2039,2.138,2040,3.189,2041,3.189,2042,2.138,2043,2.138,2044,2.138,2045,2.138,2046,2.138,2047,2.138,2048,2.138,2049,2.138,2050,2.138,2051,2.138,2052,2.138,2053,2.138,2054,2.138,2055,2.138,2056,2.138,2057,2.138,2058,2.138,2059,2.138,2060,2.138]],["title/modules.html",[2,2.816]],["body/modules.html",[1,2.92,2,3.338,12,0.037,28,2.92,172,0.032,173,0.037,174,0.032,1071,3.898,2019,3.898,2061,4.748]],["title/overview.html",[2062,3.288]],["body/overview.html",[0,3.722,1,3.532,3,2.815,4,3.759,5,3.759,6,3.759,7,3.759,8,2.815,9,3.759,10,3.759,11,3.042,12,0.038,13,3.722,14,3.759,15,2.493,172,0.031,173,0.036,174,0.031,175,2.815,215,1.052,264,1.869,265,1.995,268,1.795,275,3.759,368,2.815,667,3.759,949,3.759,2062,3.759]],["title/routes.html",[50,2.816]],["body/routes.html",[12,0.037,50,3.361,172,0.033,173,0.037,174,0.033]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["0",{"_index":268,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["0.003",{"_index":1023,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.1",{"_index":291,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.10.2",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["0.103.2",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["0.114.0",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["0.3",{"_index":985,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":970,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.7",{"_index":304,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.6",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["0x000fff",{"_index":1459,"title":{},"body":{"interfaces/Window.html":{}}}],["0x2194ce",{"_index":984,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0x2fd691",{"_index":657,"title":{},"body":{"classes/ImportManager.html":{}}}],["0x41a6f4",{"_index":602,"title":{},"body":{"classes/ImportManager.html":{}}}],["0xff0000",{"_index":287,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["0xffd166",{"_index":1027,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0xffffff",{"_index":303,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":264,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{},"overview.html":{}}}],["1.0.1",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["1.2.3",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1625,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":682,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/PhoenixObjects.html":{}}}],["100",{"_index":807,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["10000",{"_index":818,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["1100.0",{"_index":1019,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["13/13",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":949,"title":{},"body":{"classes/PhoenixObjects.html":{},"overview.html":{}}}],["17.4.0",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["19/19",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":265,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"contributing.html":{},"overview.html":{}}}],["2.0",{"_index":1740,"title":{},"body":{"license.html":{}}}],["2.6.11",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1624,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":817,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["2004",{"_index":1742,"title":{},"body":{"license.html":{}}}],["21/21",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["24/24",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["29/29",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":267,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"contributing.html":{}}}],["3.0.9",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["3.5.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1025,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["32/32",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["3200.0",{"_index":1021,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33/33",{"_index":1640,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":1623,"title":{},"body":{"coverage.html":{}}}],["38/38",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":399,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["4",{"_index":275,"title":{},"body":{"classes/CMSObjects.html":{},"overview.html":{}}}],["4000.0",{"_index":1034,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["43/43",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":271,"title":{},"body":{"classes/CMSObjects.html":{}}}],["5/5",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":805,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"license.html":{}}}],["500",{"_index":809,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["6",{"_index":272,"title":{},"body":{"classes/CMSObjects.html":{}}}],["6.5.4",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1622,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":274,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7.3.4",{"_index":1702,"title":{},"body":{"index.html":{}}}],["7/7",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1752,"title":{},"body":{"license.html":{}}}],["9.0.5",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["a[0",{"_index":938,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["a[1",{"_index":939,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["a[2",{"_index":940,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ability",{"_index":1539,"title":{},"body":{"interfaces/Window.html":{}}}],["above",{"_index":1949,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":2018,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":2016,"title":{},"body":{"license.html":{}}}],["access",{"_index":1513,"title":{},"body":{"interfaces/Window.html":{}}}],["act",{"_index":2025,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1762,"title":{},"body":{"license.html":{}}}],["activeobject",{"_index":1187,"title":{},"body":{"classes/SelectionManager.html":{}}}],["acts",{"_index":1996,"title":{},"body":{"license.html":{}}}],["actual",{"_index":909,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["add",{"_index":671,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["add(data",{"_index":673,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["addcollection",{"_index":698,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":717,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["added",{"_index":803,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addendum",{"_index":1936,"title":{},"body":{"license.html":{}}}],["adding",{"_index":388,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["additional",{"_index":201,"title":{},"body":{"pipes/AttributePipe.html":{},"license.html":{}}}],["additions",{"_index":1826,"title":{},"body":{"license.html":{}}}],["addobjecttype",{"_index":700,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":729,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addrenderer",{"_index":1079,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1103,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":721,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["advised",{"_index":2014,"title":{},"body":{"license.html":{}}}],["against",{"_index":1889,"title":{},"body":{"license.html":{}}}],["agnostic",{"_index":1692,"title":{},"body":{"index.html":{}}}],["agree",{"_index":2028,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1971,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1953,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":1894,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1419,"title":{},"body":{"interfaces/Window.html":{}}}],["allowed",{"_index":360,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":457,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":1536,"title":{},"body":{"interfaces/Window.html":{}}}],["alone",{"_index":1885,"title":{},"body":{"license.html":{}}}],["along",{"_index":297,"title":{},"body":{"classes/CMSObjects.html":{},"license.html":{}}}],["alongside",{"_index":1935,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":1173,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1566,"title":{},"body":{"contributing.html":{}}}],["ambientlight",{"_index":1260,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1270,"title":{},"body":{"classes/SelectionManager.html":{}}}],["and(b",{"_index":1910,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":1916,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":1921,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":2022,"title":{},"body":{"license.html":{}}}],["angle",{"_index":1062,"title":{},"body":{"classes/PresetView.html":{}}}],["angular",{"_index":1699,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/cdk/overlay",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/common",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{}}}],["angular/compiler",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/checkbox",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/dialog",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/icon",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/slider",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/tooltip",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["animate",{"_index":1413,"title":{},"body":{"interfaces/Window.html":{}}}],["animation",{"_index":1389,"title":{},"body":{"interfaces/Window.html":{}}}],["annotations",{"_index":1817,"title":{},"body":{"license.html":{}}}],["antialias",{"_index":1172,"title":{},"body":{"classes/RendererManager.html":{}}}],["anypresetview",{"_index":318,"title":{},"body":{"classes/Configuration.html":{}}}],["apache",{"_index":1739,"title":{},"body":{"license.html":{}}}],["app",{"_index":1721,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["appear",{"_index":1931,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1809,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1969,"title":{},"body":{"license.html":{}}}],["application",{"_index":1568,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["applied",{"_index":737,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["applies",{"_index":1878,"title":{},"body":{"license.html":{}}}],["apply",{"_index":950,"title":{},"body":{"classes/PhoenixObjects.html":{},"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1616,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":2044,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":1984,"title":{},"body":{"license.html":{}}}],["archives",{"_index":2052,"title":{},"body":{"license.html":{}}}],["args",{"_index":190,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arguments",{"_index":202,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arising",{"_index":2003,"title":{},"body":{"license.html":{}}}],["array",{"_index":886,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["array.isarray(value",{"_index":208,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arrays",{"_index":1320,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":1406,"title":{},"body":{"interfaces/Window.html":{}}}],["asserted",{"_index":2034,"title":{},"body":{"license.html":{}}}],["assets/preset",{"_index":1070,"title":{},"body":{"classes/PresetView.html":{}}}],["associated",{"_index":423,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["assume",{"_index":1986,"title":{},"body":{"license.html":{}}}],["atlas",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["atlascomponent",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["attach",{"_index":2037,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1808,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":193,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Cut.html":{}}}],["attributename",{"_index":1316,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributepipe",{"_index":11,"title":{"pipes/AttributePipe.html":{}},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["attributes",{"_index":182,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1317,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attribution",{"_index":1919,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":1758,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":1804,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1722,"title":{},"body":{"index.html":{}}}],["autorotatecomponent",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1105,"title":{},"body":{"classes/RendererManager.html":{},"license.html":{}}}],["available/created",{"_index":1102,"title":{},"body":{"classes/RendererManager.html":{}}}],["axeshelper",{"_index":1261,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1272,"title":{},"body":{"classes/SelectionManager.html":{}}}],["b",{"_index":1147,"title":{},"body":{"classes/RendererManager.html":{}}}],["b[0",{"_index":942,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["b[1",{"_index":943,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["b[2",{"_index":944,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["back",{"_index":269,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs",{"_index":250,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":257,"title":{},"body":{"classes/CMSObjects.html":{}}}],["based",{"_index":1813,"title":{},"body":{"license.html":{}}}],["basis",{"_index":1973,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":1831,"title":{},"body":{"license.html":{}}}],["behaviorsubject",{"_index":1206,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":589,"title":{},"body":{"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{}}}],["below",{"_index":1810,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1787,"title":{},"body":{"license.html":{}}}],["best",{"_index":1559,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":183,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["bind",{"_index":1824,"title":{},"body":{"license.html":{}}}],["blob",{"_index":469,"title":{},"body":{"classes/ExportManager.html":{}}}],["blob([text",{"_index":524,"title":{},"body":{"classes/ExportManager.html":{}}}],["boilerplate",{"_index":2038,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":332,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["both",{"_index":575,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":278,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box",{"_index":258,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":282,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":283,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":262,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":259,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":299,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":284,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":294,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":293,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":308,"title":{},"body":{"classes/CMSObjects.html":{}}}],["brackets",{"_index":2041,"title":{},"body":{"license.html":{}}}],["break",{"_index":903,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["brief",{"_index":1577,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":2061,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/animations",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1149,"title":{},"body":{"classes/RendererManager.html":{}}}],["bug",{"_index":1573,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":1324,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["buildeventdata",{"_index":371,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":376,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":1438,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":1437,"title":{},"body":{"interfaces/Window.html":{}}}],["call",{"_index":1220,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":557,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventdata",{"_index":642,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":1436,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":646,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":605,"title":{},"body":{"classes/ImportManager.html":{}}}],["callbacks",{"_index":1391,"title":{},"body":{"interfaces/Window.html":{}}}],["called",{"_index":565,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1510,"title":{},"body":{"interfaces/Window.html":{}}}],["caloclusters",{"_index":735,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["camera",{"_index":330,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["camerapos",{"_index":1055,"title":{},"body":{"classes/PresetView.html":{}}}],["cameras",{"_index":1478,"title":{},"body":{"interfaces/Window.html":{}}}],["cancelanimationframe(this.frameid",{"_index":1412,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1101,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1300,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1298,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1303,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1302,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1169,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":387,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["carry",{"_index":1912,"title":{},"body":{"license.html":{}}}],["casting",{"_index":630,"title":{},"body":{"classes/ImportManager.html":{}}}],["cause",{"_index":1774,"title":{},"body":{"license.html":{}}}],["chamber",{"_index":232,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":1392,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["changed",{"_index":1600,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["changes",{"_index":1394,"title":{},"body":{"interfaces/Window.html":{}}}],["changing",{"_index":662,"title":{},"body":{"classes/ImportManager.html":{}}}],["character",{"_index":2002,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1863,"title":{},"body":{"license.html":{}}}],["check",{"_index":1108,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checked",{"_index":1109,"title":{},"body":{"classes/RendererManager.html":{}}}],["child",{"_index":620,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.castshadow",{"_index":632,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material",{"_index":627,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":664,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":663,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":665,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color.set(color",{"_index":634,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.dispose",{"_index":628,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['color",{"_index":656,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material['side",{"_index":658,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":622,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.receiveshadow",{"_index":633,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata",{"_index":624,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata.name",{"_index":655,"title":{},"body":{"classes/ImportManager.html":{}}}],["choose",{"_index":1580,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["claim",{"_index":1891,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1880,"title":{},"body":{"license.html":{}}}],["class",{"_index":171,"title":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":215,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"overview.html":{}}}],["clearing",{"_index":1442,"title":{},"body":{"interfaces/Window.html":{}}}],["cli",{"_index":1700,"title":{},"body":{"index.html":{}}}],["click",{"_index":1222,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1328,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":1541,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":609,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipintersection",{"_index":616,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":551,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["clipping.component",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["clipping/object",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["clippingplanes",{"_index":615,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipplanes",{"_index":536,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipshadows",{"_index":617,"title":{},"body":{"classes/ImportManager.html":{}}}],["closest",{"_index":1342,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":861,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["clustercoll",{"_index":853,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":851,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":854,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":856,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":855,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":859,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1022,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1031,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":747,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"classes/CMSObjects.html":{}}}],["cmscomponent",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["cmsloader",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["cmsobjects",{"_index":214,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["code",{"_index":1604,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["coding",{"_index":1588,"title":{},"body":{"contributing.html":{}}}],["collected",{"_index":907,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":409,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":518,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectionname",{"_index":410,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":415,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections.push(collection",{"_index":800,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionsinfocomponent",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionsinfooverlaycomponent",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionslist",{"_index":834,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":849,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene",{"_index":841,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":846,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":843,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":286,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["colour",{"_index":1516,"title":{},"body":{"interfaces/Window.html":{}}}],["combination",{"_index":1886,"title":{},"body":{"license.html":{}}}],["combined",{"_index":908,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":893,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":902,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["command",{"_index":1715,"title":{},"body":{"index.html":{}}}],["comment",{"_index":2045,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":2011,"title":{},"body":{"license.html":{}}}],["common",{"_index":1767,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1835,"title":{},"body":{"license.html":{}}}],["compiled",{"_index":1800,"title":{},"body":{"license.html":{}}}],["complete",{"_index":1484,"title":{},"body":{"interfaces/Window.html":{}}}],["compliance",{"_index":2055,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1942,"title":{},"body":{"license.html":{}}}],["component",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["components",{"_index":1402,"title":{},"body":{"interfaces/Window.html":{}}}],["components/home/home.component",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["components/nav/nav.component",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["components/ui",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["composer",{"_index":1188,"title":{},"body":{"classes/SelectionManager.html":{}}}],["computer",{"_index":2008,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1745,"title":{},"body":{"license.html":{}}}],["cone",{"_index":982,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["configurable",{"_index":953,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":309,"title":{"classes/Configuration.html":{}},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["consequential",{"_index":2001,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":2024,"title":{},"body":{"license.html":{}}}],["console",{"_index":1421,"title":{},"body":{"interfaces/Window.html":{}}}],["console.log('event",{"_index":1375,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":758,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["conspicuously",{"_index":1846,"title":{},"body":{"license.html":{}}}],["const",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constitutes",{"_index":1895,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":321,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constructor(clipplanes",{"_index":547,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(field",{"_index":352,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1059,"title":{},"body":{"classes/PresetView.html":{}}}],["constructor(public",{"_index":1400,"title":{},"body":{"interfaces/Window.html":{}}}],["construed",{"_index":1937,"title":{},"body":{"license.html":{}}}],["contact",{"_index":1728,"title":{},"body":{"index.html":{}}}],["contained",{"_index":1924,"title":{},"body":{"license.html":{}}}],["containing",{"_index":396,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":1488,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1110,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":433,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1080,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1106,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":1456,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["contents",{"_index":1932,"title":{},"body":{"license.html":{}}}],["context",{"_index":1578,"title":{},"body":{"contributing.html":{}}}],["contract",{"_index":1778,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1727,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":1556,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":1614,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contribution(s",{"_index":1884,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1944,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1850,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1896,"title":{},"body":{"license.html":{}}}],["control",{"_index":1764,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1765,"title":{},"body":{"license.html":{}}}],["controls",{"_index":392,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["controls.component",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["controls/zoom",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["controlsmanager",{"_index":1121,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["controlsmanager.getmaincamera",{"_index":1280,"title":{},"body":{"classes/SelectionManager.html":{}}}],["controlsmanager.getoverlaycamera",{"_index":1157,"title":{},"body":{"classes/RendererManager.html":{}}}],["conversions",{"_index":1801,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1903,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1909,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1755,"title":{},"body":{"license.html":{}}}],["core",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":1892,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1618,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coveralls",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["cphi",{"_index":962,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":356,"title":{},"body":{"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/PresetView.html":{}}}],["creating",{"_index":1439,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["cross",{"_index":1890,"title":{},"body":{"license.html":{}}}],["css",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["ctheta",{"_index":966,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1028,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1044,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1048,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1036,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1038,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1040,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1045,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata.uuid",{"_index":1046,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1047,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":481,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":416,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":463,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["custom",{"_index":651,"title":{},"body":{"classes/ImportManager.html":{}}}],["customary",{"_index":1963,"title":{},"body":{"license.html":{}}}],["customize",{"_index":1405,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":345,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["cut('chi2",{"_index":804,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('dof",{"_index":806,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('energy",{"_index":816,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":815,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('mom",{"_index":808,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":813,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":731,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":838,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["damages",{"_index":1998,"title":{},"body":{"license.html":{}}}],["darkthemecomponent",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["dat.gui",{"_index":1451,"title":{},"body":{"interfaces/Window.html":{},"dependencies.html":{},"index.html":{}}}],["data",{"_index":313,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["data.length",{"_index":1377,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":590,"title":{},"body":{"classes/ImportManager.html":{}}}],["date",{"_index":1900,"title":{},"body":{"license.html":{}}}],["decided",{"_index":1590,"title":{},"body":{"contributing.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1385,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":661,"title":{},"body":{"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["defend",{"_index":2030,"title":{},"body":{"license.html":{}}}],["defined",{"_index":191,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["defining",{"_index":1512,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1769,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1748,"title":{},"body":{"license.html":{}}}],["deliberate",{"_index":1993,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derivative",{"_index":1811,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1814,"title":{},"body":{"license.html":{}}}],["describe",{"_index":1061,"title":{},"body":{"classes/PresetView.html":{}}}],["describing",{"_index":1964,"title":{},"body":{"license.html":{}}}],["description",{"_index":178,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["designated",{"_index":1848,"title":{},"body":{"license.html":{}}}],["desired",{"_index":413,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":553,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["determining",{"_index":1983,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1717,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1591,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["developers",{"_index":1587,"title":{},"body":{"contributing.html":{}}}],["dialog.component",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["dialog/io",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["different",{"_index":389,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["direct",{"_index":1772,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1775,"title":{},"body":{"license.html":{}}}],["directionallight",{"_index":1259,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1271,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directory",{"_index":1716,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1233,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":1128,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1196,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disclaimer",{"_index":1967,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1843,"title":{},"body":{"license.html":{}}}],["display",{"_index":329,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["display's",{"_index":442,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["displayed",{"_index":421,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayurl",{"_index":1520,"title":{},"body":{"interfaces/Window.html":{}}}],["disposing",{"_index":660,"title":{},"body":{"classes/ImportManager.html":{}}}],["dista",{"_index":937,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["distb",{"_index":941,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["distribute",{"_index":1870,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1926,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1747,"title":{},"body":{"license.html":{}}}],["dividing",{"_index":881,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1753,"title":{},"body":{"license.html":{}}}],["document.body",{"_index":1168,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":529,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":526,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.getelementbyid('eventdisplay",{"_index":1167,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementbyid('three",{"_index":1297,"title":{},"body":{"classes/SelectionManager.html":{}}}],["documentation",{"_index":1619,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["don't",{"_index":1735,"title":{},"body":{"index.html":{},"license.html":{}}}],["done",{"_index":1694,"title":{},"body":{"index.html":{}}}],["doubleside",{"_index":244,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["doublesided",{"_index":571,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":484,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":473,"title":{},"body":{"classes/ExportManager.html":{}}}],["dragdropmodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["draw",{"_index":398,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drop",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamic",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":420,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["easier",{"_index":2050,"title":{},"body":{"license.html":{}}}],["easily",{"_index":1051,"title":{},"body":{"classes/PresetView.html":{},"contributing.html":{}}}],["edges",{"_index":298,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":241,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(box",{"_index":300,"title":{},"body":{"classes/CMSObjects.html":{}}}],["editorial",{"_index":1815,"title":{},"body":{"license.html":{}}}],["edward.moyse@cern.ch",{"_index":1737,"title":{},"body":{"index.html":{}}}],["effect",{"_index":1211,"title":{},"body":{"classes/SelectionManager.html":{}}}],["effectcomposer",{"_index":1209,"title":{},"body":{"classes/SelectionManager.html":{}}}],["effectcomposer(renderer",{"_index":1286,"title":{},"body":{"classes/SelectionManager.html":{}}}],["elaborations",{"_index":1818,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1832,"title":{},"body":{"license.html":{}}}],["element",{"_index":1165,"title":{},"body":{"classes/RendererManager.html":{},"dependencies.html":{}}}],["elements",{"_index":1228,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":629,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1127,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["enableeventdisplayconsole",{"_index":1511,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":1509,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1197,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":1543,"title":{},"body":{"interfaces/Window.html":{}}}],["enclosed",{"_index":2040,"title":{},"body":{"license.html":{}}}],["end",{"_index":2036,"title":{},"body":{"license.html":{}}}],["enhancement",{"_index":1583,"title":{},"body":{"contributing.html":{}}}],["entities",{"_index":1763,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1757,"title":{},"body":{"license.html":{}}}],["entries",{"_index":685,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["entry",{"_index":676,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["entrycomponents",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1425,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["etc",{"_index":750,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["even",{"_index":2013,"title":{},"body":{"license.html":{}}}],["event",{"_index":222,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches",{"_index":1330,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.changedtouches[0].pagex",{"_index":1332,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.changedtouches[0].pagey",{"_index":1334,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clientx",{"_index":1335,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1336,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1329,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_id",{"_index":537,"title":{},"body":{"classes/ImportManager.html":{}}}],["eventdata",{"_index":393,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":824,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":514,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.hits",{"_index":821,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.jets",{"_index":812,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":827,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.tracks",{"_index":802,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata['event",{"_index":787,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata['eventnumber",{"_index":788,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata['run",{"_index":789,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata['runnumber",{"_index":790,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":509,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":516,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":519,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":890,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":900,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":316,"title":{"interfaces/EventDataLoader.html":{}},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["eventdataprop",{"_index":895,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":899,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":892,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":888,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":898,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":1382,"title":{},"body":{"interfaces/Window.html":{}}}],["eventdisplayservice",{"_index":1387,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["eventkey",{"_index":1447,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":1429,"title":{},"body":{"interfaces/Window.html":{}}}],["eventname",{"_index":793,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventnum",{"_index":1363,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":759,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["events",{"_index":430,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":432,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventsdata[eventname",{"_index":795,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventselectorcomponent",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["eventslist",{"_index":792,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventslist.push(eventname",{"_index":796,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["everything",{"_index":1712,"title":{},"body":{"index.html":{}}}],["example",{"_index":884,"title":{},"body":{"classes/PhoenixLoader.html":{},"license.html":{}}}],["except",{"_index":1872,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":1845,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1862,"title":{},"body":{"license.html":{}}}],["executed",{"_index":1954,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1988,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1789,"title":{},"body":{"license.html":{}}}],["existing",{"_index":1443,"title":{},"body":{"interfaces/Window.html":{}}}],["experiment",{"_index":424,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["experimentinfocomponent",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["explaining",{"_index":1599,"title":{},"body":{"contributing.html":{}}}],["explicitly",{"_index":1946,"title":{},"body":{"license.html":{}}}],["explore",{"_index":1562,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":462,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":491,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":502,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":492,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":437,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":1471,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":444,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":453,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["exportscenetoobj",{"_index":445,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":465,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":1460,"title":{},"body":{"interfaces/Window.html":{}}}],["express",{"_index":1976,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":755,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extends",{"_index":696,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extra",{"_index":1586,"title":{},"body":{"contributing.html":{}}}],["extras/configuration.model",{"_index":1383,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":780,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["face3",{"_index":237,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":263,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":277,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":266,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":270,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":273,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":279,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":249,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":260,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":253,"title":{},"body":{"classes/CMSObjects.html":{}}}],["factor",{"_index":1479,"title":{},"body":{"interfaces/Window.html":{}}}],["failure",{"_index":2009,"title":{},"body":{"license.html":{}}}],["false",{"_index":608,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["feature",{"_index":1574,"title":{},"body":{"contributing.html":{}}}],["fee",{"_index":2017,"title":{},"body":{"license.html":{}}}],["feel",{"_index":1569,"title":{},"body":{"contributing.html":{}}}],["few",{"_index":936,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":1496,"title":{},"body":{"interfaces/Window.html":{}}}],["field",{"_index":349,"title":{},"body":{"classes/Cut.html":{}}}],["fields",{"_index":2039,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":1782,"title":{},"body":{"license.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["filed",{"_index":1901,"title":{},"body":{"license.html":{}}}],["filename",{"_index":470,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["files",{"_index":1724,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":357,"title":{},"body":{"classes/Cut.html":{}}}],["filter(val",{"_index":1322,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":358,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":348,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":1609,"title":{},"body":{"contributing.html":{}}}],["finding",{"_index":1243,"title":{},"body":{"classes/SelectionManager.html":{}}}],["first",{"_index":885,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["fitness",{"_index":1980,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":1096,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1075,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":1545,"title":{},"body":{"interfaces/Window.html":{}}}],["fixing",{"_index":1608,"title":{},"body":{"contributing.html":{}}}],["fixoverlayview(fixed",{"_index":1547,"title":{},"body":{"interfaces/Window.html":{}}}],["flatten",{"_index":592,"title":{},"body":{"classes/ImportManager.html":{}}}],["float32array(positions.length",{"_index":999,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["folder",{"_index":1440,"title":{},"body":{"interfaces/Window.html":{}}}],["follow",{"_index":1711,"title":{},"body":{"index.html":{}}}],["following",{"_index":1907,"title":{},"body":{"license.html":{}}}],["form",{"_index":1792,"title":{},"body":{"license.html":{}}}],["format",{"_index":184,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["found",{"_index":1593,"title":{},"body":{"contributing.html":{}}}],["frame",{"_index":1388,"title":{},"body":{"interfaces/Window.html":{}}}],["frameid",{"_index":1390,"title":{},"body":{"interfaces/Window.html":{}}}],["free",{"_index":1570,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["front",{"_index":261,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":564,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["functionality",{"_index":397,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":710,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["generate",{"_index":499,"title":{},"body":{"classes/ExportManager.html":{}}}],["generated",{"_index":1698,"title":{},"body":{"index.html":{},"license.html":{}}}],["geom",{"_index":1493,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":403,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":520,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":1540,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":538,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":511,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":522,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":1008,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["geometry.name",{"_index":650,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.scale.set(scale",{"_index":653,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.setattribute('position",{"_index":1006,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["geometry.traverse((child",{"_index":654,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":1535,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrycomponent",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["get(displayurl",{"_index":1522,"title":{},"body":{"interfaces/Window.html":{}}}],["get(gltfurl",{"_index":1527,"title":{},"body":{"interfaces/Window.html":{}}}],["getactiveobjectid",{"_index":1198,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcluster",{"_index":914,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":918,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":372,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":406,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":373,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":697,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":1359,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventdataloader",{"_index":319,"title":{},"body":{"classes/Configuration.html":{}}}],["geteventmetadata",{"_index":374,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":375,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":427,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":915,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":920,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["geticonurl",{"_index":1058,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologgerlist",{"_index":672,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["getjet",{"_index":916,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":923,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmainrenderer",{"_index":1081,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":701,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":744,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":227,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":228,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getobject",{"_index":718,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":845,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":702,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":748,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1082,"title":{},"body":{"classes/RendererManager.html":{}}}],["getrenderers",{"_index":1083,"title":{},"body":{"classes/RendererManager.html":{}}}],["getting",{"_index":1554,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettrack",{"_index":917,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":927,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["github",{"_index":1563,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":1585,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["given",{"_index":233,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["giving",{"_index":1241,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":1386,"title":{},"body":{"interfaces/Window.html":{}}}],["gltf",{"_index":500,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":644,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":640,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":641,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":488,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":597,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfurl",{"_index":1526,"title":{},"body":{"interfaces/Window.html":{}}}],["goodwill",{"_index":2006,"title":{},"body":{"license.html":{}}}],["governing",{"_index":2059,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1855,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1791,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1759,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1858,"title":{},"body":{"license.html":{}}}],["graphic",{"_index":390,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":377,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":1480,"title":{},"body":{"interfaces/Window.html":{}}}],["grossly",{"_index":1994,"title":{},"body":{"license.html":{}}}],["group",{"_index":238,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":883,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guide",{"_index":1592,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["handles",{"_index":726,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["harmless",{"_index":2032,"title":{},"body":{"license.html":{}}}],["help",{"_index":1601,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":1594,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":1857,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1950,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":1240,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1226,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1199,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1237,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["hit",{"_index":1000,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1002,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1003,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1004,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":1379,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":1348,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":763,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["hits.split('\\n",{"_index":1374,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":922,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":997,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hold",{"_index":2031,"title":{},"body":{"license.html":{}}}],["home",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["homecomponent",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["hovered",{"_index":1227,"title":{},"body":{"classes/SelectionManager.html":{}}}],["hovering",{"_index":1216,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":1531,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1132,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["http",{"_index":1397,"title":{},"body":{"interfaces/Window.html":{}}}],["http://localhost:4200",{"_index":1720,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1743,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":2057,"title":{},"body":{"license.html":{}}}],["httpclient",{"_index":1384,"title":{},"body":{"interfaces/Window.html":{}}}],["httpclientmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["https://hepsoftwarefoundation.org/phoenix",{"_index":1705,"title":{},"body":{"index.html":{}}}],["icon",{"_index":1056,"title":{},"body":{"classes/PresetView.html":{}}}],["id",{"_index":552,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["idea",{"_index":1685,"title":{},"body":{"index.html":{}}}],["identification",{"_index":2051,"title":{},"body":{"license.html":{}}}],["identified",{"_index":1612,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":1620,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":725,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["identifying",{"_index":2043,"title":{},"body":{"license.html":{}}}],["ignore",{"_index":638,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["ignored",{"_index":1215,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1189,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ii",{"_index":1780,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1786,"title":{},"body":{"license.html":{}}}],["implements",{"_index":205,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/PhoenixLoader.html":{}}}],["implied",{"_index":1977,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["importmanager",{"_index":534,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["imports",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["improved",{"_index":1575,"title":{},"body":{"contributing.html":{}}}],["improving",{"_index":1844,"title":{},"body":{"license.html":{}}}],["inability",{"_index":2004,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2000,"title":{},"body":{"license.html":{}}}],["include",{"_index":1576,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["included",{"_index":1807,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1922,"title":{},"body":{"license.html":{}}}],["including",{"_index":480,"title":{},"body":{"classes/ExportManager.html":{},"license.html":{}}}],["inclusion",{"_index":1829,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1853,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":2033,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":2029,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":2020,"title":{},"body":{"license.html":{}}}],["index",{"_index":225,"title":{"index.html":{}},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["indicated",{"_index":1806,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":1773,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1788,"title":{},"body":{"license.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["info.component",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["info/collections",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["info/experiment",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["infologger",{"_index":381,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["infologger.add('event",{"_index":791,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["infologger.service",{"_index":436,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["infologgerlist",{"_index":669,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["infologgerservice",{"_index":382,"title":{"injectables/InfoLoggerService.html":{}},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infopanelcomponent",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["infopaneloverlaycomponent",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["information",{"_index":405,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["informational",{"_index":1933,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1883,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1897,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":705,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1200,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(camera",{"_index":1244,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":1407,"title":{},"body":{"interfaces/Window.html":{}}}],["initial",{"_index":1137,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":573,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["initialized",{"_index":1218,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":1401,"title":{},"body":{"interfaces/Window.html":{}}}],["initiate",{"_index":785,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["initoutlinepass",{"_index":1201,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initoutlinepass(camera",{"_index":1246,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initvr(configuration",{"_index":1426,"title":{},"body":{"interfaces/Window.html":{}}}],["injectable",{"_index":666,"title":{"injectables/InfoLoggerService.html":{}},"body":{"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["injectables",{"_index":667,"title":{},"body":{"injectables/InfoLoggerService.html":{},"overview.html":{}}}],["input",{"_index":498,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["inside",{"_index":408,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":1706,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1709,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":621,"title":{},"body":{"classes/ImportManager.html":{}}}],["instantiate",{"_index":490,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["instiantiate",{"_index":1355,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["institute",{"_index":1887,"title":{},"body":{"license.html":{}}}],["intentionally",{"_index":1827,"title":{},"body":{"license.html":{}}}],["interface",{"_index":367,"title":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":368,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"license.html":{},"overview.html":{}}}],["intersected",{"_index":1250,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1305,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1310,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1318,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1202,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1248,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1249,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1340,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1343,"title":{},"body":{"classes/SelectionManager.html":{}}}],["iooptionscomponent",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["iooptionsdialogcomponent",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["irrevocable",{"_index":1865,"title":{},"body":{"license.html":{}}}],["isarray",{"_index":930,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isarray(hitsparams",{"_index":996,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isfixedoverlay",{"_index":1084,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1190,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1557,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["issues",{"_index":1606,"title":{},"body":{"contributing.html":{}}}],["item.component",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["item/tree",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["iterating",{"_index":891,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["j",{"_index":767,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["january",{"_index":1741,"title":{},"body":{"license.html":{}}}],["jet",{"_index":925,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":926,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":734,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["jivexmlloader",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["joining",{"_index":905,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":1666,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["json",{"_index":568,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["json.parse(input",{"_index":1466,"title":{},"body":{"interfaces/Window.html":{}}}],["json.stringify(geometry",{"_index":636,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":505,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsonresult",{"_index":503,"title":{},"body":{"classes/ExportManager.html":{}}}],["jszip",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["keep",{"_index":1042,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":411,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keys",{"_index":431,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kind",{"_index":1975,"title":{},"body":{"license.html":{}}}],["know",{"_index":1733,"title":{},"body":{"index.html":{}}}],["label",{"_index":674,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["labels",{"_index":1581,"title":{},"body":{"contributing.html":{}}}],["language",{"_index":2058,"title":{},"body":{"license.html":{}}}],["later",{"_index":459,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["law",{"_index":1970,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1893,"title":{},"body":{"license.html":{}}}],["left",{"_index":280,"title":{},"body":{"classes/CMSObjects.html":{}}}],["legal",{"_index":1760,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":945,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lhcb",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"classes/LHCbLoader.html":{}}}],["lhcbcomponent",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["lhcbloader",{"_index":694,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["liability",{"_index":1989,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1997,"title":{},"body":{"license.html":{}}}],["library",{"_index":391,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["licensable",{"_index":1881,"title":{},"body":{"license.html":{}}}],["license",{"_index":1738,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":1939,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":2054,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":1898,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1754,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":1978,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":2060,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1795,"title":{},"body":{"license.html":{}}}],["line",{"_index":242,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["linebasicmaterial",{"_index":243,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["lineboxobject",{"_index":301,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":296,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":245,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["linesegments(boxedges",{"_index":302,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":247,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"license.html":{}}}],["link.click",{"_index":533,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":532,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":530,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":527,"title":{},"body":{"classes/ExportManager.html":{}}}],["list",{"_index":418,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listentodisplayedeventchange(callback",{"_index":1504,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":1506,"title":{},"body":{"interfaces/Window.html":{}}}],["lists",{"_index":1839,"title":{},"body":{"license.html":{}}}],["literal",{"_index":1231,"title":{},"body":{"classes/SelectionManager.html":{}}}],["litigation",{"_index":1888,"title":{},"body":{"license.html":{}}}],["load",{"_index":458,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["loaded",{"_index":464,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":314,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loader.load(json",{"_index":648,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.load(sceneurl",{"_index":643,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(json",{"_index":649,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":639,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.ts",{"_index":370,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["loader.ts:10",{"_index":1356,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:106",{"_index":779,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":1354,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:15",{"_index":770,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:156",{"_index":772,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:17",{"_index":383,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:181",{"_index":771,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:19",{"_index":769,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:202",{"_index":778,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:219",{"_index":777,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":716,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:24",{"_index":428,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:258",{"_index":775,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":1365,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:30",{"_index":414,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":712,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:37",{"_index":407,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:43",{"_index":422,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:44",{"_index":1368,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:48",{"_index":776,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:62",{"_index":713,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:64",{"_index":774,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:65",{"_index":1370,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:8",{"_index":704,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":1360,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:85",{"_index":773,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loaders/phoenix",{"_index":341,"title":{},"body":{"classes/Configuration.html":{}}}],["loadevent(eventkey",{"_index":1448,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":539,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":556,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadgltfgeometry(url",{"_index":1475,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":325,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loadjsongeometry",{"_index":540,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadjsongeometry(json",{"_index":566,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjecttypes",{"_index":703,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":751,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":541,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":570,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadobjgeometry(filename",{"_index":1452,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":560,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration",{"_index":1519,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":1489,"title":{},"body":{"interfaces/Window.html":{}}}],["local",{"_index":1126,"title":{},"body":{"classes/RendererManager.html":{},"index.html":{}}}],["locally",{"_index":1710,"title":{},"body":{"index.html":{}}}],["log",{"_index":678,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/SelectionManager.html":{}}}],["logger",{"_index":677,"title":{},"body":{"injectables/InfoLoggerService.html":{},"classes/SelectionManager.html":{}}}],["logging",{"_index":404,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["logs",{"_index":681,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["look",{"_index":1550,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["lookatobject(uuid",{"_index":1551,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1414,"title":{},"body":{"interfaces/Window.html":{}}}],["loss",{"_index":2005,"title":{},"body":{"license.html":{}}}],["losses",{"_index":2012,"title":{},"body":{"license.html":{}}}],["ls",{"_index":887,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1805,"title":{},"body":{"license.html":{}}}],["mailing",{"_index":1838,"title":{},"body":{"license.html":{}}}],["main",{"_index":1094,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1076,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainviewtogglecomponent",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":220,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"license.html":{}}}],["making",{"_index":1398,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["malfunction",{"_index":2010,"title":{},"body":{"license.html":{}}}],["managed",{"_index":1841,"title":{},"body":{"license.html":{}}}],["management",{"_index":1776,"title":{},"body":{"license.html":{}}}],["manager",{"_index":440,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts",{"_index":439,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager.ts:100",{"_index":1139,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":1256,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:108",{"_index":471,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:11",{"_index":554,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:116",{"_index":1111,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:118",{"_index":1247,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:124",{"_index":1112,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:13",{"_index":555,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:132",{"_index":1235,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:135",{"_index":1104,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:142",{"_index":580,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:145",{"_index":1116,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:15",{"_index":549,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:154",{"_index":1223,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:157",{"_index":1142,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:160",{"_index":559,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:165",{"_index":1219,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:169",{"_index":1107,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:178",{"_index":567,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:182",{"_index":1125,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:192",{"_index":1114,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":466,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:200",{"_index":585,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":1208,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:228",{"_index":1239,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:24",{"_index":1230,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":1232,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:28",{"_index":1207,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:30",{"_index":1214,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:31",{"_index":1122,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:33",{"_index":455,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:34",{"_index":1210,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:36",{"_index":1225,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:37",{"_index":572,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:38",{"_index":1229,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:40",{"_index":1205,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:51",{"_index":1136,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:54",{"_index":479,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:60",{"_index":583,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:61",{"_index":1245,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:65",{"_index":475,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:74",{"_index":1251,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:77",{"_index":1130,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:8",{"_index":452,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:80",{"_index":588,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:84",{"_index":477,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:85",{"_index":1133,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:86",{"_index":1254,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:9",{"_index":1098,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:94",{"_index":1236,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:99",{"_index":483,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["managing",{"_index":441,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manipulate",{"_index":402,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1726,"title":{},"body":{"index.html":{}}}],["many",{"_index":1376,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["mark",{"_index":1582,"title":{},"body":{"contributing.html":{}}}],["marked",{"_index":1847,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1959,"title":{},"body":{"license.html":{}}}],["matbuttonmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["matcheckboxmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["matdialogmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["material",{"_index":577,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.color.set('#ff0000",{"_index":1011,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material.opacity",{"_index":986,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["material2",{"_index":612,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.side",{"_index":618,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.atan(math.pow(math.e",{"_index":1030,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1033,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":963,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(theta",{"_index":967,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.max(math.min(pos.z",{"_index":1041,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":814,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["math.sin(clusterparams.phi",{"_index":1035,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":961,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(theta",{"_index":965,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maticonmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["matmenumodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["matslidermodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["mattooltipmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["max",{"_index":684,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["maxentries",{"_index":670,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["maximum",{"_index":361,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1018,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxvalue",{"_index":350,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1020,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mean",{"_index":1750,"title":{},"body":{"license.html":{}}}],["meaningful",{"_index":1610,"title":{},"body":{"contributing.html":{}}}],["means",{"_index":1770,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1798,"title":{},"body":{"license.html":{}}}],["media",{"_index":1802,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1904,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1906,"title":{},"body":{"license.html":{}}}],["menu",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{},"index.html":{}}}],["menu.component",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/auto",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/collections",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/dark",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/event",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/experiment",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/info",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/io",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/main",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/menu",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/object",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/overlay",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/overlay/overlay.component",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/tree",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/ui",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/view",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/zoom",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["menus",{"_index":401,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["menutogglecomponent",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["merchantability",{"_index":1979,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1823,"title":{},"body":{"license.html":{}}}],["mesh",{"_index":239,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(box",{"_index":285,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh.name",{"_index":993,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":988,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":989,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":990,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata.uuid",{"_index":991,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":992,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":240,"title":{},"body":{"classes/CMSObjects.html":{}}}],["meshphongmaterial",{"_index":593,"title":{},"body":{"classes/ImportManager.html":{}}}],["meta",{"_index":882,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":185,"title":{},"body":{"pipes/AttributePipe.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":910,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":187,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["minimum",{"_index":359,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":351,"title":{},"body":{"classes/Cut.html":{}}}],["modifications",{"_index":1794,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1911,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1934,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1938,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["moment",{"_index":1695,"title":{},"body":{"index.html":{}}}],["momentum",{"_index":954,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[0",{"_index":956,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[1",{"_index":957,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[2",{"_index":958,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["more",{"_index":1690,"title":{},"body":{"index.html":{},"license.html":{}}}],["mouse",{"_index":1221,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1331,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1333,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":1224,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["much",{"_index":1730,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":429,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["muon",{"_index":231,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":295,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":305,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":306,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":234,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":307,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonparams",{"_index":746,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":852,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":865,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":878,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":830,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":850,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":863,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":876,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":880,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":879,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["n",{"_index":209,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["name",{"_index":186,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["names",{"_index":741,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["naming",{"_index":736,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navcomponent",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["navigate",{"_index":1719,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":1882,"title":{},"body":{"license.html":{}}}],["need",{"_index":1707,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1403,"title":{},"body":{"interfaces/Window.html":{}}}],["negligence",{"_index":1992,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1995,"title":{},"body":{"license.html":{}}}],["new",{"_index":254,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["ng",{"_index":1713,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["node",{"_index":1708,"title":{},"body":{"index.html":{}}}],["non",{"_index":1861,"title":{},"body":{"license.html":{}}}],["none",{"_index":528,"title":{},"body":{"classes/ExportManager.html":{}}}],["normalblending",{"_index":1262,"title":{},"body":{"classes/SelectionManager.html":{}}}],["normally",{"_index":1930,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":1689,"title":{},"body":{"index.html":{},"license.html":{}}}],["notice",{"_index":1572,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["notices",{"_index":1914,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1948,"title":{},"body":{"license.html":{}}}],["nowdisplayingevent",{"_index":1396,"title":{},"body":{"interfaces/Window.html":{}}}],["null",{"_index":506,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{}}}],["number",{"_index":354,"title":{},"body":{"classes/Cut.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":1321,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numpoints",{"_index":934,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["obj",{"_index":467,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["obj.obj",{"_index":494,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":181,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["object.keys(combinedprops).join",{"_index":911,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":904,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(eventsdata",{"_index":794,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":1314,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":1319,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":251,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":848,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":1490,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":797,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.eventdata[objecttype",{"_index":799,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.name",{"_index":521,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":610,"title":{},"body":{"classes/ImportManager.html":{}}}],["object.uuid",{"_index":1345,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.values(combinedprops).join",{"_index":912,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object3d",{"_index":235,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":579,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":623,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse(child",{"_index":619,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":625,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":836,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectclippingcomponent",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["objectcollection",{"_index":722,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection[0][cut.field",{"_index":839,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcolor",{"_index":946,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectgroup",{"_index":719,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":847,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectloader",{"_index":594,"title":{},"body":{"classes/ImportManager.html":{}}}],["objectparams",{"_index":844,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":219,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":217,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:13",{"_index":229,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:139",{"_index":921,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:16",{"_index":928,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:180",{"_index":919,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:92",{"_index":924,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":781,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectselectioncomponent",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["objectselectionoverlaycomponent",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["objectsgroup",{"_index":1238,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.traverse((object",{"_index":1344,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objecttype",{"_index":513,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":517,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":515,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":486,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":595,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":603,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":606,"title":{},"body":{"classes/ImportManager.html":{}}}],["obligations",{"_index":2021,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":2056,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1875,"title":{},"body":{"license.html":{}}}],["once",{"_index":1589,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ondisplayedeventchange",{"_index":1395,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1191,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":386,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["oneventschange",{"_index":1393,"title":{},"body":{"interfaces/Window.html":{}}}],["online",{"_index":1704,"title":{},"body":{"index.html":{}}}],["ontouchmove",{"_index":1192,"title":{},"body":{"classes/SelectionManager.html":{}}}],["opacity",{"_index":290,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["open",{"_index":1571,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":197,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["optionally",{"_index":1579,"title":{},"body":{"contributing.html":{}}}],["options",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["options.component",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["options/io",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["options/view",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["origin",{"_index":1965,"title":{},"body":{"license.html":{}}}],["original",{"_index":1820,"title":{},"body":{"license.html":{}}}],["others",{"_index":1602,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":1779,"title":{},"body":{"license.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"license.html":{},"overview.html":{}}}],["outline",{"_index":1212,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1193,"title":{},"body":{"classes/SelectionManager.html":{}}}],["outlinepass(new",{"_index":1291,"title":{},"body":{"classes/SelectionManager.html":{}}}],["output",{"_index":501,"title":{},"body":{"classes/ExportManager.html":{}}}],["outstanding",{"_index":1784,"title":{},"body":{"license.html":{}}}],["over",{"_index":1217,"title":{},"body":{"classes/SelectionManager.html":{}}}],["overlay",{"_index":1095,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlay.component",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/collections",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/info",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/object",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["overlaycanvas",{"_index":1134,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlaycomponent",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayed",{"_index":1530,"title":{},"body":{"interfaces/Window.html":{}}}],["overlaymodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayrenderer",{"_index":1077,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlayviewcomponent",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayviewwindowcomponent",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["overview",{"_index":2062,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1756,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1781,"title":{},"body":{"license.html":{}}}],["package",{"_index":1651,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":2049,"title":{},"body":{"license.html":{}}}],["panel",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["panel.component",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["panel/info",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["param",{"_index":206,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":256,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":252,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameters",{"_index":195,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["params",{"_index":723,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["parse",{"_index":497,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry",{"_index":542,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry(geometry",{"_index":578,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":1473,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(trackparams.color",{"_index":948,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["parseobjgeometry",{"_index":543,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parseobjgeometry(content",{"_index":1457,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":582,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":1464,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":1431,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":581,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":223,"title":{},"body":{"classes/CMSObjects.html":{},"license.html":{}}}],["part_list",{"_index":764,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particledata",{"_index":1349,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particles",{"_index":1357,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particular",{"_index":1981,"title":{},"body":{"license.html":{}}}],["party",{"_index":1929,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1213,"title":{},"body":{"classes/SelectionManager.html":{}}}],["patent",{"_index":1871,"title":{},"body":{"license.html":{}}}],["path",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["pdata_list",{"_index":765,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["percent",{"_index":1783,"title":{},"body":{"license.html":{}}}],["perform",{"_index":708,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["permission",{"_index":1957,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1790,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":1859,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":1920,"title":{},"body":{"license.html":{}}}],["phnx",{"_index":1463,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":456,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["phoenixloader",{"_index":340,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixloader:106",{"_index":752,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:15",{"_index":707,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:156",{"_index":732,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":711,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:181",{"_index":720,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":706,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:202",{"_index":749,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:219",{"_index":745,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:258",{"_index":742,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:30",{"_index":738,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:48",{"_index":743,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:64",{"_index":740,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:85",{"_index":739,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixobjects",{"_index":224,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":826,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":862,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":823,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":820,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack",{"_index":811,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":875,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":1465,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":1468,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":1467,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":218,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pipe",{"_index":175,"title":{"pipes/AttributePipe.html":{}},"body":{"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["places",{"_index":1925,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1697,"title":{},"body":{"index.html":{}}}],["plane",{"_index":548,"title":{},"body":{"classes/ImportManager.html":{}}}],["planes",{"_index":550,"title":{},"body":{"classes/ImportManager.html":{}}}],["playground",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundcomponent",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundvr",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundvrcomponent",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1597,"title":{},"body":{"contributing.html":{}}}],["pointpos",{"_index":998,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1001,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":933,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1012,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1017,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1014,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata.uuid",{"_index":1015,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1016,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":995,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.x",{"_index":1037,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1039,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position",{"_index":1053,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["positions",{"_index":929,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length",{"_index":935,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["possibility",{"_index":2015,"title":{},"body":{"license.html":{}}}],["possible",{"_index":896,"title":{},"body":{"classes/PhoenixLoader.html":{},"index.html":{}}}],["post",{"_index":1267,"title":{},"body":{"classes/SelectionManager.html":{}}}],["power",{"_index":1771,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1793,"title":{},"body":{"license.html":{}}}],["prepare",{"_index":1867,"title":{},"body":{"license.html":{}}}],["presentable",{"_index":194,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["preset",{"_index":311,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":326,"title":{"classes/PresetView.html":{}},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":317,"title":{},"body":{"classes/Configuration.html":{}}}],["printed",{"_index":2048,"title":{},"body":{"license.html":{}}}],["private",{"_index":446,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["problems",{"_index":1734,"title":{},"body":{"index.html":{}}}],["process",{"_index":230,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":715,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":569,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":1487,"title":{},"body":{"interfaces/Window.html":{}}}],["processgeometry",{"_index":544,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgeometry(geometry",{"_index":584,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":1351,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":1364,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":324,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["processobj",{"_index":545,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":587,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":1352,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":1367,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":1353,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":1369,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["product",{"_index":1960,"title":{},"body":{"license.html":{}}}],["progress",{"_index":1732,"title":{},"body":{"index.html":{}}}],["project",{"_index":1684,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1913,"title":{},"body":{"license.html":{}}}],["prop",{"_index":897,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["properties",{"_index":315,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["props",{"_index":894,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1326,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1325,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":699,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provide",{"_index":1941,"title":{},"body":{"license.html":{}}}],["provided",{"_index":652,"title":{},"body":{"classes/ImportManager.html":{},"license.html":{}}}],["providedin",{"_index":687,"title":{},"body":{"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":1972,"title":{},"body":{"license.html":{}}}],["pt",{"_index":951,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["public",{"_index":248,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["publicly",{"_index":1868,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1595,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":1842,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1768,"title":{},"body":{"license.html":{}}}],["pushing",{"_index":906,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["quaternion",{"_index":978,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":980,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queries",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["question",{"_index":1584,"title":{},"body":{"contributing.html":{}}}],["range",{"_index":1043,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["raycaster",{"_index":1258,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1339,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1338,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1337,"title":{},"body":{"classes/SelectionManager.html":{}}}],["readable",{"_index":1923,"title":{},"body":{"license.html":{}}}],["reality",{"_index":1424,"title":{},"body":{"interfaces/Window.html":{}}}],["reason",{"_index":2035,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1962,"title":{},"body":{"license.html":{}}}],["received",{"_index":1851,"title":{},"body":{"license.html":{}}}],["receives",{"_index":753,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["recipients",{"_index":1908,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":2047,"title":{},"body":{"license.html":{}}}],["reconstruct",{"_index":754,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":727,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":889,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":460,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redistributing",{"_index":1985,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1902,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1605,"title":{},"body":{"contributing.html":{}}}],["regarding",{"_index":1955,"title":{},"body":{"license.html":{}}}],["related",{"_index":443,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reload",{"_index":1723,"title":{},"body":{"index.html":{}}}],["remain",{"_index":1821,"title":{},"body":{"license.html":{}}}],["remove",{"_index":1117,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["removecontrols",{"_index":1085,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1115,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1119,"title":{},"body":{"classes/RendererManager.html":{}}}],["render",{"_index":1086,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["render(scene",{"_index":1120,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["rendered",{"_index":1135,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":1074,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1183,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1145,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1141,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":1072,"title":{"classes/RendererManager.html":{}},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1078,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1099,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":1532,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":1194,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderpass(scene",{"_index":1288,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renders",{"_index":574,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replaced",{"_index":2042,"title":{},"body":{"license.html":{}}}],["repository",{"_index":1565,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":1404,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["representatives",{"_index":1837,"title":{},"body":{"license.html":{}}}],["representing",{"_index":394,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":385,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reproduce",{"_index":1866,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1966,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1746,"title":{},"body":{"license.html":{}}}],["request",{"_index":1596,"title":{},"body":{"contributing.html":{}}}],["requestanimationframe(animate",{"_index":1415,"title":{},"body":{"interfaces/Window.html":{}}}],["requests",{"_index":1399,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["required",{"_index":1961,"title":{},"body":{"license.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["responsetype",{"_index":1523,"title":{},"body":{"interfaces/Window.html":{}}}],["responsibility",{"_index":2027,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":323,"title":{},"body":{"classes/Configuration.html":{},"classes/SelectionManager.html":{},"license.html":{}}}],["result",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["resulting",{"_index":1797,"title":{},"body":{"license.html":{}}}],["results",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["retain",{"_index":1917,"title":{},"body":{"license.html":{}}}],["retrieved",{"_index":412,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":213,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["returns",{"_index":203,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reviewing",{"_index":1603,"title":{},"body":{"contributing.html":{}}}],["revisions",{"_index":1816,"title":{},"body":{"license.html":{}}}],["right",{"_index":281,"title":{},"body":{"classes/CMSObjects.html":{}}}],["rights",{"_index":2023,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1987,"title":{},"body":{"license.html":{}}}],["root",{"_index":688,"title":{},"body":{"injectables/InfoLoggerService.html":{},"interfaces/Window.html":{}}}],["rotate.component",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate/auto",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.forroot(routes",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":50,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"routes.html":{}}}],["royalty",{"_index":1864,"title":{},"body":{"license.html":{}}}],["run",{"_index":426,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["runnumber",{"_index":761,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["rxjs",{"_index":1266,"title":{},"body":{"classes/SelectionManager.html":{},"dependencies.html":{}}}],["same",{"_index":728,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["save",{"_index":447,"title":{},"body":{"classes/ExportManager.html":{}}}],["save(blob",{"_index":468,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":461,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":448,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":474,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":449,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":476,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":1430,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":450,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":478,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring",{"_index":451,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":482,"title":{},"body":{"classes/ExportManager.html":{}}}],["scale",{"_index":558,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scene",{"_index":454,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["scene.background",{"_index":1154,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":508,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":561,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1153,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":495,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":504,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata['event",{"_index":1497,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata['eventnumber",{"_index":1498,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata['run",{"_index":1499,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata['runnumber",{"_index":1500,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":1492,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":1494,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["scenestring",{"_index":635,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":563,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":1542,"title":{},"body":{"interfaces/Window.html":{}}}],["secondary",{"_index":1100,"title":{},"body":{"classes/RendererManager.html":{}}}],["section",{"_index":1874,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1751,"title":{},"body":{"license.html":{}}}],["sections/atlas/atlas.component",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/cms/cms.component",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/geometry/geometry.component",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/lhcb/lhcb.component",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/playground",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/playground/playground.component",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/trackml/trackml.component",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["see",{"_index":1703,"title":{},"body":{"index.html":{},"license.html":{}}}],["selected",{"_index":180,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1195,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1234,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["selection.component",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["selection/object",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["selectionmanager",{"_index":1185,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selector.component",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["selector/event",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["sell",{"_index":1876,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1836,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1822,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1952,"title":{},"body":{"license.html":{}}}],["serve",{"_index":1714,"title":{},"body":{"index.html":{}}}],["server",{"_index":1718,"title":{},"body":{"index.html":{}}}],["service",{"_index":395,"title":{},"body":{"interfaces/EventDataLoader.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["services",{"_index":1252,"title":{},"body":{"classes/SelectionManager.html":{}}}],["services/extras/attribute.pipe",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":336,"title":{},"body":{"classes/Configuration.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["set/get",{"_index":1170,"title":{},"body":{"classes/RendererManager.html":{}}}],["seteventdataloader",{"_index":320,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdataloader(eventdataloader",{"_index":334,"title":{},"body":{"classes/Configuration.html":{}}}],["setfixoverlay",{"_index":1087,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1123,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled",{"_index":1088,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1124,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1089,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1129,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":546,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":591,"title":{},"body":{"classes/ImportManager.html":{}}}],["setoverlayrenderer",{"_index":1090,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1131,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderer",{"_index":1091,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers",{"_index":1092,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1138,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":1529,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1203,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1253,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1204,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1255,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":586,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["setview",{"_index":1057,"title":{},"body":{"classes/PresetView.html":{}}}],["shadows",{"_index":631,"title":{},"body":{"classes/ImportManager.html":{}}}],["shall",{"_index":1749,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1785,"title":{},"body":{"license.html":{}}}],["shininess",{"_index":613,"title":{},"body":{"classes/ImportManager.html":{}}}],["short",{"_index":1598,"title":{},"body":{"contributing.html":{}}}],["show",{"_index":1534,"title":{},"body":{"interfaces/Window.html":{}}}],["showing",{"_index":400,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["shown",{"_index":686,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["side",{"_index":292,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{}}}],["sides",{"_index":576,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":1686,"title":{},"body":{"index.html":{}}}],["size",{"_index":1010,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["smaller",{"_index":1481,"title":{},"body":{"interfaces/Window.html":{}}}],["software",{"_index":1796,"title":{},"body":{"license.html":{}}}],["sole",{"_index":2026,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1982,"title":{},"body":{"license.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["special",{"_index":1999,"title":{},"body":{"license.html":{}}}],["specific",{"_index":714,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["specified",{"_index":1054,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":347,"title":{},"body":{"classes/Cut.html":{}}}],["sphi",{"_index":960,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/app/app.module.ts",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/services/event",{"_index":369,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/app/services/eventdisplay.service.ts",{"_index":1381,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts",{"_index":177,"title":{},"body":{"pipes/AttributePipe.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts:17",{"_index":192,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["src/app/services/extras/configuration.model.ts",{"_index":310,"title":{},"body":{"classes/Configuration.html":{},"coverage.html":{}}}],["src/app/services/extras/configuration.model.ts:10",{"_index":327,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:12",{"_index":322,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:26",{"_index":331,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:35",{"_index":335,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:43",{"_index":333,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/cut.model.ts",{"_index":346,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/app/services/extras/cut.model.ts:10",{"_index":355,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:6",{"_index":362,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:8",{"_index":363,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/preset",{"_index":1049,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/app/services/infologger.service.ts",{"_index":668,"title":{},"body":{"injectables/InfoLoggerService.html":{},"coverage.html":{}}}],["src/app/services/infologger.service.ts:12",{"_index":680,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:14",{"_index":683,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:21",{"_index":675,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/infologger.service.ts:32",{"_index":679,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["src/app/services/loaders/cms",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/jivexml",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/lhcb",{"_index":695,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/objects/cms",{"_index":216,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/app/services/loaders/objects/phoenix",{"_index":913,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/app/services/loaders/phoenix",{"_index":768,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/trackml",{"_index":1347,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/app/services/three.service.ts",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/controls",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/export",{"_index":438,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/app/services/three/import",{"_index":535,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/app/services/three/renderer",{"_index":1073,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/app/services/three/scene",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/selection",{"_index":1186,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/app/services/ui.service.ts",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":1561,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":1555,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":1947,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1873,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1940,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":226,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["stating",{"_index":1915,"title":{},"body":{"license.html":{}}}],["stats",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["stheta",{"_index":964,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":1729,"title":{},"body":{"index.html":{}}}],["stoppage",{"_index":2007,"title":{},"body":{"license.html":{}}}],["store",{"_index":1366,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":417,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["string",{"_index":353,"title":{},"body":{"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":419,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":1361,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["subject",{"_index":1856,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1869,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1943,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1830,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":1828,"title":{},"body":{"license.html":{}}}],["subscribe((input",{"_index":1524,"title":{},"body":{"interfaces/Window.html":{}}}],["subsequently",{"_index":1852,"title":{},"body":{"license.html":{}}}],["such",{"_index":1777,"title":{},"body":{"license.html":{}}}],["super",{"_index":756,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["supersede",{"_index":1951,"title":{},"body":{"license.html":{}}}],["support",{"_index":2019,"title":{},"body":{"license.html":{},"modules.html":{}}}],["surprised",{"_index":1736,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1071,"title":{},"body":{"classes/PresetView.html":{},"modules.html":{}}}],["swap",{"_index":1143,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1146,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1093,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1140,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":328,"title":{},"body":{"classes/Configuration.html":{}}}],["syntax",{"_index":2046,"title":{},"body":{"license.html":{}}}],["systems",{"_index":1840,"title":{},"body":{"license.html":{}}}],["table",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":994,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"contributing.html":{}}}],["takes",{"_index":384,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["technically",{"_index":1693,"title":{},"body":{"index.html":{}}}],["temp",{"_index":1182,"title":{},"body":{"classes/RendererManager.html":{}}}],["temporary",{"_index":472,"title":{},"body":{"classes/ExportManager.html":{}}}],["terminate",{"_index":1899,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1744,"title":{},"body":{"license.html":{}}}],["text",{"_index":485,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["text/plain",{"_index":525,"title":{},"body":{"classes/ExportManager.html":{}}}],["thank",{"_index":1617,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":1613,"title":{},"body":{"contributing.html":{}}}],["theme.component",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["theme/dark",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["theory",{"_index":1990,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1825,"title":{},"body":{"license.html":{}}}],["theta",{"_index":1029,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["third",{"_index":1928,"title":{},"body":{"license.html":{}}}],["this.activeobject",{"_index":1283,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.next(intersectedobject.uuid",{"_index":1313,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":837,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":825,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":822,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":819,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":828,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.tracks",{"_index":810,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1175,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1158,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":1450,"title":{},"body":{"interfaces/Window.html":{}}}],["this.camera",{"_index":1273,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camerapos",{"_index":1068,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clipplanes",{"_index":599,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.composer",{"_index":1277,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.addpass(this.outlinepass",{"_index":1294,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.addpass(this.renderpass",{"_index":1289,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.render",{"_index":1281,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.configuration",{"_index":1408,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().buildeventdata(eventdata",{"_index":1445,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollection(collectionname",{"_index":1502,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollections",{"_index":1503,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventmetadata",{"_index":1508,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventslist(eventsdata",{"_index":1433,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1178,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.data",{"_index":757,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":760,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":766,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":762,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.disableselecting",{"_index":1285,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":1422,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1284,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":600,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":784,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":857,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":858,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":860,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":870,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":871,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":873,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":901,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[objecttype",{"_index":798,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[objecttype][collection",{"_index":801,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdataloader",{"_index":343,"title":{},"body":{"classes/Configuration.html":{}}}],["this.eventsdata",{"_index":1432,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":1449,"title":{},"body":{"interfaces/Window.html":{}}}],["this.field",{"_index":364,"title":{},"body":{"classes/Cut.html":{}}}],["this.fixedoverlay",{"_index":1184,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.frameid",{"_index":1411,"title":{},"body":{"interfaces/Window.html":{}}}],["this.geometries_id",{"_index":601,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getmainrenderer().domelement.classname",{"_index":1164,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().domelement.id",{"_index":1166,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setpixelratio(window.devicepixelratio",{"_index":1163,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setsize",{"_index":1160,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":829,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":835,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1151,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1152,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render",{"_index":1156,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":782,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":833,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":1444,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":1544,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":1472,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":1461,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":1548,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":1549,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":1553,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":1409,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":1476,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":1477,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":1453,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":1552,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":1470,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":1474,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":1458,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.render",{"_index":1418,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(animate",{"_index":1428,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":1533,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":1537,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setvrbutton",{"_index":1427,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.updatecontrols",{"_index":1416,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":1486,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":1371,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.http",{"_index":1521,"title":{},"body":{"interfaces/Window.html":{}}}],["this.icon",{"_index":1069,"title":{},"body":{"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1269,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1307,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1275,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":1462,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add('scene",{"_index":1501,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1327,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":1455,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":693,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.length",{"_index":689,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.pop",{"_index":691,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.infologgerlist.unshift(label",{"_index":692,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.initoutlinepass(camera",{"_index":1276,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.intersectobject(event",{"_index":1306,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1155,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1268,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":1434,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":1515,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjecttypes(eventdata",{"_index":786,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.loadobjgeometry(filename",{"_index":1517,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(input",{"_index":1525,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":1469,"title":{},"body":{"interfaces/Window.html":{}}}],["this.mainrenderer",{"_index":1171,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":690,"title":{},"body":{"injectables/InfoLoggerService.html":{}}}],["this.maxvalue",{"_index":366,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":365,"title":{},"body":{"classes/Cut.html":{}}}],["this.name",{"_index":1067,"title":{},"body":{"classes/PresetView.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":1446,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":1505,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1301,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":1435,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":1507,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ontouchmove",{"_index":1299,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass",{"_index":1290,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.overlaymaterial.blending",{"_index":1293,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1304,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1308,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1296,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.visibleedgecolor.set(0xffff66",{"_index":1295,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1176,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parsegltfgeometry(input",{"_index":1528,"title":{},"body":{"interfaces/Window.html":{}}}],["this.parseobjgeometry(content",{"_index":1518,"title":{},"body":{"interfaces/Window.html":{}}}],["this.particledata",{"_index":1372,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.presetviews",{"_index":342,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews.length",{"_index":344,"title":{},"body":{"classes/Configuration.html":{}}}],["this.processgeometry(geometry",{"_index":645,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj",{"_index":607,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":604,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.renderers",{"_index":1177,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1180,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1179,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1181,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderpass",{"_index":1287,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.renderpass.camera",{"_index":1279,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.renderpass.scene",{"_index":1278,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.save(new",{"_index":523,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":510,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":512,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":496,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(output",{"_index":507,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":493,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":1274,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject",{"_index":1282,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1312,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1315,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1311,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1309,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1159,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":611,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setrenderer",{"_index":1150,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.truthdata",{"_index":1373,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":783,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":840,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":1441,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":1491,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":832,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":1495,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":1454,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.showui(configuration",{"_index":1410,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":1417,"title":{},"body":{"interfaces/Window.html":{}}}],["those",{"_index":1879,"title":{},"body":{"license.html":{}}}],["three",{"_index":246,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1118,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.boxgeometry(30",{"_index":1024,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.bufferattribute(pointpos",{"_index":1007,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.buffergeometry",{"_index":1005,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.cylindergeometry(width",{"_index":981,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.group",{"_index":842,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["three.js",{"_index":709,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.mesh(geometry",{"_index":987,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.meshbasicmaterial",{"_index":983,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.meshphongmaterial",{"_index":1026,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.points(geometry",{"_index":1013,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.pointsmaterial",{"_index":1009,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.quaternion",{"_index":979,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.service",{"_index":434,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["three.vector3(0",{"_index":975,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(0.5",{"_index":969,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(4000.0",{"_index":1032,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three.vector3(x",{"_index":977,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":489,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":487,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":598,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":596,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer.js",{"_index":1264,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1263,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass.js",{"_index":1265,"title":{},"body":{"classes/SelectionManager.html":{}}}],["threeservice",{"_index":378,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["through",{"_index":1420,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["time",{"_index":425,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["title",{"_index":1611,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["todo",{"_index":952,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["toggle.component",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/main",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/menu",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["toggles",{"_index":1538,"title":{},"body":{"interfaces/Window.html":{}}}],["top",{"_index":276,"title":{},"body":{"classes/CMSObjects.html":{}}}],["tort",{"_index":1991,"title":{},"body":{"license.html":{}}}],["track",{"_index":874,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackcoll",{"_index":866,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracker",{"_index":1564,"title":{},"body":{"contributing.html":{}}}],["trackid",{"_index":864,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":867,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":869,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":868,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":1558,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["trackml",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"classes/TrackmlLoader.html":{}}}],["trackmlcomponent",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["trackmlloader",{"_index":1346,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":872,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.color",{"_index":947,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.mom",{"_index":955,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":932,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":733,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["trade",{"_index":1958,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1918,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1956,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1877,"title":{},"body":{"license.html":{}}}],["transform",{"_index":188,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transform(value",{"_index":189,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformation",{"_index":1799,"title":{},"body":{"license.html":{}}}],["transformed",{"_index":199,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformedvalue",{"_index":207,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming",{"_index":179,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming/changing",{"_index":1052,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":968,"title":{},"body":{"classes/PhoenixObjects.html":{},"license.html":{}}}],["transparent",{"_index":288,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traversed",{"_index":1242,"title":{},"body":{"classes/SelectionManager.html":{}}}],["treemenucomponent",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["treemenuitemcomponent",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["tried",{"_index":1567,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":289,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["truth",{"_index":1362,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":1350,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":1358,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["ts",{"_index":637,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["tslib",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["tweenjs/tween.js",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1144,"title":{},"body":{"classes/RendererManager.html":{}}}],["type",{"_index":196,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/CMSObjects.html":{},"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["typefolder",{"_index":831,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["typename",{"_index":730,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":647,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["types",{"_index":1803,"title":{},"body":{"license.html":{}}}],["types/three",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":379,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["ui.service",{"_index":435,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["uimenucomponent",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["uiservice",{"_index":380,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["undefined",{"_index":659,"title":{},"body":{"classes/ImportManager.html":{}}}],["under",{"_index":1766,"title":{},"body":{"license.html":{}}}],["union",{"_index":1761,"title":{},"body":{"license.html":{}}}],["uniquely",{"_index":724,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unless",{"_index":1945,"title":{},"body":{"license.html":{}}}],["up",{"_index":221,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["url",{"_index":562,"title":{},"body":{"classes/ImportManager.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["url.createobjecturl(blob",{"_index":531,"title":{},"body":{"classes/ExportManager.html":{}}}],["use",{"_index":626,"title":{},"body":{"classes/ImportManager.html":{},"license.html":{}}}],["used",{"_index":337,"title":{},"body":{"classes/Configuration.html":{},"injectables/InfoLoggerService.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["user",{"_index":1725,"title":{},"body":{"index.html":{}}}],["uses",{"_index":1696,"title":{},"body":{"index.html":{}}}],["using",{"_index":1688,"title":{},"body":{"index.html":{},"license.html":{}}}],["util",{"_index":931,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["uuid",{"_index":877,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["v",{"_index":211,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["v1",{"_index":974,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":976,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1323,"title":{},"body":{"classes/SelectionManager.html":{}}}],["value",{"_index":198,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Cut.html":{},"injectables/InfoLoggerService.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["value.foreach((v",{"_index":210,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["value.tostring",{"_index":212,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["values",{"_index":1378,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["vector2",{"_index":1257,"title":{},"body":{"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":1292,"title":{},"body":{"classes/SelectionManager.html":{}}}],["vector3",{"_index":236,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":255,"title":{},"body":{"classes/CMSObjects.html":{}}}],["verbal",{"_index":1833,"title":{},"body":{"license.html":{}}}],["version",{"_index":1701,"title":{},"body":{"index.html":{},"license.html":{}}}],["very",{"_index":1615,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["view",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["view.component",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["view.model",{"_index":339,"title":{},"body":{"classes/Configuration.html":{}}}],["view.model.ts",{"_index":1050,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1065,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1060,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1066,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1064,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1063,"title":{},"body":{"classes/PresetView.html":{}}}],["view/overlay",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["viewoptionscomponent",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["views",{"_index":312,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["virtual",{"_index":1423,"title":{},"body":{"interfaces/Window.html":{}}}],["visualise",{"_index":1687,"title":{},"body":{"index.html":{}}}],["void",{"_index":338,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["vr.component",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["vr/playground",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["want",{"_index":1341,"title":{},"body":{"classes/SelectionManager.html":{},"contributing.html":{}}}],["warranties",{"_index":1974,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1968,"title":{},"body":{"license.html":{}}}],["way",{"_index":1560,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["web",{"_index":1691,"title":{},"body":{"index.html":{}}}],["webglrenderer",{"_index":1097,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["webglrenderer(parameters",{"_index":1174,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1148,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1113,"title":{},"body":{"classes/RendererManager.html":{}}}],["wherever",{"_index":1927,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1546,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["whole",{"_index":1819,"title":{},"body":{"license.html":{}}}],["width",{"_index":959,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":1380,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.component",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["window.eventdisplay",{"_index":1514,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1162,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["window.innerwidth",{"_index":1161,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["window/overlay",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["wireframe",{"_index":614,"title":{},"body":{"classes/ImportManager.html":{}}}],["within",{"_index":1854,"title":{},"body":{"license.html":{}}}],["without",{"_index":1905,"title":{},"body":{"license.html":{}}}],["work",{"_index":1731,"title":{},"body":{"index.html":{},"license.html":{}}}],["working",{"_index":1607,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":1812,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1860,"title":{},"body":{"license.html":{}}}],["writing",{"_index":1849,"title":{},"body":{"license.html":{}}}],["written",{"_index":1834,"title":{},"body":{"license.html":{}}}],["x",{"_index":971,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["y",{"_index":972,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["yes",{"_index":200,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ImportManager.html":{},"injectables/InfoLoggerService.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["yyyy",{"_index":2053,"title":{},"body":{"license.html":{}}}],["z",{"_index":973,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["zone.js",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["zoomcontrolscomponent",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["zoomfactor",{"_index":1482,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":1483,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":1485,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AttributePipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            CollectionsInfoOverlayComponent\n                        \n                        \n                            IOOptionsDialogComponent\n                        \n                        \n                            InfoPanelOverlayComponent\n                        \n                        \n                            ObjectSelectionOverlayComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { GeometryComponent } from './sections/geometry/geometry.component';\nimport { AtlasComponent } from './sections/atlas/atlas.component';\nimport { LHCbComponent } from './sections/lhcb/lhcb.component';\nimport { CMSComponent } from './sections/cms/cms.component';\nimport { TrackmlComponent } from './sections/trackml/trackml.component';\nimport { NavComponent } from './components/nav/nav.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PlaygroundComponent } from './sections/playground/playground.component';\nimport { PlaygroundVrComponent } from './sections/playground-vr/playground-vr.component';\nimport { AttributePipe } from './services/extras/attribute.pipe';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { UiMenuComponent } from './components/ui-menu/ui-menu.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { CollectionsInfoComponent } from './components/ui-menu/collections-info/collections-info.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MenuToggleComponent } from './components/ui-menu/menu-toggle/menu-toggle.component';\nimport { CollectionsInfoOverlayComponent } from './components/ui-menu/collections-info/collections-info-overlay/collections-info-overlay.component';\nimport { IoOptionsComponent } from './components/ui-menu/io-options/io-options.component';\nimport { IOOptionsDialogComponent } from './components/ui-menu/io-options/io-options-dialog/io-options-dialog.component';\nimport { OverlayViewComponent } from './components/ui-menu/overlay-view/overlay-view.component';\nimport { ObjectSelectionComponent } from './components/ui-menu/object-selection/object-selection.component';\nimport { ObjectSelectionOverlayComponent } from './components/ui-menu/object-selection/object-selection-overlay/object-selection-overlay.component';\nimport { EventSelectorComponent } from './components/ui-menu/event-selector/event-selector.component';\nimport { ObjectClippingComponent } from './components/ui-menu/object-clipping/object-clipping.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { DarkThemeComponent } from './components/ui-menu/dark-theme/dark-theme.component';\nimport { AutoRotateComponent } from './components/ui-menu/auto-rotate/auto-rotate.component';\nimport { ViewOptionsComponent } from './components/ui-menu/view-options/view-options.component';\nimport { OverlayViewWindowComponent } from './components/ui-menu/overlay-view/overlay-view-window/overlay-view-window.component';\nimport { ExperimentInfoComponent } from './components/ui-menu/experiment-info/experiment-info.component';\nimport { InfoPanelComponent } from './components/ui-menu/info-panel/info-panel.component';\nimport { InfoPanelOverlayComponent } from './components/ui-menu/info-panel/info-panel-overlay/info-panel-overlay.component';\nimport { OverlayComponent } from './components/ui-menu/overlay/overlay.component';\nimport { MainViewToggleComponent } from './components/ui-menu/main-view-toggle/main-view-toggle.component';\nimport { ZoomControlsComponent } from './components/ui-menu/zoom-controls/zoom-controls.component';\nimport { TreeMenuComponent } from './components/ui-menu/tree-menu/tree-menu.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TreeMenuItemComponent } from './components/ui-menu/tree-menu/tree-menu-item/tree-menu-item.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'geometry', component: GeometryComponent },\n  { path: 'atlas', component: AtlasComponent },\n  { path: 'lhcb', component: LHCbComponent },\n  { path: 'cms', component: CMSComponent },\n  { path: 'trackml', component: TrackmlComponent },\n  { path: 'playground', component: PlaygroundComponent },\n  { path: 'playgroundVR', component: PlaygroundVrComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    GeometryComponent,\n    AtlasComponent,\n    LHCbComponent,\n    CMSComponent,\n    TrackmlComponent,\n    NavComponent,\n    PlaygroundComponent,\n    PlaygroundVrComponent,\n    AttributePipe,\n    UiMenuComponent,\n    CollectionsInfoComponent,\n    MenuToggleComponent,\n    CollectionsInfoOverlayComponent,\n    IoOptionsComponent,\n    IOOptionsDialogComponent,\n    OverlayViewComponent,\n    ObjectSelectionComponent,\n    ObjectSelectionOverlayComponent,\n    EventSelectorComponent,\n    ObjectClippingComponent,\n    DarkThemeComponent,\n    AutoRotateComponent,\n    ViewOptionsComponent,\n    OverlayViewWindowComponent,\n    OverlayComponent,\n    ExperimentInfoComponent,\n    InfoPanelComponent,\n    InfoPanelOverlayComponent,\n    MainViewToggleComponent,\n    ZoomControlsComponent,\n    TreeMenuComponent,\n    TreeMenuItemComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    DragDropModule,\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule,\n    MatMenuModule,\n    MatSliderModule,\n    MatCheckboxModule,\n    MatIconModule\n  ],\n  entryComponents: [\n    IOOptionsDialogComponent,\n    CollectionsInfoOverlayComponent,\n    ObjectSelectionOverlayComponent,\n    InfoPanelOverlayComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/AttributePipe.html":{"url":"pipes/AttributePipe.html","title":"pipe - AttributePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  AttributePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/extras/attribute.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Pipe for transforming selected object attributes to a better format.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        attributePipe\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, args?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/attribute.pipe.ts:17\n                \n            \n\n\n            \n                \n                    Transform the attribute to a better presentable format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to be transformed.\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Additional arguments.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed value.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Pipe for transforming selected object attributes to a better format.\n */\n@Pipe({\n  name: 'attributePipe'\n})\nexport class AttributePipe implements PipeTransform {\n\n  /**\n   * Transform the attribute to a better presentable format.\n   * @param value Value to be transformed.\n   * @param args Additional arguments.\n   * @returns The transformed value.\n   */\n  transform(value: any, args?: any): any {\n    let transformedValue = '';\n    if (Array.isArray(value)) {\n      transformedValue += '\\n';\n      value.forEach((v) => transformedValue += v + '\\n');\n    } else {\n      transformedValue = value.toString();\n    }\n    return transformedValue;\n  }\n\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/cms-objects.ts:13\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, Line, LineBasicMaterial, DoubleSide, LineSegments } from \"three\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n    /**\n     * Process the Muon Chamber from the given parameters.\n     * and get it as a geometry.\n     * @param muonChamberParams Parameters of the Muon Chamber.\n     * @returns Muon Chamber object.\n     */\n    public static getMuonChamber(muonChamberParams: any): Object3D {\n        let faces = [];\n        let backs = [];\n\n        for (const param of Object.keys(muonChamberParams)) {\n            if (param.startsWith('front')) {\n                faces.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            } else if (param.startsWith('back')) {\n                backs.push(\n                    new Vector3().fromArray(muonChamberParams[param])\n                );\n            }\n        }\n\n        let box = new Geometry();\n        box.vertices = faces.concat(backs);\n\n        // front                                                                                                                                           \n        box.faces.push(new Face3(0, 1, 2));\n        box.faces.push(new Face3(2, 3, 0));\n\n        // back                                                                                                                                            \n        box.faces.push(new Face3(4, 5, 6));\n        box.faces.push(new Face3(6, 7, 4));\n\n        // top                                                                                                                                             \n        box.faces.push(new Face3(4, 5, 1));\n        box.faces.push(new Face3(1, 0, 4));\n\n        // bottom                                                                                                                                          \n        box.faces.push(new Face3(7, 6, 2));\n        box.faces.push(new Face3(2, 3, 7));\n\n        // left                                                                                                                                            \n        box.faces.push(new Face3(0, 3, 7));\n        box.faces.push(new Face3(7, 4, 0));\n\n        // right                                                                                                                                          \n        box.faces.push(new Face3(1, 5, 6));\n        box.faces.push(new Face3(6, 2, 1));\n\n        box.computeFaceNormals();\n        box.computeVertexNormals();\n\n        const boxObject = new Mesh(box, new MeshBasicMaterial({\n            color: 0xff0000,\n            transparent: true,\n            opacity: 0.1,\n            side: DoubleSide\n        }));\n\n        boxObject.userData = muonChamberParams;\n        boxObject.name = 'MuonChamber';\n\n        // These are the lines along the box edges\n\n        const boxEdges = new EdgesGeometry(box);\n        const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n            color: 0xffffff,\n            transparent: true,\n            opacity: 0.7\n        }));\n\n        const muonChamber = new Group();\n        muonChamber.add(boxObject);\n        muonChamber.add(lineBoxObject);\n\n        muonChamberParams.uuid = boxObject.uuid;\n\n        return muonChamber;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Configuration.html":{"url":"classes/Configuration.html","title":"class - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/configuration.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for preset views and event data loader.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventDataLoader\n                            \n                            \n                                presetViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                anyPresetView\n                            \n                            \n                                    Public\n                                getEventDataLoader\n                            \n                            \n                                    Public\n                                setEventDataLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/configuration.model.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the Configuration.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDataLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDataLoader\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:12\n                            \n                        \n\n                \n                    \n                        Event data loader responsible for processing and loading event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            presetViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PresetView[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:10\n                            \n                        \n\n                \n                    \n                        Preset views for switching event display camera. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            anyPresetView\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    anyPresetView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:26\n                \n            \n\n\n            \n                \n                    Get if there are any preset views.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If there are any preset views.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataLoader()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:43\n                \n            \n\n\n            \n                \n                    Get the event data loader responsible for processing and loading event data.\n\n\n                    \n                    \n                    \n                        Returns :         EventDataLoader\n\n                    \n                    \n                        The event data loader.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEventDataLoader(eventDataLoader: EventDataLoader)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:35\n                \n            \n\n\n            \n                \n                    Set the event data loader to be used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataLoader\n                                    \n                                                EventDataLoader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data loader responsible for\nprocessing and loading event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\n\n/**\n * Configuration for preset views and event data loader.\n */\nexport class Configuration {\n  /** Preset views for switching event display camera. */\n  presetViews: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader: EventDataLoader;\n\n  /**\n   * Constructor for the Configuration.\n   */\n  constructor() {\n    this.presetViews = [];\n    this.eventDataLoader = new PhoenixLoader();\n  }\n\n  /**\n   * Get if there are any preset views.\n   * @returns If there are any preset views.\n   */\n  public anyPresetView(): boolean {\n    return this.presetViews.length > 0;\n  }\n\n  /**\n   * Set the event data loader to be used.\n   * @param eventDataLoader Event data loader responsible for\n   * processing and loading event data.\n   */\n  public setEventDataLoader(eventDataLoader: EventDataLoader) {\n    this.eventDataLoader = eventDataLoader;\n  }\n\n  /**\n   * Get the event data loader responsible for processing and loading event data.\n   * @returns The event data loader.\n   */\n  public getEventDataLoader(): EventDataLoader {\n    return this.eventDataLoader;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                maxValue\n                            \n                            \n                                minValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Name of the event data attribute to be filtered. */\n  field: string;\n  /** Minimum allowed value of the event data attribute. */\n  minValue: number;\n  /** Maximum allowed value of the event data attribute. */\n  maxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   */\n  constructor(field: string, minValue: number, maxValue: number) {\n    this.field = field;\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:37\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:30\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:43\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:24\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeService } from './three.service';\nimport { UIService } from './ui.service';\nimport { InfoLoggerService } from './infologger.service';\n/**\n * Event data loader\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n    /**\n     * Constructor for the export manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * Exports scene to OBJ file format.\n     * @param scene The scene to be exported.\n     */\n    public exportSceneToOBJ(scene: Scene) {\n        // Instantiate a exporter\n        const exporter = new OBJExporter();\n        const result = exporter.parse(scene);\n        this.saveString(result, 'phoenix-obj.obj');\n    }\n\n    /**\n     * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n     * @param scene The scene to be exported.\n     * @param eventData Currently loaded event data.\n     * @param geometries Currently loaded geometries.\n     */\n    public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n        const exporter = new GLTFExporter();\n\n        const sceneConfig = this.saveSceneConfig(eventData, geometries);\n        // Parse the input and generate the glTF output\n        exporter.parse(\n            scene,\n            result => {\n                const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n                const output = JSON.stringify(jsonResult, null, 2);\n                this.saveString(output, 'phoenix-scene.phnx');\n            },\n            null\n        );\n    }\n\n    /**\n     * Save the configuration of the currently loaded scene including event data and geometries.\n     * @param eventData Curently loaded event data.\n     * @param geometries Currently loaded geometries.\n     */\n    private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n        const eventDataConfig = this.saveEventDataConfiguration(eventData);\n        const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n        const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n        return sceneConfig;\n    }\n\n    /**\n     * Save the configuration of the currently loaded event data.\n     * @param eventData Currently loaded event data.\n     */\n    private saveEventDataConfiguration(eventData: any) {\n        const eventDataConfig = {};\n        for (const objectType of eventData.children) {\n            if (objectType.name) {\n                eventDataConfig[objectType.name] = [];\n                for (const collection of objectType.children) {\n                    if (collection.name) {\n                        eventDataConfig[objectType.name].push(collection.name);\n                    }\n                }\n            }\n        }\n        return eventDataConfig;\n    }\n\n    /**\n     * Save the configuration of the currently loaded geometries.\n     * @param geometries Currently loaded geometries.\n     */\n    private saveGeometriesConfiguration(geometries: Object3D) {\n        const geometriesConfig = [];\n        geometries.children.forEach((object) => {\n            if (object.name !== 'EventData') {\n                geometriesConfig.push(object.name);\n            }\n        });\n        return geometriesConfig;\n    }\n\n    /**\n     * Save string in the file and download it.\n     * @param text Text to be stored.\n     * @param filename Name of the file.\n     */\n    private saveString(text: string, filename: string) {\n        this.save(new Blob([text], { type: 'text/plain' }), filename);\n    }\n\n    /**\n     * Create a temporary link and download/save the data (blob) in a file.\n     * @param blob Blob containing exported data.\n     * @param filename Name of the export file.\n     */\n    private save(blob: Blob, filename: string) {\n        const link = document.createElement('a');\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        link.href = URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadJSONGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:160\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadJSONGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSONGeometry(json: string | object, name: string, callback: (Geometry: Object3D) => void, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:178\n                \n            \n\n\n            \n                \n                    Loads geometries from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON or URL to JSON file of the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry or group of geometries.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometries are\nprocessed and loaded.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Group) => void, filename: string, name: string, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:37\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:142\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:60\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGeometry(geometry: Object3D, name: string, scale?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:200\n                \n            \n\n\n            \n                \n                    Process the geometry by setting up material and clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Scale of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:80\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: any, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:99\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Group, Plane, Material, ObjectLoader } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n    /** Planes for clipping geometry. */\n    private clipPlanes: Plane[];\n    /** Object group ID containing event data. */\n    private EVENT_DATA_ID: string;\n    /** Object group ID containing detector geometries. */\n    private GEOMETRIES_ID: string;\n\n    /**\n     * Constructor for the import manager.\n     * @param clipPlanes Planes for clipping geometry.\n     * @param EVENT_DATA_ID Object group ID containing event data.\n     * @param GEOMETRIES_ID Object group ID containing detector geometries.\n     */\n    constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n        this.clipPlanes = clipPlanes;\n        this.EVENT_DATA_ID = EVENT_DATA_ID;\n        this.GEOMETRIES_ID = GEOMETRIES_ID;\n    }\n\n    /**\n     * Loads an OBJ (.obj) geometry from the given filename.\n     * @param callback Callback when geometry is processed.\n     * @param filename Path to the geometry.\n     * @param name Name given to the geometry.\n     * @param color Color to initialize the geometry.\n     * @param doubleSided Renders both sides of the material.\n     */\n    public loadOBJGeometry(\n        callback: (object: Group) => any,\n        filename: string,\n        name: string,\n        color: any,\n        doubleSided: boolean\n    ) {\n        if (color == null) {\n            color = 0x41a6f4;\n        }\n        const objLoader = new OBJLoader();\n        objLoader.load(filename, object => {\n            const processed = this.processOBJ(object, name, color, doubleSided, 'OBJ file');\n            callback(processed);\n        });\n    }\n\n    /**\n     * Parses and loads a geometry in OBJ (.obj) format.\n     * @param geometry Geometry in OBJ (.obj) format.\n     * @param name Name given to the geometry.\n     * @returns The processed object.\n     */\n    public parseOBJGeometry(geometry: string, name: string): Group {\n        const objLoader = new OBJLoader();\n        const object = objLoader.parse(geometry);\n        return this.processOBJ(\n            object,\n            name,\n            0x41a6f4,\n            false,\n            'OBJ file loaded from the client.'\n        );\n    }\n\n    /**\n     * Process the geometry object being loaded from OBJ (.obj) format.\n     * @param object 3D object.\n     * @param name Name of the object.\n     * @param color Color of the object.\n     * @param doubleSided Renders both sides of the material.\n     * @param data Data/description to be associated with the object.\n     */\n    private processOBJ(\n        object: Object3D,\n        name: string,\n        color: any,\n        doubleSided: boolean,\n        data?: string\n    ): Group {\n        object.name = name;\n        object.userData = { info: data };\n        return this.setObjFlat(object, color, doubleSided);\n    }\n\n    /**\n     * Process the 3D object and flatten it.\n     * @param object3d Group of geometries that make up the object.\n     * @param color Color of the object.\n     * @param doubleSided Renders both sides of the material.\n     * @returns The processed object.\n     */\n    private setObjFlat(object3d: any, color: any, doubleSided: boolean): Group {\n        const material2 = new MeshPhongMaterial({\n            color: color,\n            shininess: 0,\n            wireframe: false,\n            clippingPlanes: this.clipPlanes,\n            clipIntersection: true,\n            clipShadows: false\n\n        });\n        if (doubleSided) {\n            material2.side = DoubleSide;\n        }\n\n        object3d.traverse(child => {\n            if (child instanceof Mesh) {\n                child.name = object3d.name;\n                child.userData = object3d.userData;\n                // Use the new material\n                if (child.material instanceof Material) {\n                    child.material.dispose();\n                    child.material = material2;\n                }\n                // enable casting shadows\n                child.castShadow = false;\n                child.receiveShadow = false;\n            } else {\n                if (\n                    child instanceof LineSegments &&\n                    child.material instanceof LineBasicMaterial\n                ) {\n                    child.material.color.set(color);\n                }\n            }\n        });\n        return object3d;\n    }\n\n    /**\n     * Parses and loads a geometry in GLTF (.gltf) format.\n     * @param geometry Geometry in GLTF (.gltf) format.\n     * @param callback Callback called after the geometry is loaded.\n     */\n    public parseGLTFGeometry(geometry: any, callback: (geometries: Object3D, eventData: Object3D) => any) {\n        const loader = new GLTFLoader();\n        const sceneString = JSON.stringify(geometry, null, 2);\n        // @ts-ignore\n        loader.parse(sceneString, '', gltf => {\n            const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n            const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n            callback(eventData, geometries);\n        });\n    }\n\n    /**\n     * Loads a GLTF (.gltf) scene/geometry from the given URL.\n     * @param sceneUrl URL to the GLTF (.gltf) file.\n     * @param name Name of the loaded scene/geometry.\n     * @param callback Callback called after the scene/geometry is loaded.\n     * @param scale Scale of the geometry.\n     */\n    public loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => any, scale?: number) {\n        const loader = new GLTFLoader();\n        // @ts-ignore\n        loader.load(sceneUrl, gltf => {\n            const geometry = gltf.scene;\n            this.processGeometry(geometry, name, scale);\n            callback(geometry);\n        });\n    }\n\n    /**\t\n     * Loads geometries from JSON.\n     * @param json JSON or URL to JSON file of the geometry.\n     * @param name Name of the geometry or group of geometries.\n     * @param callback Callback called after the geometries are\n     * processed and loaded.\n     * @param scale Scale of the geometry.\n     */\n    public loadJSONGeometry(json: string | object, name: string,\n        callback: (Geometry: Object3D) => any,\n        scale?: number) {\n        const loader = new ObjectLoader();\n        if (typeof json === 'string') {\n            loader.load(json, (geometry: Object3D) => {\n                this.processGeometry(geometry, name, scale);\n                callback(geometry);\n            });\n        } else if (typeof json === 'object') {\n            const geometry = loader.parse(json);\n            this.processGeometry(geometry, name, scale);\n            callback(geometry);\n        }\n    }\n\n    /**\n     * Process the geometry by setting up material and clipping attributes.\n     * @param geometry Geometry to be processed.\n     * @param name Name of the geometry.\n     * @param scale Scale of the geometry.\n     */\n    private processGeometry(geometry: Object3D, name: string, scale?: number) {\n        geometry.name = name;\n        // Set a custom scale if provided\n        if (scale) {\n            geometry.scale.set(scale, scale, scale);\n        }\n        geometry.traverse((child) => {\n            if (child instanceof Mesh) {\n                child.name = child.userData.name = name;\n                if (child.material instanceof Material) {\n                    const color = child.material['color'] ? child.material['color'] : 0x2fd691;\n                    const side = child.material['side'] ? child.material['side'] : undefined;\n                    // Disposing of the default material\n                    child.material.dispose();\n                    // Changing to a material with 0 shininess\n                    child.material = new MeshPhongMaterial({\n                        color: color,\n                        shininess: 0,\n                        side: side\n                    });\n                    // Setting up the clipping planes\n                    child.material.clippingPlanes = this.clipPlanes;\n                    child.material.clipIntersection = true;\n                    child.material.clipShadows = false;\n                }\n            }\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InfoLoggerService.html":{"url":"injectables/InfoLoggerService.html","title":"injectable - InfoLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InfoLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/infologger.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging data to the information panel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/infologger.service.ts:21\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/infologger.service.ts:32\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/infologger.service.ts:12\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/infologger.service.ts:14\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Service for logging data to the information panel\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoLoggerService {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:15\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:181\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:156\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:30\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:85\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:64\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:258\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:48\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:219\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:202\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:106\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:15\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:181\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:156\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:30\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:85\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:64\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:258\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:219\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:202\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:106\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Group, Object3D } from 'three';\nimport * as THREE from 'three';\nimport { UIService } from '../ui.service';\nimport { ThreeService } from '../three.service';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLoggerService } from '../infologger.service';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeService;\n  /** UIService to perform UI related functions. */\n  private ui: UIService;\n  /** Event data processed by the loader. */\n  private eventData: any;\n\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n    // initiate load\n    this.loadObjectTypes(eventData);\n\n    const eventNumber = eventData['event number'] ? eventData['event number'] : eventData['eventNumber'];\n    const runNumber = eventData['run number'] ? eventData['run number'] : eventData['runNumber'];\n    infoLogger.add('Event#' + eventNumber + ' from run#' + runNumber, 'Loaded');\n  }\n\n  /**\n   * Get the list of event names from the event data.\n   * @param eventsData Object containing all event data.\n   * @returns List of event names.\n   */\n  public getEventsList(eventsData: any): string[] {\n    const eventsList: string[] = [];\n\n    for (const eventName of Object.keys(eventsData)) {\n      if (eventsData[eventName] !== null) {\n        eventsList.push(eventName);\n      }\n    }\n\n    return eventsList;\n  }\n\n  /**\n   * Get list of collections in the event data.\n   * @returns List of all collection names.\n   */\n  public getCollections(): string[] {\n    if (!this.eventData) {\n      return null;\n    }\n\n    const collections = [];\n    for (const objectType of Object.keys(this.eventData)) {\n      if (this.eventData[objectType] && typeof this.eventData[objectType] === 'object') {\n        for (const collection of Object.keys(this.eventData[objectType])) {\n          collections.push(collection);\n        }\n      }\n    }\n    return collections;\n  }\n\n  /**\n   * Get the collection with the given collection name from the event data.\n   * @param collectionName Name of the collection to get.\n   * @returns An object containing the collection.\n   */\n  public getCollection(collectionName: string): any {\n    if (!this.eventData) {\n      return null;\n    }\n\n    for (const objectType of Object.keys(this.eventData)) {\n      if (this.eventData[objectType]) {\n        for (const collection of Object.keys(this.eventData[objectType])) {\n          if (collection === collectionName) {\n            return this.eventData[objectType][collection];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Receives an object containing the data from an event and parses it\n   * to reconstruct the different collections of physics objects.\n   * @param eventData Representing ONE event (expressed in the Phoenix format).\n   */\n  protected loadObjectTypes(eventData: any) {\n    if (eventData.Tracks) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts: Cut[] = [\n        new Cut('chi2', 0, 50),\n        new Cut('dof', 0, 100),\n        new Cut('mom', 0, 500)\n      ];\n\n      this.addObjectType(eventData.Tracks, PhoenixObjects.getTrack, 'Tracks', cuts);\n    }\n\n    if (eventData.Jets) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts);\n    }\n\n    if (eventData.Hits) {\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons');\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[]) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      cuts = cuts?.filter(cut => objectCollection[0][cut.field]);\n      this.ui.addCollection(typeFolder, collectionName, cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new THREE.Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n\n    for (const clusterID of muonParams.LinkedClusters) {\n      const clusterColl = clusterID.split(':')[0];\n      const clusterIndex = clusterID.split(':')[1];\n\n      if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n        const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n        if (clusterParams) {\n          const cluster = PhoenixObjects.getCluster(clusterParams);\n          muonScene.add(cluster);\n        }\n      }\n    }\n\n    for (const trackID of muonParams.LinkedTracks) {\n      const trackColl = trackID.split(':')[0];\n      const trackIndex = trackID.split(':')[1];\n\n      if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n        const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n        if (trackParams) {\n          const track = PhoenixObjects.getTrack(trackParams);\n          muonScene.add(track);\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label \n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:180\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:139\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:92\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:16\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as THREE from 'three';\nimport { Object3D } from 'three';\nimport { isArray } from 'util';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    const positions = trackParams.pos;\n    // Track with no points\n    if (!positions) {\n      return;\n    }\n\n    const numPoints = positions.length;\n    // Track with too few points\n    if (numPoints  {\n      const distA = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n      const distB = b[0] * b[0] + b[1] * b[1] + b[2] * b[2];\n\n      return distA - distB;\n    });\n\n    // const length = 100;\n    let objectColor = 0xff0000;\n    if (trackParams.color) {\n      objectColor = parseInt(trackParams.color, 16);\n    }\n\n    // Apply pT cut TODO - make this configurable.\n    const momentum = trackParams.mom;\n    if (momentum) {\n      if (momentum[0] * momentum[0] + momentum[1] * momentum[1] + momentum[2] * momentum[2]  2000) {\n      length = 2000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new THREE.Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new THREE.Vector3(0, 1, 0);\n    const v2 = new THREE.Vector3(x, y, z);\n    const quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new THREE.CylinderGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new THREE.MeshBasicMaterial({ color: 0x2194CE, opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = jetParams;\n    mesh.userData.uuid = mesh.uuid;\n    mesh.name = 'Jet';\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n    } else {\n      positions = hitsParams;\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new THREE.PointsMaterial({ size: 10 });\n    material.color.set('#ff0000');\n    // object\n    const pointsObj = new THREE.Points(geometry, material);\n    pointsObj.userData = hitsParams;\n    pointsObj.userData.uuid = pointsObj.uuid;\n    pointsObj.name = 'Hit';\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0;\n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new THREE.BoxGeometry(30, 30, length);\n    // material\n    const material = new THREE.MeshPhongMaterial({ color: 0xFFD166 });\n    // object\n    const cube = new THREE.Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new THREE.Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new THREE.Vector3(0, 0, 0));\n    cube.userData = clusterParams;\n    cube.userData.uuid = cube.uuid;\n    cube.name = 'Cluster';\n\n    return cube;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                    Private\n                                setRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate the renderer manager by setting up the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:13\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:169\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:108\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:116\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:124\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:192\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:145\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:31\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:182\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:85\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:51\n                \n            \n\n\n            \n                \n                    Set the initial renderer.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:100\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:157\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters } from 'three';\nimport { ControlsManager } from './controls-manager';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n\n  /**\n   * Instantiate the renderer manager by setting up the main renderer.\n   */\n  constructor() {\n    // Main renderer for current browsers\n    this.setRenderer();\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene.\n   * @param controlsManager Manager for managing controls.\n   */\n  public render(scene: Scene, controlsManager: ControlsManager) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(\n            scene,\n            controlsManager.getOverlayCamera()\n          );\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set the initial renderer.\n   */\n  private setRenderer() {\n    const renderer: WebGLRenderer = new WebGLRenderer();\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n    this.getMainRenderer().setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    this.getMainRenderer().setPixelRatio(window.devicePixelRatio)\n    this.getMainRenderer().domElement.className = 'ui-element';\n    this.getMainRenderer().domElement.id = 'three-canvas';\n    let canvas = document.getElementById('eventDisplay');\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                composer\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                renderPass\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initOutlinePass\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new BehaviorSubject('')\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:28\n                            \n                        \n\n                \n                    \n                        BehaviorSubject for the currently selected object. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:34\n                            \n                        \n\n                \n                    \n                        Effect composer for outline pass. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:30\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:165\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:154\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:36\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:38\n                            \n                        \n\n                \n                    \n                        Render pass. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:142\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:132\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:228\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, renderer: WebGLRenderer, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:61\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer used for event display.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initOutlinePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initOutlinePass(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:118\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:200\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:74\n                \n            \n\n\n            \n                \n                    Render the services of selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager responsible for managing three.js controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:86\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Vector2,\n    Raycaster,\n    Camera,\n    Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper, NormalBlending, WebGLRenderer\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ControlsManager } from './controls-manager';\nimport { InfoLoggerService } from '../infologger.service';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n    /** Is initialized. */\n    private isInit: boolean;\n    /** The camera inside the scene. */\n    private camera: Camera;\n    /** The scene used for event display. */\n    private scene: Scene;\n    /** Object used to display the information of the selected 3D object. */\n    private selectedObject: { name: string; attributes: any[]; };\n    /** BehaviorSubject for the currently selected object. */\n    private activeObject = new BehaviorSubject('');\n    /** Objects to be ignored on hovering over the scene. */\n    private ignoreList: string[];\n\n    // Post processing\n    /** Effect composer for outline pass. */\n    private composer: EffectComposer;\n    /** Outline pass for highlighting the hovered over event display elements. */\n    private outlinePass: OutlinePass;\n    /** Render pass. */\n    private renderPass: RenderPass;\n    /** Service for logging data to the information panel. */\n    private infoLogger: InfoLoggerService;\n\n    /**\n     * Constructor for the selection manager.\n     */\n    constructor() {\n        this.isInit = false;\n        this.ignoreList = [\n            new AmbientLight().type,\n            new DirectionalLight().type,\n            new AxesHelper().type\n        ];\n    }\n\n    /**\n     * Initialize the selection manager.\n     * @param camera The camera inside the scene.\n     * @param scene The scene used for event display.\n     * @param renderer The renderer used for event display.\n     * @param infoLogger Service for logging data to the information panel.\n     */\n    public init(camera: Camera, scene: Scene, renderer: WebGLRenderer, infoLogger: InfoLoggerService) {\n        this.camera = camera;\n        this.scene = scene;\n        this.isInit = true;\n        this.infoLogger = infoLogger;\n        this.initOutlinePass(camera, scene, renderer);\n    }\n\n    /**\n     * Render the services of selection manager.\n     * @param scene The scene used for event display.\n     * @param controlsManager Manager responsible for managing three.js controls.\n     */\n    public render(scene: Scene, controlsManager: ControlsManager) {\n        if (this.composer) {\n            this.renderPass.scene = scene;\n            this.renderPass.camera = controlsManager.getMainCamera();\n            this.composer.render();\n        }\n    }\n\n    /**\n     * Set the currently selected object.\n     * @param selectedObject The currently selected object.\n     */\n    public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n        this.selectedObject = selectedObject;\n    }\n\n    /**\n     * Get the uuid of the currently selected object.\n     * @returns uuid of the currently selected object.\n     */\n    public getActiveObjectId(): any {\n        return this.activeObject;\n    }\n\n    /**\n     * Set if selecting is to be enabled or disabled.\n     * @param enable If selecting is to be enabled or disabled.\n     */\n    public setSelecting(enable: boolean) {\n        if (this.isInit) {\n            if (enable) {\n                this.enableSelecting();\n            } else {\n                this.disableSelecting();\n            }\n        }\n    }\n\n    /**\n     * Initialize the outline pass for highlighting hovered over event display elements.\n     * @param camera The camera inside the scene.\n     * @param scene The scene used for event display.\n     * @param renderer The renderer used for event display.\n     */\n    private initOutlinePass(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n        this.composer = new EffectComposer(renderer);\n        this.renderPass = new RenderPass(scene, camera);\n        this.composer.addPass(this.renderPass);\n        this.outlinePass = new OutlinePass(new Vector2(window.innerWidth, window.innerHeight), scene, camera);\n        this.outlinePass.overlayMaterial.blending = NormalBlending;\n        this.composer.addPass(this.outlinePass);\n        this.outlinePass.visibleEdgeColor.set(0xffff66);\n        this.outlinePass.visibleEdgeColor.set(0xdf5330);\n    }\n\n    /**\n     * Enable selecting of event display elements and set mouse move and click events.\n     */\n    private enableSelecting() {\n        document.getElementById('three-canvas').addEventListener('mousemove',\n            this.onTouchMove, true);\n        document.getElementById('three-canvas').addEventListener('click',\n            this.onDocumentMouseDown, true);\n    }\n\n    /**\n     * Disable selecting of event display elements and remove mouse move and click events.\n     */\n    private disableSelecting() {\n        document.getElementById('three-canvas').removeEventListener('mousemove',\n            this.onTouchMove, true);\n        document.getElementById('three-canvas').removeEventListener('click',\n            this.onDocumentMouseDown, true);\n        this.outlinePass.selectedObjects = [];\n    }\n\n\n    /**\n     * Function to call on mouse move when object selection is enabled.\n     */\n    private onTouchMove = (event: any) => {\n        const intersectedObject = this.intersectObject(event);\n        if (intersectedObject) {\n            if (this.ignoreList.includes(intersectedObject.type)) { return; }\n            this.outlinePass.selectedObjects = [intersectedObject];\n        }\n    }\n\n    /**\n     * Function to call on mouse click when object selection is enabled.\n     */\n    private onDocumentMouseDown = () => {\n        const intersectedObject = this.outlinePass.selectedObjects[0];\n        if (intersectedObject) {\n            this.selectedObject.name = intersectedObject.name;\n            this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n            this.activeObject.next(intersectedObject.uuid);\n\n            for (const key of Object.keys(intersectedObject.userData)) {\n                this.selectedObject.attributes.push({\n                    attributeName: key,\n                    attributeValue: intersectedObject.userData[key]\n                });\n            }\n\n            // Process properties of the selected object\n            const props = Object.keys(intersectedObject.userData).map((key) => {\n                // Only take properties that are a string or number (no arrays or objects)\n                if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n                    return key + '=' + intersectedObject.userData[key];\n                }\n            }).filter(val => val);\n            // Build the log text and add to the logger\n            const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n            if (log) {\n                this.infoLogger.add(log, 'Clicked');\n            }\n        }\n    }\n\n    /**\n     * Check if any object intersects on mouse move.\n     * @param event Event containing data of the mouse move.\n     * @returns Intersected or hovered over object.\n     */\n    private intersectObject(event: any): Object3D {\n        event.preventDefault();\n        const mouse = new Vector2();\n        if (event.changedTouches) {\n            mouse.x = event.changedTouches[0].pageX;\n            mouse.y = event.changedTouches[0].pageY;\n        } else {\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        }\n        const raycaster = new Raycaster();\n        raycaster.setFromCamera(mouse, this.camera);\n        raycaster.params.Line.threshold = 3;\n        // @ts-ignore\n        const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n        if (intersects.length > 0) {\n            // We want the closest one\n            return intersects[0].object;\n        }\n    }\n\n    /**\n     * Highlight the object with the given uuid by giving it an outline.\n     * @param uuid uuid of the object.\n     * @param objectsGroup Group of objects to be traversed for finding the object\n     * with the given uuid.\n     */\n    public highlightObject(uuid: string, objectsGroup: Object3D) {\n        objectsGroup.traverse((object: any) => {\n            if (object.uuid === uuid) {\n                this.outlinePass.selectedObjects = [object];\n            }\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:15\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:181\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:156\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService, infoLogger: InfoLoggerService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:30\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:85\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:64\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:258\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:48\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:219\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:202\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:106\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/eventdisplay.service.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ThreeService } from './three.service';\nimport { InfoLoggerService } from './infologger.service';\nimport { UIService } from './ui.service';\nimport { Configuration } from './extras/configuration.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Camera } from 'three';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Service for all event display related functions.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventdisplayService {\n\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Frame ID of the current animation frame. */\n  private frameID: number;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n\n  /**\n   * Constructor for the event display service.\n   * @param graphicsLibrary ThreeService for all three.js related functions.\n   * @param ui UIService for all UI related functions.\n   * @param http HttpClient for making http requests.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  constructor(public graphicsLibrary: ThreeService, private ui: UIService, private http: HttpClient, private infoLogger: InfoLoggerService) {\n  }\n\n  /**\n   * Initializes the components needed to later represent the geometries.\n   * @param configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration, this.infoLogger);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    if (this.frameID) {\n      cancelAnimationFrame(this.frameID);\n    }\n    // Animate loop\n    const animate = () => {\n      this.frameID = requestAnimationFrame(animate);\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    animate();\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n  }\n\n  /**\n   * Initialize the event display with virtual reality environment and controls.\n   * @param configuration Configuration for preset views and event data loader.\n   */\n  public initVR(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration, this.infoLogger);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    // Animate loop\n    const animate = () => {\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    this.graphicsLibrary.setVRButton();\n    this.graphicsLibrary.setAnimationLoop(animate);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadOBJGeometry(filename: string, name: string, color: any, doubleSided: boolean) {\n    this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided);\n    this.ui.addGeometry(name, color);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   */\n  public parseOBJGeometry(content: string, name: string) {\n    this.graphicsLibrary.parseOBJGeometry(content, name);\n    this.ui.addGeometry(name, 0x000fff);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   */\n  public parsePhoenixDisplay(input: any) {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n      this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   */\n  public parseGLTFGeometry(input: any) {\n    const scene = JSON.parse(input);\n    this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param scale Scale of the geometry.\n   */\n  public loadGLTFGeometry(url: any, name: string, scale?: number) {\n    this.graphicsLibrary.loadGLTFGeometry(url, name, scale);\n    this.ui.addGeometry(name, 0xff0000);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param scale Scale of the geometry.\n   */\n  public loadJSONGeometry(json: string | object, name: string, scale?: number) {\n    this.graphicsLibrary.loadJSONGeometry(json, name, scale);\n    this.ui.addGeometry(name, 0xff0000);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n\n    const eventNumber = sceneConfiguration.eventData['event number']\n      ? sceneConfiguration.eventData['event number']\n      : sceneConfiguration.eventData['eventNumber'];\n    const runNumber = sceneConfiguration.eventData['run number']\n      ? sceneConfiguration.eventData['run number']\n      : sceneConfiguration.eventData['runNumber'];\n    this.infoLogger.add('Scene with event#' + eventNumber + ' and run#' + runNumber, 'Loaded');\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.getEventDataLoader().getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.getEventDataLoader().getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.getEventDataLoader().getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, doubleSided);\n      },\n      parseOBJGeometry: (content: string, name: string) => {\n        this.parseOBJGeometry(content, name);\n      },\n      loadSceneConfiguration: (displayUrl: any) => {\n        this.http\n          .get(displayUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.loadSceneConfiguration(input);\n          });\n      },\n      parseGLTFGeometry: (gltfUrl: any) => {\n        this.http\n          .get(gltfUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.parseGLTFGeometry(input);\n          });\n      }\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n      return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\n1. Issue tracking\nThe best way to start contributing is to explore the GitHub issue tracker for the repository. \nIf you have already tried the application feel free to open an issue if you notice any bug or feature that could be improved.\nInclude a brief description and context of the issue, and optionally choose labels to mark the issue as bug, enhancement, question...\nto give extra information to other developers.\n2. Start coding\nOnce you are decided to start contributing on the repository, \nyou may want to take a look at our developer guide that can be found here.\n3. Pull Requests\nWhen creating a Pull Request please include a short description explaining what has changed and why. \nThis will help others reviewing your code so you may also reference any issues that you were working on fixing.\nFinally choose a meaningful title so your pull request can be easily identified.\nThanks!\nYour contribution is very appreciated, thank you!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/services/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            injectable\n            EventdisplayService\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/extras/attribute.pipe.ts\n            \n            pipe\n            AttributePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/extras/configuration.model.ts\n            \n            class\n            Configuration\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/services/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/services/infologger.service.ts\n            \n            injectable\n            InfoLoggerService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (29/29)\n            \n        \n        \n            \n                \n                src/app/services/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/app/services/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/app/services/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/services/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/services/three.service.ts\n            \n            injectable\n            ThreeService\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/app/services/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/app/services/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/app/services/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                src/app/services/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/app/services/ui.service.ts\n            \n            injectable\n            UIService\n            \n                100 %\n                (38/38)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~9.0.5\n        \n            @angular/cdk : ^9.1.1\n        \n            @angular/common : ~9.0.5\n        \n            @angular/compiler : ~9.0.5\n        \n            @angular/core : ~9.0.5\n        \n            @angular/forms : ~9.0.5\n        \n            @angular/material : ^9.1.1\n        \n            @angular/platform-browser : ~9.0.5\n        \n            @angular/platform-browser-dynamic : ~9.0.5\n        \n            @angular/router : ~9.0.5\n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            @types/three : ^0.103.2\n        \n            core-js : ^2.6.11\n        \n            coveralls : ^3.0.9\n        \n            css-element-queries : ^1.2.3\n        \n            dat.gui : ^0.7.6\n        \n            jszip : ^3.5.0\n        \n            rxjs : ~6.5.4\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.114.0\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nPhoenix Project\nThe idea of this project is to have a simple way to visualise event and geometry data using nothing more than a web browser. The data should be as detector-agnostic as possible.\nTechnically the 3D is done with three.js, the menu (at the moment) uses DAT.GUI and the data format is just plain JSON.\nThis project was generated with Angular CLI version 7.3.4.\nYou can see an online version at https://hepsoftwarefoundation.org/phoenix/\nBuild and install\nThis is an Angular application, so you will need to have Node js and Angular CLI installed locally.\nYou can follow this guide to set up your local environment.\nOnce everything is set up, run ng serve from the command line in the project directory for a dev server. Then navigate to http://localhost:4200/ from your browser. \nThe app will automatically reload if you change any of the source files.\nDocumentation\n\nUser manual.\nHow to contribute.\nDeveloper guide.\n\nContact\nThis is still very much a work in progress, so let me know of any problems (and don't be too surprised if there are some).\nedward.moyse@cern.ch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
